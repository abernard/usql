/** \file
 *  This C source file was generated by $ANTLR version 3.4
 *
 *   -  From the grammar source file : SQL.g
 *   -              On : 2012-04-09 15:01:15
 *   -        for the parser : SQLParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//  notice, this list of conditions and the following disclaimer in the
//  documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//  derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include  "SQLParser.h"
/* ----------------------------------------- */

/******************************************************************
*
* uSQL for C++
*
* UnQL.g
*
* Copyright (C) Satoshi Konno 2011
*
* This is licensed under BSD-style license, see file COPYING.
*
******************************************************************/




/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define   CTX ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef  SCOPE_TYPE
#undef  SCOPE_STACK
#undef  SCOPE_TOP
#define SCOPE_TYPE(scope)   pSQLParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pSQLParser_##scope##Stack
#define SCOPE_TOP(scope)  ctx->pSQLParser_##scope##Top
#define SCOPE_SIZE(scope)     ctx->pSQLParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)  (ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */

#undef    PARSER
#undef    RECOGNIZER
#undef    HAVEPARSEDRULE
#undef    MEMOIZE
#undef    INPUT
#undef    STRSTREAM
#undef    HASEXCEPTION
#undef    EXCEPTION
#undef    MATCHT
#undef    MATCHANYT
#undef    FOLLOWSTACK
#undef    FOLLOWPUSH
#undef    FOLLOWPOP
#undef    PRECOVER
#undef    PREPORTERROR
#undef    LA
#undef    LT
#undef    CONSTRUCTEX
#undef    CONSUME
#undef    MARK
#undef    REWIND
#undef    REWINDLAST
#undef    PERRORRECOVERY
#undef    HASFAILED
#undef    FAILEDFLAG
#undef    RECOVERFROMMISMATCHEDSET
#undef    RECOVERFROMMISMATCHEDELEMENT
#undef    INDEX
#undef    ADAPTOR
#undef    SEEK
#undef    RULEMEMO
#undef    DBG

#define   PARSER        ctx->pParser
#define   RECOGNIZER        PARSER->rec
#define   PSRSTATE        RECOGNIZER->state
#define   HAVEPARSEDRULE(r)       RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define   MEMOIZE(ri,si)      RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define   INPUT         PARSER->tstream
#define   STRSTREAM         INPUT
#define   ISTREAM       INPUT->istream
#define   INDEX()       ISTREAM->index(INPUT->istream)
#define   HASEXCEPTION()      (PSRSTATE->error == ANTLR3_TRUE)
#define   EXCEPTION         PSRSTATE->exception
#define   MATCHT(t, fs)       RECOGNIZER->match(RECOGNIZER, t, fs)
#define   MATCHANYT()       RECOGNIZER->matchAny(RECOGNIZER)
#define   FOLLOWSTACK       PSRSTATE->following
#ifdef  SKIP_FOLLOW_SETS
#define   FOLLOWPUSH(x)
#define   FOLLOWPOP()
#else
#define   FOLLOWPUSH(x)       FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define   FOLLOWPOP()       FOLLOWSTACK->pop(FOLLOWSTACK)
#endif
#define   PRECOVER()        RECOGNIZER->recover(RECOGNIZER)
#define   PREPORTERROR()      RECOGNIZER->reportError(RECOGNIZER)
#define   LA(n)         INPUT->istream->_LA(ISTREAM, n)
#define   LT(n)         INPUT->_LT(INPUT, n)
#define   CONSTRUCTEX()       RECOGNIZER->exConstruct(RECOGNIZER)
#define   CONSUME()         ISTREAM->consume(ISTREAM)
#define   MARK()        ISTREAM->mark(ISTREAM)
#define   REWIND(m)         ISTREAM->rewind(ISTREAM, m)
#define   REWINDLAST()      ISTREAM->rewindLast(ISTREAM)
#define   SEEK(n)       ISTREAM->seek(ISTREAM, n)
#define   PERRORRECOVERY      PSRSTATE->errorRecovery
#define   FAILEDFLAG        PSRSTATE->failed
#define   HASFAILED()       (FAILEDFLAG == ANTLR3_TRUE)
#define   BACKTRACKING      PSRSTATE->backtracking
#define   RECOVERFROMMISMATCHEDSET(s)   RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define   RECOVERFROMMISMATCHEDELEMENT(e) RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define   ADAPTOR             ctx->adaptor
#define   RULEMEMO            PSRSTATE->ruleMemo
#define   DBG               RECOGNIZER->debugger


#define   TOKTEXT(tok, txt)         tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define   UP    ANTLR3_TOKEN_UP
#define   DOWN  ANTLR3_TOKEN_DOWN
#define   EOR   ANTLR3_TOKEN_EOR
#define   INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/** \brief Table of all token names in symbolic order, mainly used for
 *     error reporting.
 */
pANTLR3_UINT8   SQLParserTokenNames[97+4]
   = {
    (pANTLR3_UINT8) "<invalid>",     /* String to print to indicate an invalid token */
    (pANTLR3_UINT8) "<EOR>",
    (pANTLR3_UINT8) "<DOWN>",
    (pANTLR3_UINT8) "<UP>",
    (pANTLR3_UINT8) "A",
    (pANTLR3_UINT8) "ALL",
    (pANTLR3_UINT8) "ANCESTOR",
    (pANTLR3_UINT8) "AND",
    (pANTLR3_UINT8) "AS",
    (pANTLR3_UINT8) "ASC",
    (pANTLR3_UINT8) "ASTERISK",
    (pANTLR3_UINT8) "ASYNC",
    (pANTLR3_UINT8) "B",
    (pANTLR3_UINT8) "BY",
    (pANTLR3_UINT8) "C",
    (pANTLR3_UINT8) "CHAR",
    (pANTLR3_UINT8) "COLLECTION",
    (pANTLR3_UINT8) "COLLECTION_INDEX",
    (pANTLR3_UINT8) "COMMA",
    (pANTLR3_UINT8) "CREATE",
    (pANTLR3_UINT8) "CURRENT_DATE",
    (pANTLR3_UINT8) "CURRENT_TIME",
    (pANTLR3_UINT8) "CURRENT_TIMESTAMP",
    (pANTLR3_UINT8) "D",
    (pANTLR3_UINT8) "DELETE",
    (pANTLR3_UINT8) "DESC",
    (pANTLR3_UINT8) "DISTINCT",
    (pANTLR3_UINT8) "DOUBLE_EQ",
    (pANTLR3_UINT8) "DROP",
    (pANTLR3_UINT8) "E",
    (pANTLR3_UINT8) "EACH",
    (pANTLR3_UINT8) "ESC_SEQ",
    (pANTLR3_UINT8) "EXCEPT",
    (pANTLR3_UINT8) "EXPONENT",
    (pANTLR3_UINT8) "EscapeSequence",
    (pANTLR3_UINT8) "F",
    (pANTLR3_UINT8) "FLATTEN",
    (pANTLR3_UINT8) "FLOAT",
    (pANTLR3_UINT8) "FROM",
    (pANTLR3_UINT8) "G",
    (pANTLR3_UINT8) "GE",
    (pANTLR3_UINT8) "GROUP",
    (pANTLR3_UINT8) "GT",
    (pANTLR3_UINT8) "H",
    (pANTLR3_UINT8) "HAVING",
    (pANTLR3_UINT8) "HEX_DIGIT",
    (pANTLR3_UINT8) "I",
    (pANTLR3_UINT8) "ID",
    (pANTLR3_UINT8) "IN",
    (pANTLR3_UINT8) "INSERT",
    (pANTLR3_UINT8) "INTERSECT",
    (pANTLR3_UINT8) "INTO",
    (pANTLR3_UINT8) "IS",
    (pANTLR3_UINT8) "J",
    (pANTLR3_UINT8) "K",
    (pANTLR3_UINT8) "L",
    (pANTLR3_UINT8) "LE",
    (pANTLR3_UINT8) "LIMIT",
    (pANTLR3_UINT8) "M",
    (pANTLR3_UINT8) "N",
    (pANTLR3_UINT8) "NIL",
    (pANTLR3_UINT8) "NOTEQ",
    (pANTLR3_UINT8) "NUMBER",
    (pANTLR3_UINT8) "O",
    (pANTLR3_UINT8) "OCTAL_ESC",
    (pANTLR3_UINT8) "OFFSET",
    (pANTLR3_UINT8) "OPTIONS",
    (pANTLR3_UINT8) "OP_LT",
    (pANTLR3_UINT8) "OR",
    (pANTLR3_UINT8) "ORDER",
    (pANTLR3_UINT8) "P",
    (pANTLR3_UINT8) "Q",
    (pANTLR3_UINT8) "R",
    (pANTLR3_UINT8) "S",
    (pANTLR3_UINT8) "SELECT",
    (pANTLR3_UINT8) "SEMICOLON",
    (pANTLR3_UINT8) "SET",
    (pANTLR3_UINT8) "SINGLE_EQ",
    (pANTLR3_UINT8) "STRING",
    (pANTLR3_UINT8) "SYNC",
    (pANTLR3_UINT8) "T",
    (pANTLR3_UINT8) "U",
    (pANTLR3_UINT8) "UNICODE_ESC",
    (pANTLR3_UINT8) "UNION",
    (pANTLR3_UINT8) "UPDATE",
    (pANTLR3_UINT8) "V",
    (pANTLR3_UINT8) "VALUE",
    (pANTLR3_UINT8) "VALUES",
    (pANTLR3_UINT8) "W",
    (pANTLR3_UINT8) "WHERE",
    (pANTLR3_UINT8) "WS",
    (pANTLR3_UINT8) "X",
    (pANTLR3_UINT8) "Y",
    (pANTLR3_UINT8) "Z",
    (pANTLR3_UINT8) "'('",
    (pANTLR3_UINT8) "')'",
    (pANTLR3_UINT8) "':'",
    (pANTLR3_UINT8) "'['",
    (pANTLR3_UINT8) "']'",
    (pANTLR3_UINT8) "'{'",
    (pANTLR3_UINT8) "'}'"
     };



// Forward declare the locally static matching functions we have generated.
//
static 
 void
  statement_list  (pSQLParser ctx, uSQL::SQLParser *sqlParser);
static 
 void
  statement  (pSQLParser ctx, uSQL::SQLParser *sqlParser);
static 
 void
  select_stmt  (pSQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
  select_core  (pSQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 uSQL::SQLColumns *
  result_column_section  (pSQLParser ctx);
static 
 uSQL::SQLFrom *
  from_section  (pSQLParser ctx);
static 
 void
  table_name  (pSQLParser ctx, uSQL::SQLCollections *SQLCollections);
static 
 uSQL::SQLCollection *
  data_source  (pSQLParser ctx);
static 
 uSQL::SQLGroupBy *
  grouping_section  (pSQLParser ctx);
static 
 uSQL::SQLHaving *
  having_section  (pSQLParser ctx);
static 
 uSQL::SQLOrderBy *
  sorting_section  (pSQLParser ctx);
static 
 void
  sorting_item  (pSQLParser ctx, uSQL::SQLOrderBy *sqlOrders);
static 
 SQLParser_sorting_specification_return
  sorting_specification  (pSQLParser ctx);
static 
 uSQL::SQLLimit *
  limit_section  (pSQLParser ctx);
static 
 uSQL::SQLOffset *
  offset_section  (pSQLParser ctx);
static 
 void
  create_collection_stmt  (pSQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
  drop_collection_stmt  (pSQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
  create_index_stmt  (pSQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
  drop_index_stmt  (pSQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
  insert_stmt  (pSQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 uSQL::SQLColumns *
  insert_columns_section  (pSQLParser ctx);
static 
 uSQL::SQLValues *
  insert_values_section  (pSQLParser ctx);
static 
 void
  update_stmt  (pSQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
  property_section  (pSQLParser ctx, uSQL::SQLSets *sqlSet);
static 
 void
  delete_stmt  (pSQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
  expression  (pSQLParser ctx, uSQL::SQLNode *parentNode);
static 
 void
  expression_list  (pSQLParser ctx, uSQL::SQLNodeList &sqlNodeList);
static 
 uSQL::SQLExpression *
  expression_literal  (pSQLParser ctx);
static 
 void
  expression_literal_value  (pSQLParser ctx, uSQL::SQLExpression *sqlExpr);
static 
 void
  expression_dictionary  (pSQLParser ctx, uSQL::SQLNodeList &sqlNodeList);
static 
 void
  dictionary_literal  (pSQLParser ctx, uSQL::SQLExpression *parentSqlExpr);
static 
 void
  expression_array  (pSQLParser ctx, uSQL::SQLNodeList &sqlNodeList);
static 
 void
  array_literal  (pSQLParser ctx, uSQL::SQLExpression *parentSqlExpr);
static 
 void
  expression_logic_operator  (pSQLParser ctx, uSQL::SQLNodeList &sqlNodeList);
static 
 void
  expression_binary_operator  (pSQLParser ctx, uSQL::SQLNodeList &sqlNodeList);
static 
 uSQL::SQLFunction *
  expression_function  (pSQLParser ctx);
static 
 uSQL::SQLFunction *
  function_name  (pSQLParser ctx);
static 
 void
  function_value  (pSQLParser ctx, uSQL::SQLFunction *sqlFunc);
static 
 uSQL::SQLOperator *
  expression_operator  (pSQLParser ctx);
static 
 uSQL::SQLOperator *
  binary_operator  (pSQLParser ctx);
static 
 uSQL::SQLOperator *
  logical_operator  (pSQLParser ctx);
static 
 SQLParser_property_literal_return
  property_literal  (pSQLParser ctx);
static 
 SQLParser_integer_literal_return
  integer_literal  (pSQLParser ctx);
static 
 SQLParser_real_literal_return
  real_literal  (pSQLParser ctx);
static 
 SQLParser_string_literal_return
  string_literal  (pSQLParser ctx);
static 
 SQLParser_true_literal_return
  true_literal  (pSQLParser ctx);
static 
 SQLParser_false_literal_return
  false_literal  (pSQLParser ctx);
static 
 bool
  sync_operator  (pSQLParser ctx);
static 
 void
  compound_operator  (pSQLParser ctx);
static 
 void
  condition_operator  (pSQLParser ctx);
static 
 SQLParser_property_return
  property  (pSQLParser ctx);
static 
 void
  value  (pSQLParser ctx);
static 
 SQLParser_name_return
  name  (pSQLParser ctx);
static 
 uSQL::SQLCollection *
  collection_section  (pSQLParser ctx);
static 
 SQLParser_collection_name_return
  collection_name  (pSQLParser ctx);
static 
 void
  column_section  (pSQLParser ctx, uSQL::SQLColumns *sqlColumns);
static 
 uSQL::SQLIndex *
  index_section  (pSQLParser ctx);
static 
 SQLParser_index_name_return
  index_name  (pSQLParser ctx);
static 
 uSQL::SQLWhere *
  where_section  (pSQLParser ctx);
static void SQLParserFree(pSQLParser ctx);
static void   SQLParserReset (pSQLParser ctx);

/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed.
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static  void ANTLR3_CDECL freeScope(void * scope)
{
  ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "SQL.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
  return fileName;
}
/** \brief Create a new SQLParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pSQLParser
SQLParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
  // See if we can create a new parser with the standard constructor
  //
  return SQLParserNewSSD(instream, NULL);
}

/** \brief Create a new SQLParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pSQLParser
SQLParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
  pSQLParser ctx;   /* Context structure we will build and return   */

  ctx = (pSQLParser) ANTLR3_CALLOC(1, sizeof(SQLParser));

  if  (ctx == NULL)
  {
    // Failed to allocate memory for parser context
    //
    return  NULL;
  }

  /* -------------------------------------------------------------------
   * Memory for basic structure is allocated, now to fill in
   * the base ANTLR3 structures. We initialize the function pointers
   * for the standard ANTLR3 parser function set, but upon return
   * from here, the programmer may set the pointers to provide custom
   * implementations of each function.
   *
   * We don't use the macros defined in SQLParser.h here, in order that you can get a sense
   * of what goes where.
   */

  /* Create a base parser/recognizer, using the supplied token stream
   */
  ctx->pParser    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
  /* Install the implementation of our SQLParser interface
   */
  ctx->statement_list = statement_list;
  ctx->statement  = statement;
  ctx->select_stmt  = select_stmt;
  ctx->select_core  = select_core;
  ctx->result_column_section  = result_column_section;
  ctx->from_section   = from_section;
  ctx->table_name = table_name;
  ctx->data_source  = data_source;
  ctx->grouping_section   = grouping_section;
  ctx->having_section = having_section;
  ctx->sorting_section  = sorting_section;
  ctx->sorting_item   = sorting_item;
  ctx->sorting_specification  = sorting_specification;
  ctx->limit_section  = limit_section;
  ctx->offset_section = offset_section;
  ctx->create_collection_stmt = create_collection_stmt;
  ctx->drop_collection_stmt   = drop_collection_stmt;
  ctx->create_index_stmt  = create_index_stmt;
  ctx->drop_index_stmt  = drop_index_stmt;
  ctx->insert_stmt  = insert_stmt;
  ctx->insert_columns_section = insert_columns_section;
  ctx->insert_values_section  = insert_values_section;
  ctx->update_stmt  = update_stmt;
  ctx->property_section   = property_section;
  ctx->delete_stmt  = delete_stmt;
  ctx->expression = expression;
  ctx->expression_list  = expression_list;
  ctx->expression_literal = expression_literal;
  ctx->expression_literal_value   = expression_literal_value;
  ctx->expression_dictionary  = expression_dictionary;
  ctx->dictionary_literal = dictionary_literal;
  ctx->expression_array   = expression_array;
  ctx->array_literal  = array_literal;
  ctx->expression_logic_operator  = expression_logic_operator;
  ctx->expression_binary_operator = expression_binary_operator;
  ctx->expression_function  = expression_function;
  ctx->function_name  = function_name;
  ctx->function_value = function_value;
  ctx->expression_operator  = expression_operator;
  ctx->binary_operator  = binary_operator;
  ctx->logical_operator   = logical_operator;
  ctx->property_literal   = property_literal;
  ctx->integer_literal  = integer_literal;
  ctx->real_literal   = real_literal;
  ctx->string_literal = string_literal;
  ctx->true_literal   = true_literal;
  ctx->false_literal  = false_literal;
  ctx->sync_operator  = sync_operator;
  ctx->compound_operator  = compound_operator;
  ctx->condition_operator = condition_operator;
  ctx->property   = property;
  ctx->value  = value;
  ctx->name   = name;
  ctx->collection_section = collection_section;
  ctx->collection_name  = collection_name;
  ctx->column_section = column_section;
  ctx->index_section  = index_section;
  ctx->index_name = index_name;
  ctx->where_section  = where_section;
  ctx->free       = SQLParserFree;
  ctx->reset      = SQLParserReset;
  ctx->getGrammarFileName = getGrammarFileName;

  /* Install the scope pushing methods.
   */


    RECOGNIZER->displayRecognitionError = uSQLDisplayRecognitionError;
    PARSER->super = (void *)ctx;
   
  /* Install the token table
   */
  PSRSTATE->tokenNames   = SQLParserTokenNames;


  /* Return the newly built parser to the caller
   */
  return  ctx;
}

static void
SQLParserReset (pSQLParser ctx)
{
  RECOGNIZER->reset(RECOGNIZER);
}

/** Free the parser resources
 */
 static void
 SQLParserFree(pSQLParser ctx)
 {
  /* Free any scope memory
   */

  // Free this parser
  //
  ctx->pParser->free(ctx->pParser);


  ANTLR3_FREE(ctx);

  /* Everything is released, so we can return
   */
  return;
 }

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8  *getTokenNames()
{
    return SQLParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_statement_list73  */
static  ANTLR3_BITWORD FOLLOW_statement_in_statement_list73_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_statement_list73 = { FOLLOW_statement_in_statement_list73_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_statement_list77  */
static  ANTLR3_BITWORD FOLLOW_SEMICOLON_in_statement_list77_bits[]  = { ANTLR3_UINT64_LIT(0x0002000011080800), ANTLR3_UINT64_LIT(0x0000000000108400) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_statement_list77 = { FOLLOW_SEMICOLON_in_statement_list77_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_statement_list79  */
static  ANTLR3_BITWORD FOLLOW_statement_in_statement_list79_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_statement_list79 = { FOLLOW_statement_in_statement_list79_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_select_stmt_in_statement102  */
static  ANTLR3_BITWORD FOLLOW_select_stmt_in_statement102_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_select_stmt_in_statement102   = { FOLLOW_select_stmt_in_statement102_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_create_collection_stmt_in_statement108  */
static  ANTLR3_BITWORD FOLLOW_create_collection_stmt_in_statement108_bits[] = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_create_collection_stmt_in_statement108  = { FOLLOW_create_collection_stmt_in_statement108_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_drop_collection_stmt_in_statement114  */
static  ANTLR3_BITWORD FOLLOW_drop_collection_stmt_in_statement114_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_drop_collection_stmt_in_statement114  = { FOLLOW_drop_collection_stmt_in_statement114_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_create_index_stmt_in_statement120  */
static  ANTLR3_BITWORD FOLLOW_create_index_stmt_in_statement120_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_create_index_stmt_in_statement120 = { FOLLOW_create_index_stmt_in_statement120_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_drop_index_stmt_in_statement126  */
static  ANTLR3_BITWORD FOLLOW_drop_index_stmt_in_statement126_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_drop_index_stmt_in_statement126   = { FOLLOW_drop_index_stmt_in_statement126_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_insert_stmt_in_statement132  */
static  ANTLR3_BITWORD FOLLOW_insert_stmt_in_statement132_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_insert_stmt_in_statement132   = { FOLLOW_insert_stmt_in_statement132_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_update_stmt_in_statement138  */
static  ANTLR3_BITWORD FOLLOW_update_stmt_in_statement138_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_update_stmt_in_statement138   = { FOLLOW_update_stmt_in_statement138_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_delete_stmt_in_statement144  */
static  ANTLR3_BITWORD FOLLOW_delete_stmt_in_statement144_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_delete_stmt_in_statement144   = { FOLLOW_delete_stmt_in_statement144_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_select_core_in_select_stmt168  */
static  ANTLR3_BITWORD FOLLOW_select_core_in_select_stmt168_bits[]  = { ANTLR3_UINT64_LIT(0x5200802800700002), ANTLR3_UINT64_LIT(0x0000000000014020) };
static  ANTLR3_BITSET_LIST FOLLOW_select_core_in_select_stmt168 = { FOLLOW_select_core_in_select_stmt168_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sorting_section_in_select_stmt174  */
static  ANTLR3_BITWORD FOLLOW_sorting_section_in_select_stmt174_bits[]  = { ANTLR3_UINT64_LIT(0x5200802800700002), ANTLR3_UINT64_LIT(0x0000000000014000) };
static  ANTLR3_BITSET_LIST FOLLOW_sorting_section_in_select_stmt174 = { FOLLOW_sorting_section_in_select_stmt174_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_limit_section_in_select_stmt181  */
static  ANTLR3_BITWORD FOLLOW_limit_section_in_select_stmt181_bits[]  = { ANTLR3_UINT64_LIT(0x5000802800700002), ANTLR3_UINT64_LIT(0x0000000000014000) };
static  ANTLR3_BITSET_LIST FOLLOW_limit_section_in_select_stmt181   = { FOLLOW_limit_section_in_select_stmt181_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_offset_section_in_select_stmt188  */
static  ANTLR3_BITWORD FOLLOW_offset_section_in_select_stmt188_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_offset_section_in_select_stmt188  = { FOLLOW_offset_section_in_select_stmt188_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SELECT_in_select_core213  */
static  ANTLR3_BITWORD FOLLOW_SELECT_in_select_core213_bits[]   = { ANTLR3_UINT64_LIT(0x5000806804700420), ANTLR3_UINT64_LIT(0x0000000A40014000) };
static  ANTLR3_BITSET_LIST FOLLOW_SELECT_in_select_core213  = { FOLLOW_SELECT_in_select_core213_bits, 2 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_result_column_section_in_select_core232  */
static  ANTLR3_BITWORD FOLLOW_result_column_section_in_select_core232_bits[]  = { ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_result_column_section_in_select_core232   = { FOLLOW_result_column_section_in_select_core232_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_from_section_in_select_core244  */
static  ANTLR3_BITWORD FOLLOW_from_section_in_select_core244_bits[] = { ANTLR3_UINT64_LIT(0x0000120000000002), ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_from_section_in_select_core244  = { FOLLOW_from_section_in_select_core244_bits, 2   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_where_section_in_select_core255  */
static  ANTLR3_BITWORD FOLLOW_where_section_in_select_core255_bits[]  = { ANTLR3_UINT64_LIT(0x0000120000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_where_section_in_select_core255   = { FOLLOW_where_section_in_select_core255_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_grouping_section_in_select_core267  */
static  ANTLR3_BITWORD FOLLOW_grouping_section_in_select_core267_bits[] = { ANTLR3_UINT64_LIT(0x0000100000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_grouping_section_in_select_core267  = { FOLLOW_grouping_section_in_select_core267_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_having_section_in_select_core280  */
static  ANTLR3_BITWORD FOLLOW_having_section_in_select_core280_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_having_section_in_select_core280  = { FOLLOW_having_section_in_select_core280_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASTERISK_in_result_column_section309  */
static  ANTLR3_BITWORD FOLLOW_ASTERISK_in_result_column_section309_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ASTERISK_in_result_column_section309  = { FOLLOW_ASTERISK_in_result_column_section309_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_column_section_in_result_column_section316  */
static  ANTLR3_BITWORD FOLLOW_column_section_in_result_column_section316_bits[] = { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_column_section_in_result_column_section316  = { FOLLOW_column_section_in_result_column_section316_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_result_column_section320  */
static  ANTLR3_BITWORD FOLLOW_COMMA_in_result_column_section320_bits[]  = { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000A40014000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_result_column_section320 = { FOLLOW_COMMA_in_result_column_section320_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_column_section_in_result_column_section322  */
static  ANTLR3_BITWORD FOLLOW_column_section_in_result_column_section322_bits[] = { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_column_section_in_result_column_section322  = { FOLLOW_column_section_in_result_column_section322_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FROM_in_from_section349  */
static  ANTLR3_BITWORD FOLLOW_FROM_in_from_section349_bits[]  = { ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_FROM_in_from_section349   = { FOLLOW_FROM_in_from_section349_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_table_name_in_from_section351  */
static  ANTLR3_BITWORD FOLLOW_table_name_in_from_section351_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_table_name_in_from_section351 = { FOLLOW_table_name_in_from_section351_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_from_section356  */
static  ANTLR3_BITWORD FOLLOW_COMMA_in_from_section356_bits[]   = { ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_from_section356  = { FOLLOW_COMMA_in_from_section356_bits, 2 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_table_name_in_from_section358  */
static  ANTLR3_BITWORD FOLLOW_table_name_in_from_section358_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_table_name_in_from_section358 = { FOLLOW_table_name_in_from_section358_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_data_source_in_table_name378  */
static  ANTLR3_BITWORD FOLLOW_data_source_in_table_name378_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_data_source_in_table_name378  = { FOLLOW_data_source_in_table_name378_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_collection_name_in_data_source401  */
static  ANTLR3_BITWORD FOLLOW_collection_name_in_data_source401_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_collection_name_in_data_source401 = { FOLLOW_collection_name_in_data_source401_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GROUP_in_grouping_section424  */
static  ANTLR3_BITWORD FOLLOW_GROUP_in_grouping_section424_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_GROUP_in_grouping_section424  = { FOLLOW_GROUP_in_grouping_section424_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BY_in_grouping_section426  */
static  ANTLR3_BITWORD FOLLOW_BY_in_grouping_section426_bits[]  = { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000A40014000) };
static  ANTLR3_BITSET_LIST FOLLOW_BY_in_grouping_section426 = { FOLLOW_BY_in_grouping_section426_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_grouping_section428  */
static  ANTLR3_BITWORD FOLLOW_expression_in_grouping_section428_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_grouping_section428 = { FOLLOW_expression_in_grouping_section428_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_grouping_section432  */
static  ANTLR3_BITWORD FOLLOW_COMMA_in_grouping_section432_bits[]   = { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000A40014000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_grouping_section432  = { FOLLOW_COMMA_in_grouping_section432_bits, 2 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_grouping_section434  */
static  ANTLR3_BITWORD FOLLOW_expression_in_grouping_section434_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_grouping_section434 = { FOLLOW_expression_in_grouping_section434_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_HAVING_in_having_section459  */
static  ANTLR3_BITWORD FOLLOW_HAVING_in_having_section459_bits[]  = { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000A40014000) };
static  ANTLR3_BITSET_LIST FOLLOW_HAVING_in_having_section459   = { FOLLOW_HAVING_in_having_section459_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_having_section461  */
static  ANTLR3_BITWORD FOLLOW_expression_in_having_section461_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_having_section461   = { FOLLOW_expression_in_having_section461_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ORDER_in_sorting_section483  */
static  ANTLR3_BITWORD FOLLOW_ORDER_in_sorting_section483_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_ORDER_in_sorting_section483   = { FOLLOW_ORDER_in_sorting_section483_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BY_in_sorting_section485  */
static  ANTLR3_BITWORD FOLLOW_BY_in_sorting_section485_bits[]   = { ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_BY_in_sorting_section485  = { FOLLOW_BY_in_sorting_section485_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sorting_item_in_sorting_section487  */
static  ANTLR3_BITWORD FOLLOW_sorting_item_in_sorting_section487_bits[] = { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_sorting_item_in_sorting_section487  = { FOLLOW_sorting_item_in_sorting_section487_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_sorting_section491  */
static  ANTLR3_BITWORD FOLLOW_COMMA_in_sorting_section491_bits[]  = { ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_sorting_section491   = { FOLLOW_COMMA_in_sorting_section491_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sorting_item_in_sorting_section493  */
static  ANTLR3_BITWORD FOLLOW_sorting_item_in_sorting_section493_bits[] = { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_sorting_item_in_sorting_section493  = { FOLLOW_sorting_item_in_sorting_section493_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_property_in_sorting_item511  */
static  ANTLR3_BITWORD FOLLOW_property_in_sorting_item511_bits[]  = { ANTLR3_UINT64_LIT(0x0000000002000202) };
static  ANTLR3_BITSET_LIST FOLLOW_property_in_sorting_item511   = { FOLLOW_property_in_sorting_item511_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sorting_specification_in_sorting_item514  */
static  ANTLR3_BITWORD FOLLOW_sorting_specification_in_sorting_item514_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_sorting_specification_in_sorting_item514  = { FOLLOW_sorting_specification_in_sorting_item514_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LIMIT_in_limit_section555  */
static  ANTLR3_BITWORD FOLLOW_LIMIT_in_limit_section555_bits[]  = { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000000014000) };
static  ANTLR3_BITSET_LIST FOLLOW_LIMIT_in_limit_section555 = { FOLLOW_LIMIT_in_limit_section555_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_literal_in_limit_section560  */
static  ANTLR3_BITWORD FOLLOW_expression_literal_in_limit_section560_bits[] = { ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_literal_in_limit_section560  = { FOLLOW_expression_literal_in_limit_section560_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_limit_section562  */
static  ANTLR3_BITWORD FOLLOW_COMMA_in_limit_section562_bits[]  = { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000000014000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_limit_section562 = { FOLLOW_COMMA_in_limit_section562_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_literal_in_limit_section568  */
static  ANTLR3_BITWORD FOLLOW_expression_literal_in_limit_section568_bits[] = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_literal_in_limit_section568  = { FOLLOW_expression_literal_in_limit_section568_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_literal_in_offset_section593  */
static  ANTLR3_BITWORD FOLLOW_expression_literal_in_offset_section593_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_literal_in_offset_section593   = { FOLLOW_expression_literal_in_offset_section593_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CREATE_in_create_collection_stmt618  */
static  ANTLR3_BITWORD FOLLOW_CREATE_in_create_collection_stmt618_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_CREATE_in_create_collection_stmt618   = { FOLLOW_CREATE_in_create_collection_stmt618_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLLECTION_in_create_collection_stmt620  */
static  ANTLR3_BITWORD FOLLOW_COLLECTION_in_create_collection_stmt620_bits[]  = { ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_COLLECTION_in_create_collection_stmt620   = { FOLLOW_COLLECTION_in_create_collection_stmt620_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_collection_section_in_create_collection_stmt624  */
static  ANTLR3_BITWORD FOLLOW_collection_section_in_create_collection_stmt624_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_collection_section_in_create_collection_stmt624   = { FOLLOW_collection_section_in_create_collection_stmt624_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OPTIONS_in_create_collection_stmt627  */
static  ANTLR3_BITWORD FOLLOW_OPTIONS_in_create_collection_stmt627_bits[]   = { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000A40014000) };
static  ANTLR3_BITSET_LIST FOLLOW_OPTIONS_in_create_collection_stmt627  = { FOLLOW_OPTIONS_in_create_collection_stmt627_bits, 2 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_create_collection_stmt629  */
static  ANTLR3_BITWORD FOLLOW_expression_in_create_collection_stmt629_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_create_collection_stmt629   = { FOLLOW_expression_in_create_collection_stmt629_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DROP_in_drop_collection_stmt656  */
static  ANTLR3_BITWORD FOLLOW_DROP_in_drop_collection_stmt656_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_DROP_in_drop_collection_stmt656   = { FOLLOW_DROP_in_drop_collection_stmt656_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLLECTION_in_drop_collection_stmt658  */
static  ANTLR3_BITWORD FOLLOW_COLLECTION_in_drop_collection_stmt658_bits[]  = { ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_COLLECTION_in_drop_collection_stmt658 = { FOLLOW_COLLECTION_in_drop_collection_stmt658_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_collection_section_in_drop_collection_stmt662  */
static  ANTLR3_BITWORD FOLLOW_collection_section_in_drop_collection_stmt662_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_collection_section_in_drop_collection_stmt662 = { FOLLOW_collection_section_in_drop_collection_stmt662_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CREATE_in_create_index_stmt687  */
static  ANTLR3_BITWORD FOLLOW_CREATE_in_create_index_stmt687_bits[] = { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_CREATE_in_create_index_stmt687  = { FOLLOW_CREATE_in_create_index_stmt687_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLLECTION_INDEX_in_create_index_stmt689  */
static  ANTLR3_BITWORD FOLLOW_COLLECTION_INDEX_in_create_index_stmt689_bits[]   = { ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_COLLECTION_INDEX_in_create_index_stmt689  = { FOLLOW_COLLECTION_INDEX_in_create_index_stmt689_bits, 2 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_index_section_in_create_index_stmt693  */
static  ANTLR3_BITWORD FOLLOW_index_section_in_create_index_stmt693_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_index_section_in_create_index_stmt693 = { FOLLOW_index_section_in_create_index_stmt693_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DROP_in_drop_index_stmt718  */
static  ANTLR3_BITWORD FOLLOW_DROP_in_drop_index_stmt718_bits[] = { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_DROP_in_drop_index_stmt718  = { FOLLOW_DROP_in_drop_index_stmt718_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLLECTION_INDEX_in_drop_index_stmt720  */
static  ANTLR3_BITWORD FOLLOW_COLLECTION_INDEX_in_drop_index_stmt720_bits[] = { ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_COLLECTION_INDEX_in_drop_index_stmt720  = { FOLLOW_COLLECTION_INDEX_in_drop_index_stmt720_bits, 2   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_index_section_in_drop_index_stmt724  */
static  ANTLR3_BITWORD FOLLOW_index_section_in_drop_index_stmt724_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_index_section_in_drop_index_stmt724   = { FOLLOW_index_section_in_drop_index_stmt724_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sync_operator_in_insert_stmt752  */
static  ANTLR3_BITWORD FOLLOW_sync_operator_in_insert_stmt752_bits[]  = { ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_sync_operator_in_insert_stmt752   = { FOLLOW_sync_operator_in_insert_stmt752_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INSERT_in_insert_stmt756  */
static  ANTLR3_BITWORD FOLLOW_INSERT_in_insert_stmt756_bits[]   = { ANTLR3_UINT64_LIT(0x0008000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_INSERT_in_insert_stmt756  = { FOLLOW_INSERT_in_insert_stmt756_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INTO_in_insert_stmt758  */
static  ANTLR3_BITWORD FOLLOW_INTO_in_insert_stmt758_bits[] = { ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_INTO_in_insert_stmt758  = { FOLLOW_INTO_in_insert_stmt758_bits, 2   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_collection_section_in_insert_stmt762  */
static  ANTLR3_BITWORD FOLLOW_collection_section_in_insert_stmt762_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040C00000) };
static  ANTLR3_BITSET_LIST FOLLOW_collection_section_in_insert_stmt762  = { FOLLOW_collection_section_in_insert_stmt762_bits, 2 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_insert_columns_section_in_insert_stmt767  */
static  ANTLR3_BITWORD FOLLOW_insert_columns_section_in_insert_stmt767_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000C00000) };
static  ANTLR3_BITSET_LIST FOLLOW_insert_columns_section_in_insert_stmt767  = { FOLLOW_insert_columns_section_in_insert_stmt767_bits, 2 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_insert_values_section_in_insert_stmt773  */
static  ANTLR3_BITWORD FOLLOW_insert_values_section_in_insert_stmt773_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_insert_values_section_in_insert_stmt773   = { FOLLOW_insert_values_section_in_insert_stmt773_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_94_in_insert_columns_section797  */
static  ANTLR3_BITWORD FOLLOW_94_in_insert_columns_section797_bits[]  = { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000A40014000) };
static  ANTLR3_BITSET_LIST FOLLOW_94_in_insert_columns_section797   = { FOLLOW_94_in_insert_columns_section797_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_column_section_in_insert_columns_section799  */
static  ANTLR3_BITWORD FOLLOW_column_section_in_insert_columns_section799_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000040000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_column_section_in_insert_columns_section799   = { FOLLOW_column_section_in_insert_columns_section799_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_insert_columns_section803  */
static  ANTLR3_BITWORD FOLLOW_COMMA_in_insert_columns_section803_bits[] = { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000A40014000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_insert_columns_section803  = { FOLLOW_COMMA_in_insert_columns_section803_bits, 2   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_column_section_in_insert_columns_section805  */
static  ANTLR3_BITWORD FOLLOW_column_section_in_insert_columns_section805_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000040000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_column_section_in_insert_columns_section805   = { FOLLOW_column_section_in_insert_columns_section805_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_95_in_insert_columns_section810  */
static  ANTLR3_BITWORD FOLLOW_95_in_insert_columns_section810_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_95_in_insert_columns_section810   = { FOLLOW_95_in_insert_columns_section810_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VALUE_in_insert_values_section833  */
static  ANTLR3_BITWORD FOLLOW_VALUE_in_insert_values_section833_bits[]  = { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000A40014000) };
static  ANTLR3_BITSET_LIST FOLLOW_VALUE_in_insert_values_section833 = { FOLLOW_VALUE_in_insert_values_section833_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_insert_values_section835  */
static  ANTLR3_BITWORD FOLLOW_expression_in_insert_values_section835_bits[] = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_insert_values_section835  = { FOLLOW_expression_in_insert_values_section835_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VALUES_in_insert_values_section843  */
static  ANTLR3_BITWORD FOLLOW_VALUES_in_insert_values_section843_bits[] = { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000A40014000) };
static  ANTLR3_BITSET_LIST FOLLOW_VALUES_in_insert_values_section843  = { FOLLOW_VALUES_in_insert_values_section843_bits, 2   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_insert_values_section845  */
static  ANTLR3_BITWORD FOLLOW_expression_in_insert_values_section845_bits[] = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_insert_values_section845  = { FOLLOW_expression_in_insert_values_section845_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sync_operator_in_update_stmt873  */
static  ANTLR3_BITWORD FOLLOW_sync_operator_in_update_stmt873_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_sync_operator_in_update_stmt873   = { FOLLOW_sync_operator_in_update_stmt873_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_UPDATE_in_update_stmt877  */
static  ANTLR3_BITWORD FOLLOW_UPDATE_in_update_stmt877_bits[]   = { ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_UPDATE_in_update_stmt877  = { FOLLOW_UPDATE_in_update_stmt877_bits, 2 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_collection_section_in_update_stmt881  */
static  ANTLR3_BITWORD FOLLOW_collection_section_in_update_stmt881_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_collection_section_in_update_stmt881  = { FOLLOW_collection_section_in_update_stmt881_bits, 2 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SET_in_update_stmt883  */
static  ANTLR3_BITWORD FOLLOW_SET_in_update_stmt883_bits[]  = { ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_SET_in_update_stmt883 = { FOLLOW_SET_in_update_stmt883_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_property_section_in_update_stmt885  */
static  ANTLR3_BITWORD FOLLOW_property_section_in_update_stmt885_bits[] = { ANTLR3_UINT64_LIT(0x0000000000040002), ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_property_section_in_update_stmt885  = { FOLLOW_property_section_in_update_stmt885_bits, 2   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_update_stmt889  */
static  ANTLR3_BITWORD FOLLOW_COMMA_in_update_stmt889_bits[]  = { ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_update_stmt889   = { FOLLOW_COMMA_in_update_stmt889_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_property_section_in_update_stmt891  */
static  ANTLR3_BITWORD FOLLOW_property_section_in_update_stmt891_bits[] = { ANTLR3_UINT64_LIT(0x0000000000040002), ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_property_section_in_update_stmt891  = { FOLLOW_property_section_in_update_stmt891_bits, 2   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_where_section_in_update_stmt901  */
static  ANTLR3_BITWORD FOLLOW_where_section_in_update_stmt901_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_where_section_in_update_stmt901   = { FOLLOW_where_section_in_update_stmt901_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_property_in_property_section926  */
static  ANTLR3_BITWORD FOLLOW_property_in_property_section926_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_property_in_property_section926   = { FOLLOW_property_in_property_section926_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SINGLE_EQ_in_property_section928  */
static  ANTLR3_BITWORD FOLLOW_SINGLE_EQ_in_property_section928_bits[]   = { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000000014000) };
static  ANTLR3_BITSET_LIST FOLLOW_SINGLE_EQ_in_property_section928  = { FOLLOW_SINGLE_EQ_in_property_section928_bits, 2 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_literal_in_property_section932  */
static  ANTLR3_BITWORD FOLLOW_expression_literal_in_property_section932_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_literal_in_property_section932 = { FOLLOW_expression_literal_in_property_section932_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sync_operator_in_delete_stmt961  */
static  ANTLR3_BITWORD FOLLOW_sync_operator_in_delete_stmt961_bits[]  = { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_sync_operator_in_delete_stmt961   = { FOLLOW_sync_operator_in_delete_stmt961_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DELETE_in_delete_stmt965  */
static  ANTLR3_BITWORD FOLLOW_DELETE_in_delete_stmt965_bits[]   = { ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_DELETE_in_delete_stmt965  = { FOLLOW_DELETE_in_delete_stmt965_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FROM_in_delete_stmt967  */
static  ANTLR3_BITWORD FOLLOW_FROM_in_delete_stmt967_bits[] = { ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_FROM_in_delete_stmt967  = { FOLLOW_FROM_in_delete_stmt967_bits, 2   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_collection_section_in_delete_stmt971  */
static  ANTLR3_BITWORD FOLLOW_collection_section_in_delete_stmt971_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_collection_section_in_delete_stmt971  = { FOLLOW_collection_section_in_delete_stmt971_bits, 2 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_where_section_in_delete_stmt978  */
static  ANTLR3_BITWORD FOLLOW_where_section_in_delete_stmt978_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_where_section_in_delete_stmt978   = { FOLLOW_where_section_in_delete_stmt978_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_list_in_expression1007  */
static  ANTLR3_BITWORD FOLLOW_expression_list_in_expression1007_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_list_in_expression1007 = { FOLLOW_expression_list_in_expression1007_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_literal_in_expression_list1026  */
static  ANTLR3_BITWORD FOLLOW_expression_literal_in_expression_list1026_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_literal_in_expression_list1026 = { FOLLOW_expression_literal_in_expression_list1026_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_function_in_expression_list1035  */
static  ANTLR3_BITWORD FOLLOW_expression_function_in_expression_list1035_bits[] = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_function_in_expression_list1035  = { FOLLOW_expression_function_in_expression_list1035_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_binary_operator_in_expression_list1042  */
static  ANTLR3_BITWORD FOLLOW_expression_binary_operator_in_expression_list1042_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000082), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_binary_operator_in_expression_list1042 = { FOLLOW_expression_binary_operator_in_expression_list1042_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_logic_operator_in_expression_list1046  */
static  ANTLR3_BITWORD FOLLOW_expression_logic_operator_in_expression_list1046_bits[]   = { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000000014000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_logic_operator_in_expression_list1046  = { FOLLOW_expression_logic_operator_in_expression_list1046_bits, 2 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_binary_operator_in_expression_list1049  */
static  ANTLR3_BITWORD FOLLOW_expression_binary_operator_in_expression_list1049_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000082), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_binary_operator_in_expression_list1049 = { FOLLOW_expression_binary_operator_in_expression_list1049_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_94_in_expression_list1059  */
static  ANTLR3_BITWORD FOLLOW_94_in_expression_list1059_bits[]  = { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000000014000) };
static  ANTLR3_BITSET_LIST FOLLOW_94_in_expression_list1059 = { FOLLOW_94_in_expression_list1059_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_array_in_expression_list1061  */
static  ANTLR3_BITWORD FOLLOW_expression_array_in_expression_list1061_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000040000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_array_in_expression_list1061   = { FOLLOW_expression_array_in_expression_list1061_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_expression_list1065  */
static  ANTLR3_BITWORD FOLLOW_COMMA_in_expression_list1065_bits[]   = { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000000014000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_expression_list1065  = { FOLLOW_COMMA_in_expression_list1065_bits, 2 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_array_in_expression_list1067  */
static  ANTLR3_BITWORD FOLLOW_expression_array_in_expression_list1067_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000040000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_array_in_expression_list1067   = { FOLLOW_expression_array_in_expression_list1067_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_95_in_expression_list1073  */
static  ANTLR3_BITWORD FOLLOW_95_in_expression_list1073_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_95_in_expression_list1073 = { FOLLOW_95_in_expression_list1073_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_99_in_expression_list1078  */
static  ANTLR3_BITWORD FOLLOW_99_in_expression_list1078_bits[]  = { ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_99_in_expression_list1078 = { FOLLOW_99_in_expression_list1078_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_dictionary_in_expression_list1081  */
static  ANTLR3_BITWORD FOLLOW_expression_dictionary_in_expression_list1081_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000040000), ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_dictionary_in_expression_list1081  = { FOLLOW_expression_dictionary_in_expression_list1081_bits, 2 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_expression_list1086  */
static  ANTLR3_BITWORD FOLLOW_COMMA_in_expression_list1086_bits[]   = { ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_expression_list1086  = { FOLLOW_COMMA_in_expression_list1086_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_dictionary_in_expression_list1088  */
static  ANTLR3_BITWORD FOLLOW_expression_dictionary_in_expression_list1088_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000040000), ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_dictionary_in_expression_list1088  = { FOLLOW_expression_dictionary_in_expression_list1088_bits, 2 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_100_in_expression_list1093  */
static  ANTLR3_BITWORD FOLLOW_100_in_expression_list1093_bits[] = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_100_in_expression_list1093  = { FOLLOW_100_in_expression_list1093_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_97_in_expression_list1098  */
static  ANTLR3_BITWORD FOLLOW_97_in_expression_list1098_bits[]  = { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000000014000) };
static  ANTLR3_BITSET_LIST FOLLOW_97_in_expression_list1098 = { FOLLOW_97_in_expression_list1098_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_array_in_expression_list1100  */
static  ANTLR3_BITWORD FOLLOW_expression_array_in_expression_list1100_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000040000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_array_in_expression_list1100   = { FOLLOW_expression_array_in_expression_list1100_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_expression_list1104  */
static  ANTLR3_BITWORD FOLLOW_COMMA_in_expression_list1104_bits[]   = { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000000014000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_expression_list1104  = { FOLLOW_COMMA_in_expression_list1104_bits, 2 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_array_in_expression_list1106  */
static  ANTLR3_BITWORD FOLLOW_expression_array_in_expression_list1106_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000040000), ANTLR3_UINT64_LIT(0x0000000400000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_array_in_expression_list1106   = { FOLLOW_expression_array_in_expression_list1106_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_98_in_expression_list1112  */
static  ANTLR3_BITWORD FOLLOW_98_in_expression_list1112_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_98_in_expression_list1112 = { FOLLOW_98_in_expression_list1112_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_literal_value_in_expression_literal1134  */
static  ANTLR3_BITWORD FOLLOW_expression_literal_value_in_expression_literal1134_bits[] = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_literal_value_in_expression_literal1134  = { FOLLOW_expression_literal_value_in_expression_literal1134_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_property_literal_in_expression_literal_value1150  */
static  ANTLR3_BITWORD FOLLOW_property_literal_in_expression_literal_value1150_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_property_literal_in_expression_literal_value1150  = { FOLLOW_property_literal_in_expression_literal_value1150_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_integer_literal_in_expression_literal_value1157  */
static  ANTLR3_BITWORD FOLLOW_integer_literal_in_expression_literal_value1157_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_integer_literal_in_expression_literal_value1157   = { FOLLOW_integer_literal_in_expression_literal_value1157_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_real_literal_in_expression_literal_value1164  */
static  ANTLR3_BITWORD FOLLOW_real_literal_in_expression_literal_value1164_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_real_literal_in_expression_literal_value1164  = { FOLLOW_real_literal_in_expression_literal_value1164_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_string_literal_in_expression_literal_value1171  */
static  ANTLR3_BITWORD FOLLOW_string_literal_in_expression_literal_value1171_bits[] = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_string_literal_in_expression_literal_value1171  = { FOLLOW_string_literal_in_expression_literal_value1171_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_true_literal_in_expression_literal_value1178  */
static  ANTLR3_BITWORD FOLLOW_true_literal_in_expression_literal_value1178_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_true_literal_in_expression_literal_value1178  = { FOLLOW_true_literal_in_expression_literal_value1178_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_false_literal_in_expression_literal_value1185  */
static  ANTLR3_BITWORD FOLLOW_false_literal_in_expression_literal_value1185_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_false_literal_in_expression_literal_value1185 = { FOLLOW_false_literal_in_expression_literal_value1185_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NIL_in_expression_literal_value1192  */
static  ANTLR3_BITWORD FOLLOW_NIL_in_expression_literal_value1192_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NIL_in_expression_literal_value1192   = { FOLLOW_NIL_in_expression_literal_value1192_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CURRENT_TIME_in_expression_literal_value1199  */
static  ANTLR3_BITWORD FOLLOW_CURRENT_TIME_in_expression_literal_value1199_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_CURRENT_TIME_in_expression_literal_value1199  = { FOLLOW_CURRENT_TIME_in_expression_literal_value1199_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CURRENT_DATE_in_expression_literal_value1206  */
static  ANTLR3_BITWORD FOLLOW_CURRENT_DATE_in_expression_literal_value1206_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_CURRENT_DATE_in_expression_literal_value1206  = { FOLLOW_CURRENT_DATE_in_expression_literal_value1206_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CURRENT_TIMESTAMP_in_expression_literal_value1213  */
static  ANTLR3_BITWORD FOLLOW_CURRENT_TIMESTAMP_in_expression_literal_value1213_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_CURRENT_TIMESTAMP_in_expression_literal_value1213 = { FOLLOW_CURRENT_TIMESTAMP_in_expression_literal_value1213_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_expression_dictionary1228  */
static  ANTLR3_BITWORD FOLLOW_name_in_expression_dictionary1228_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_expression_dictionary1228 = { FOLLOW_name_in_expression_dictionary1228_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_96_in_expression_dictionary1230  */
static  ANTLR3_BITWORD FOLLOW_96_in_expression_dictionary1230_bits[]  = { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000000014000) };
static  ANTLR3_BITSET_LIST FOLLOW_96_in_expression_dictionary1230   = { FOLLOW_96_in_expression_dictionary1230_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_literal_in_expression_dictionary1234  */
static  ANTLR3_BITWORD FOLLOW_expression_literal_in_expression_dictionary1234_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_literal_in_expression_dictionary1234   = { FOLLOW_expression_literal_in_expression_dictionary1234_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_dictionary_literal1249  */
static  ANTLR3_BITWORD FOLLOW_name_in_dictionary_literal1249_bits[] = { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_dictionary_literal1249  = { FOLLOW_name_in_dictionary_literal1249_bits, 2   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_96_in_dictionary_literal1251  */
static  ANTLR3_BITWORD FOLLOW_96_in_dictionary_literal1251_bits[]   = { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000000014000) };
static  ANTLR3_BITSET_LIST FOLLOW_96_in_dictionary_literal1251  = { FOLLOW_96_in_dictionary_literal1251_bits, 2 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_literal_in_dictionary_literal1255  */
static  ANTLR3_BITWORD FOLLOW_expression_literal_in_dictionary_literal1255_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_literal_in_dictionary_literal1255  = { FOLLOW_expression_literal_in_dictionary_literal1255_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_literal_in_expression_array1272  */
static  ANTLR3_BITWORD FOLLOW_expression_literal_in_expression_array1272_bits[] = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_literal_in_expression_array1272  = { FOLLOW_expression_literal_in_expression_array1272_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_literal_in_array_literal1289  */
static  ANTLR3_BITWORD FOLLOW_expression_literal_in_array_literal1289_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_literal_in_array_literal1289   = { FOLLOW_expression_literal_in_array_literal1289_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logical_operator_in_expression_logic_operator1305  */
static  ANTLR3_BITWORD FOLLOW_logical_operator_in_expression_logic_operator1305_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logical_operator_in_expression_logic_operator1305 = { FOLLOW_logical_operator_in_expression_logic_operator1305_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_operator_in_expression_binary_operator1322  */
static  ANTLR3_BITWORD FOLLOW_expression_operator_in_expression_binary_operator1322_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_operator_in_expression_binary_operator1322 = { FOLLOW_expression_operator_in_expression_binary_operator1322_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_expression_function1346  */
static  ANTLR3_BITWORD FOLLOW_ID_in_expression_function1346_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_expression_function1346 = { FOLLOW_ID_in_expression_function1346_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_94_in_expression_function1348  */
static  ANTLR3_BITWORD FOLLOW_94_in_expression_function1348_bits[]  = { ANTLR3_UINT64_LIT(0x5000802800700400), ANTLR3_UINT64_LIT(0x0000000AC0014000) };
static  ANTLR3_BITSET_LIST FOLLOW_94_in_expression_function1348 = { FOLLOW_94_in_expression_function1348_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_value_in_expression_function1351  */
static  ANTLR3_BITWORD FOLLOW_function_value_in_expression_function1351_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_function_value_in_expression_function1351 = { FOLLOW_function_value_in_expression_function1351_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_95_in_expression_function1356  */
static  ANTLR3_BITWORD FOLLOW_95_in_expression_function1356_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_95_in_expression_function1356 = { FOLLOW_95_in_expression_function1356_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_function_name1379  */
static  ANTLR3_BITWORD FOLLOW_ID_in_function_name1379_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_function_name1379   = { FOLLOW_ID_in_function_name1379_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_function_value1394  */
static  ANTLR3_BITWORD FOLLOW_expression_in_function_value1394_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_function_value1394  = { FOLLOW_expression_in_function_value1394_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_function_value1398  */
static  ANTLR3_BITWORD FOLLOW_COMMA_in_function_value1398_bits[]  = { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000A40014000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_function_value1398   = { FOLLOW_COMMA_in_function_value1398_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_function_value1400  */
static  ANTLR3_BITWORD FOLLOW_expression_in_function_value1400_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_function_value1400  = { FOLLOW_expression_in_function_value1400_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASTERISK_in_function_value1408  */
static  ANTLR3_BITWORD FOLLOW_ASTERISK_in_function_value1408_bits[] = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ASTERISK_in_function_value1408  = { FOLLOW_ASTERISK_in_function_value1408_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_literal_in_expression_operator1427  */
static  ANTLR3_BITWORD FOLLOW_expression_literal_in_expression_operator1427_bits[]  = { ANTLR3_UINT64_LIT(0x2100050008000000), ANTLR3_UINT64_LIT(0x0000000000002008) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_literal_in_expression_operator1427 = { FOLLOW_expression_literal_in_expression_operator1427_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_binary_operator_in_expression_operator1431  */
static  ANTLR3_BITWORD FOLLOW_binary_operator_in_expression_operator1431_bits[] = { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000000014000) };
static  ANTLR3_BITSET_LIST FOLLOW_binary_operator_in_expression_operator1431  = { FOLLOW_binary_operator_in_expression_operator1431_bits, 2   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_literal_in_expression_operator1435  */
static  ANTLR3_BITWORD FOLLOW_expression_literal_in_expression_operator1435_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_literal_in_expression_operator1435 = { FOLLOW_expression_literal_in_expression_operator1435_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SINGLE_EQ_in_binary_operator1458  */
static  ANTLR3_BITWORD FOLLOW_SINGLE_EQ_in_binary_operator1458_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SINGLE_EQ_in_binary_operator1458  = { FOLLOW_SINGLE_EQ_in_binary_operator1458_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOUBLE_EQ_in_binary_operator1465  */
static  ANTLR3_BITWORD FOLLOW_DOUBLE_EQ_in_binary_operator1465_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_DOUBLE_EQ_in_binary_operator1465  = { FOLLOW_DOUBLE_EQ_in_binary_operator1465_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OP_LT_in_binary_operator1472  */
static  ANTLR3_BITWORD FOLLOW_OP_LT_in_binary_operator1472_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OP_LT_in_binary_operator1472  = { FOLLOW_OP_LT_in_binary_operator1472_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LE_in_binary_operator1479  */
static  ANTLR3_BITWORD FOLLOW_LE_in_binary_operator1479_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LE_in_binary_operator1479 = { FOLLOW_LE_in_binary_operator1479_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GT_in_binary_operator1486  */
static  ANTLR3_BITWORD FOLLOW_GT_in_binary_operator1486_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GT_in_binary_operator1486 = { FOLLOW_GT_in_binary_operator1486_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GE_in_binary_operator1493  */
static  ANTLR3_BITWORD FOLLOW_GE_in_binary_operator1493_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GE_in_binary_operator1493 = { FOLLOW_GE_in_binary_operator1493_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOTEQ_in_binary_operator1500  */
static  ANTLR3_BITWORD FOLLOW_NOTEQ_in_binary_operator1500_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NOTEQ_in_binary_operator1500  = { FOLLOW_NOTEQ_in_binary_operator1500_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AND_in_logical_operator1523  */
static  ANTLR3_BITWORD FOLLOW_AND_in_logical_operator1523_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_AND_in_logical_operator1523   = { FOLLOW_AND_in_logical_operator1523_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OR_in_logical_operator1530  */
static  ANTLR3_BITWORD FOLLOW_OR_in_logical_operator1530_bits[] = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OR_in_logical_operator1530  = { FOLLOW_OR_in_logical_operator1530_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_property_literal1543  */
static  ANTLR3_BITWORD FOLLOW_ID_in_property_literal1543_bits[] = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_property_literal1543  = { FOLLOW_ID_in_property_literal1543_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_integer_literal1555  */
static  ANTLR3_BITWORD FOLLOW_NUMBER_in_integer_literal1555_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_integer_literal1555 = { FOLLOW_NUMBER_in_integer_literal1555_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOAT_in_real_literal1566  */
static  ANTLR3_BITWORD FOLLOW_FLOAT_in_real_literal1566_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOAT_in_real_literal1566 = { FOLLOW_FLOAT_in_real_literal1566_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_string_literal1577  */
static  ANTLR3_BITWORD FOLLOW_STRING_in_string_literal1577_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_string_literal1577  = { FOLLOW_STRING_in_string_literal1577_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_T_in_true_literal1588  */
static  ANTLR3_BITWORD FOLLOW_T_in_true_literal1588_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_T_in_true_literal1588 = { FOLLOW_T_in_true_literal1588_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_R_in_true_literal1590  */
static  ANTLR3_BITWORD FOLLOW_R_in_true_literal1590_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_R_in_true_literal1590 = { FOLLOW_R_in_true_literal1590_bits, 2  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_U_in_true_literal1592  */
static  ANTLR3_BITWORD FOLLOW_U_in_true_literal1592_bits[]  = { ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_U_in_true_literal1592 = { FOLLOW_U_in_true_literal1592_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_E_in_true_literal1594  */
static  ANTLR3_BITWORD FOLLOW_E_in_true_literal1594_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_E_in_true_literal1594 = { FOLLOW_E_in_true_literal1594_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_F_in_false_literal1606  */
static  ANTLR3_BITWORD FOLLOW_F_in_false_literal1606_bits[] = { ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_F_in_false_literal1606  = { FOLLOW_F_in_false_literal1606_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_A_in_false_literal1608  */
static  ANTLR3_BITWORD FOLLOW_A_in_false_literal1608_bits[] = { ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_A_in_false_literal1608  = { FOLLOW_A_in_false_literal1608_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_L_in_false_literal1610  */
static  ANTLR3_BITWORD FOLLOW_L_in_false_literal1610_bits[] = { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_L_in_false_literal1610  = { FOLLOW_L_in_false_literal1610_bits, 2   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_S_in_false_literal1612  */
static  ANTLR3_BITWORD FOLLOW_S_in_false_literal1612_bits[] = { ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_S_in_false_literal1612  = { FOLLOW_S_in_false_literal1612_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_E_in_false_literal1614  */
static  ANTLR3_BITWORD FOLLOW_E_in_false_literal1614_bits[] = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_E_in_false_literal1614  = { FOLLOW_E_in_false_literal1614_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SYNC_in_sync_operator1632  */
static  ANTLR3_BITWORD FOLLOW_SYNC_in_sync_operator1632_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SYNC_in_sync_operator1632 = { FOLLOW_SYNC_in_sync_operator1632_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASYNC_in_sync_operator1639  */
static  ANTLR3_BITWORD FOLLOW_ASYNC_in_sync_operator1639_bits[] = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ASYNC_in_sync_operator1639  = { FOLLOW_ASYNC_in_sync_operator1639_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_UNION_in_compound_operator1652  */
static  ANTLR3_BITWORD FOLLOW_UNION_in_compound_operator1652_bits[] = { ANTLR3_UINT64_LIT(0x0000000000000022) };
static  ANTLR3_BITSET_LIST FOLLOW_UNION_in_compound_operator1652  = { FOLLOW_UNION_in_compound_operator1652_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ALL_in_compound_operator1655  */
static  ANTLR3_BITWORD FOLLOW_ALL_in_compound_operator1655_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ALL_in_compound_operator1655  = { FOLLOW_ALL_in_compound_operator1655_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INTERSECT_in_compound_operator1662  */
static  ANTLR3_BITWORD FOLLOW_INTERSECT_in_compound_operator1662_bits[] = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_INTERSECT_in_compound_operator1662  = { FOLLOW_INTERSECT_in_compound_operator1662_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXCEPT_in_compound_operator1667  */
static  ANTLR3_BITWORD FOLLOW_EXCEPT_in_compound_operator1667_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EXCEPT_in_compound_operator1667   = { FOLLOW_EXCEPT_in_compound_operator1667_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_property1719  */
static  ANTLR3_BITWORD FOLLOW_ID_in_property1719_bits[] = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_property1719  = { FOLLOW_ID_in_property1719_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_value1733  */
static  ANTLR3_BITWORD FOLLOW_ID_in_value1733_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_value1733   = { FOLLOW_ID_in_value1733_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_name1745  */
static  ANTLR3_BITWORD FOLLOW_ID_in_name1745_bits[] = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_name1745  = { FOLLOW_ID_in_name1745_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_collection_name_in_collection_section1766  */
static  ANTLR3_BITWORD FOLLOW_collection_name_in_collection_section1766_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_collection_name_in_collection_section1766 = { FOLLOW_collection_name_in_collection_section1766_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_collection_name1779  */
static  ANTLR3_BITWORD FOLLOW_ID_in_collection_name1779_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_collection_name1779 = { FOLLOW_ID_in_collection_name1779_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_string_literal_in_collection_name1784  */
static  ANTLR3_BITWORD FOLLOW_string_literal_in_collection_name1784_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_string_literal_in_collection_name1784 = { FOLLOW_string_literal_in_collection_name1784_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_column_section1799  */
static  ANTLR3_BITWORD FOLLOW_expression_in_column_section1799_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000102) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_column_section1799  = { FOLLOW_expression_in_column_section1799_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AS_in_column_section1804  */
static  ANTLR3_BITWORD FOLLOW_AS_in_column_section1804_bits[]   = { ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_AS_in_column_section1804  = { FOLLOW_AS_in_column_section1804_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_column_section1806  */
static  ANTLR3_BITWORD FOLLOW_name_in_column_section1806_bits[] = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_column_section1806  = { FOLLOW_name_in_column_section1806_bits, 1   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_index_name_in_index_section1832  */
static  ANTLR3_BITWORD FOLLOW_index_name_in_index_section1832_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_index_name_in_index_section1832   = { FOLLOW_index_name_in_index_section1832_bits, 1  };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_index_name1845  */
static  ANTLR3_BITWORD FOLLOW_ID_in_index_name1845_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_index_name1845  = { FOLLOW_ID_in_index_name1845_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_string_literal_in_index_name1850  */
static  ANTLR3_BITWORD FOLLOW_string_literal_in_index_name1850_bits[]   = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_string_literal_in_index_name1850  = { FOLLOW_string_literal_in_index_name1850_bits, 1 };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WHERE_in_where_section1871  */
static  ANTLR3_BITWORD FOLLOW_WHERE_in_where_section1871_bits[] = { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000A40014000) };
static  ANTLR3_BITSET_LIST FOLLOW_WHERE_in_where_section1871  = { FOLLOW_WHERE_in_where_section1871_bits, 2   };
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_where_section1873  */
static  ANTLR3_BITWORD FOLLOW_expression_in_where_section1873_bits[]  = { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_where_section1873   = { FOLLOW_expression_in_where_section1873_bits, 1  };


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start statement_list
 * SQL.g:54:1: statement_list[uSQL::SQLParser *sqlParser] : statement[sqlParser] ( SEMICOLON statement[sqlParser] )* ;
 */
static void
statement_list(pSQLParser ctx, uSQL::SQLParser *sqlParser)
{
  /* Initialize rule variables
   */

  {
    // SQL.g:55:2: ( statement[sqlParser] ( SEMICOLON statement[sqlParser] )* )
    // SQL.g:55:4: statement[sqlParser] ( SEMICOLON statement[sqlParser] )*
    {
      FOLLOWPUSH(FOLLOW_statement_in_statement_list73);
      statement(ctx, sqlParser);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto rulestatement_listEx;
      }


      // SQL.g:55:25: ( SEMICOLON statement[sqlParser] )*

      for (;;)
      {
        int alt1=2;
        switch ( LA(1) )
        {
        case SEMICOLON:
          {
            alt1=1;
          }
          break;

        }

        switch (alt1)
        {
        case 1:
          // SQL.g:55:26: SEMICOLON statement[sqlParser]
          {
             MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_statement_list77);
            if  (HASEXCEPTION())
            {
              goto rulestatement_listEx;
            }


            FOLLOWPUSH(FOLLOW_statement_in_statement_list79);
            statement(ctx, sqlParser);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
              goto rulestatement_listEx;
            }


          }
          break;

        default:
          goto loop1; /* break out of the loop */
          break;
        }
      }
      loop1: ; /* Jump out to here if this rule does not match */


    }

  }

  // This is where rules clean up and exit
  //
  goto rulestatement_listEx; /* Prevent compiler warnings */
  rulestatement_listEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return ;
}
/* $ANTLR end statement_list */

/**
 * $ANTLR start statement
 * SQL.g:58:1: statement[uSQL::SQLParser *sqlParser] : ( select_stmt[stmt] | create_collection_stmt[stmt] | drop_collection_stmt[stmt] | create_index_stmt[stmt] | drop_index_stmt[stmt] | insert_stmt[stmt] | update_stmt[stmt] | delete_stmt[stmt] );
 */
static void
statement(pSQLParser ctx, uSQL::SQLParser *sqlParser)
{
  /* Initialize rule variables
   */


      uSQL::SQLStatement *stmt = new uSQL::SQLStatement();
      sqlParser->addStatement(stmt);
    
  {
    {
      //  SQL.g:63:2: ( select_stmt[stmt] | create_collection_stmt[stmt] | drop_collection_stmt[stmt] | create_index_stmt[stmt] | drop_index_stmt[stmt] | insert_stmt[stmt] | update_stmt[stmt] | delete_stmt[stmt] )

      ANTLR3_UINT32 alt2;

      alt2=8;

      switch ( LA(1) )
      {
      case SELECT:
        {
          alt2=1;
        }
        break;
      case CREATE:
        {
          switch ( LA(2) )
          {
          case COLLECTION:
            {
              alt2=2;
            }
            break;
          case COLLECTION_INDEX:
            {
              alt2=4;
            }
            break;

          default:
            CONSTRUCTEX();
            EXCEPTION->type     = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message    = (void *)"";
            EXCEPTION->decisionNum  = 2;
            EXCEPTION->state    = 2;


            goto rulestatementEx;

          }

        }
        break;
      case DROP:
        {
          switch ( LA(2) )
          {
          case COLLECTION:
            {
              alt2=3;
            }
            break;
          case COLLECTION_INDEX:
            {
              alt2=5;
            }
            break;

          default:
            CONSTRUCTEX();
            EXCEPTION->type     = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message    = (void *)"";
            EXCEPTION->decisionNum  = 2;
            EXCEPTION->state    = 3;


            goto rulestatementEx;

          }

        }
        break;
      case SYNC:
        {
          switch ( LA(2) )
          {
          case INSERT:
            {
              alt2=6;
            }
            break;
          case UPDATE:
            {
              alt2=7;
            }
            break;
          case DELETE:
            {
              alt2=8;
            }
            break;

          default:
            CONSTRUCTEX();
            EXCEPTION->type     = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message    = (void *)"";
            EXCEPTION->decisionNum  = 2;
            EXCEPTION->state    = 4;


            goto rulestatementEx;

          }

        }
        break;
      case ASYNC:
        {
          switch ( LA(2) )
          {
          case INSERT:
            {
              alt2=6;
            }
            break;
          case UPDATE:
            {
              alt2=7;
            }
            break;
          case DELETE:
            {
              alt2=8;
            }
            break;

          default:
            CONSTRUCTEX();
            EXCEPTION->type     = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message    = (void *)"";
            EXCEPTION->decisionNum  = 2;
            EXCEPTION->state    = 5;


            goto rulestatementEx;

          }

        }
        break;
      case INSERT:
        {
          alt2=6;
        }
        break;
      case UPDATE:
        {
          alt2=7;
        }
        break;
      case DELETE:
        {
          alt2=8;
        }
        break;

      default:
        CONSTRUCTEX();
        EXCEPTION->type     = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        EXCEPTION->message    = (void *)"";
        EXCEPTION->decisionNum  = 2;
        EXCEPTION->state    = 0;


        goto rulestatementEx;

      }

      switch (alt2)
      {
      case 1:
        // SQL.g:63:4: select_stmt[stmt]
        {
          FOLLOWPUSH(FOLLOW_select_stmt_in_statement102);
          select_stmt(ctx, stmt);

          FOLLOWPOP();
          if  (HASEXCEPTION())
          {
            goto rulestatementEx;
          }


        }
        break;
      case 2:
        // SQL.g:64:4: create_collection_stmt[stmt]
        {
          FOLLOWPUSH(FOLLOW_create_collection_stmt_in_statement108);
          create_collection_stmt(ctx, stmt);

          FOLLOWPOP();
          if  (HASEXCEPTION())
          {
            goto rulestatementEx;
          }


        }
        break;
      case 3:
        // SQL.g:65:4: drop_collection_stmt[stmt]
        {
          FOLLOWPUSH(FOLLOW_drop_collection_stmt_in_statement114);
          drop_collection_stmt(ctx, stmt);

          FOLLOWPOP();
          if  (HASEXCEPTION())
          {
            goto rulestatementEx;
          }


        }
        break;
      case 4:
        // SQL.g:66:4: create_index_stmt[stmt]
        {
          FOLLOWPUSH(FOLLOW_create_index_stmt_in_statement120);
          create_index_stmt(ctx, stmt);

          FOLLOWPOP();
          if  (HASEXCEPTION())
          {
            goto rulestatementEx;
          }


        }
        break;
      case 5:
        // SQL.g:67:4: drop_index_stmt[stmt]
        {
          FOLLOWPUSH(FOLLOW_drop_index_stmt_in_statement126);
          drop_index_stmt(ctx, stmt);

          FOLLOWPOP();
          if  (HASEXCEPTION())
          {
            goto rulestatementEx;
          }


        }
        break;
      case 6:
        // SQL.g:68:4: insert_stmt[stmt]
        {
          FOLLOWPUSH(FOLLOW_insert_stmt_in_statement132);
          insert_stmt(ctx, stmt);

          FOLLOWPOP();
          if  (HASEXCEPTION())
          {
            goto rulestatementEx;
          }


        }
        break;
      case 7:
        // SQL.g:69:4: update_stmt[stmt]
        {
          FOLLOWPUSH(FOLLOW_update_stmt_in_statement138);
          update_stmt(ctx, stmt);

          FOLLOWPOP();
          if  (HASEXCEPTION())
          {
            goto rulestatementEx;
          }


        }
        break;
      case 8:
        // SQL.g:70:4: delete_stmt[stmt]
        {
          FOLLOWPUSH(FOLLOW_delete_stmt_in_statement144);
          delete_stmt(ctx, stmt);

          FOLLOWPOP();
          if  (HASEXCEPTION())
          {
            goto rulestatementEx;
          }


        }
        break;

      }
    }
  }

  // This is where rules clean up and exit
  //
  goto rulestatementEx; /* Prevent compiler warnings */
  rulestatementEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return ;
}
/* $ANTLR end statement */

/**
 * $ANTLR start select_stmt
 * SQL.g:79:1: select_stmt[uSQL::SQLStatement *sqlStmt] : select_core[sqlStmt] (sortingSection= sorting_section )? (limitSection= limit_section )? (offsetSection= offset_section )? ;
 */
static void
select_stmt(pSQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
  uSQL::SQLOrderBy * sortingSection;
  #undef  RETURN_TYPE_sortingSection
  #define RETURN_TYPE_sortingSection uSQL::SQLOrderBy *

  uSQL::SQLLimit * limitSection;
  #undef  RETURN_TYPE_limitSection
  #define RETURN_TYPE_limitSection uSQL::SQLLimit *

  uSQL::SQLOffset * offsetSection;
  #undef  RETURN_TYPE_offsetSection
  #define RETURN_TYPE_offsetSection uSQL::SQLOffset *

  /* Initialize rule variables
   */


      // SELECT
      uSQL::SQLSelect *sqlSelect = new uSQL::SQLSelect();
      sqlStmt->addChildNode(sqlSelect);

      sortingSection = NULL;
      limitSection = NULL;
      offsetSection = NULL;
    
  {
    // SQL.g:89:2: ( select_core[sqlStmt] (sortingSection= sorting_section )? (limitSection= limit_section )? (offsetSection= offset_section )? )
    // SQL.g:89:4: select_core[sqlStmt] (sortingSection= sorting_section )? (limitSection= limit_section )? (offsetSection= offset_section )?
    {
      FOLLOWPUSH(FOLLOW_select_core_in_select_stmt168);
      select_core(ctx, sqlStmt);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto ruleselect_stmtEx;
      }


      // SQL.g:89:25: (sortingSection= sorting_section )?
      {
        int alt3=2;
        switch ( LA(1) )
        {
          case ORDER:
            {
              alt3=1;
            }
            break;
        }

        switch (alt3)
        {
        case 1:
          // SQL.g:89:26: sortingSection= sorting_section
          {
            FOLLOWPUSH(FOLLOW_sorting_section_in_select_stmt174);
            sortingSection=sorting_section(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
              goto ruleselect_stmtEx;
            }


          }
          break;

        }
      }

      // SQL.g:89:59: (limitSection= limit_section )?
      {
        int alt4=2;
        switch ( LA(1) )
        {
          case LIMIT:
            {
              alt4=1;
            }
            break;
        }

        switch (alt4)
        {
        case 1:
          // SQL.g:89:60: limitSection= limit_section
          {
            FOLLOWPUSH(FOLLOW_limit_section_in_select_stmt181);
            limitSection=limit_section(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
              goto ruleselect_stmtEx;
            }


          }
          break;

        }
      }

      // SQL.g:89:89: (offsetSection= offset_section )?
      {
        int alt5=2;
        switch ( LA(1) )
        {
          case CURRENT_DATE:
          case CURRENT_TIME:
          case CURRENT_TIMESTAMP:
          case F:
          case FLOAT:
          case ID:
          case NIL:
          case NUMBER:
          case STRING:
          case T:
            {
              alt5=1;
            }
            break;
        }

        switch (alt5)
        {
        case 1:
          // SQL.g:89:90: offsetSection= offset_section
          {
            FOLLOWPUSH(FOLLOW_offset_section_in_select_stmt188);
            offsetSection=offset_section(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
              goto ruleselect_stmtEx;
            }


          }
          break;

        }
      }

      {

            // ORDER BY   
            if (sortingSection)
              sqlStmt->addChildNode(sortingSection);
              
            // LIMIT    
            if (limitSection)
              sqlStmt->addChildNode(limitSection);

            // OFFSET
            if (offsetSection)
              sqlStmt->addChildNode(offsetSection);
          
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto ruleselect_stmtEx; /* Prevent compiler warnings */
  ruleselect_stmtEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return ;
}
/* $ANTLR end select_stmt */

/**
 * $ANTLR start select_core
 * SQL.g:105:1: select_core[uSQL::SQLStatement *sqlStmt] : SELECT ( DISTINCT | ALL )? (columnSection= result_column_section )? (fromSection= from_section ) (whereSection= where_section )? (groupSection= grouping_section )? (havingSection= having_section )? ;
 */
static void
select_core(pSQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
  uSQL::SQLColumns * columnSection;
  #undef  RETURN_TYPE_columnSection
  #define RETURN_TYPE_columnSection uSQL::SQLColumns *

  uSQL::SQLFrom * fromSection;
  #undef  RETURN_TYPE_fromSection
  #define RETURN_TYPE_fromSection uSQL::SQLFrom *

  uSQL::SQLWhere * whereSection;
  #undef  RETURN_TYPE_whereSection
  #define RETURN_TYPE_whereSection uSQL::SQLWhere *

  uSQL::SQLGroupBy * groupSection;
  #undef  RETURN_TYPE_groupSection
  #define RETURN_TYPE_groupSection uSQL::SQLGroupBy *

  uSQL::SQLHaving * havingSection;
  #undef  RETURN_TYPE_havingSection
  #define RETURN_TYPE_havingSection uSQL::SQLHaving *

  /* Initialize rule variables
   */


      columnSection = NULL;
      fromSection = NULL;
      whereSection = NULL;
      groupSection = NULL;
      havingSection = NULL;
    
  {
    // SQL.g:113:2: ( SELECT ( DISTINCT | ALL )? (columnSection= result_column_section )? (fromSection= from_section ) (whereSection= where_section )? (groupSection= grouping_section )? (havingSection= having_section )? )
    // SQL.g:113:4: SELECT ( DISTINCT | ALL )? (columnSection= result_column_section )? (fromSection= from_section ) (whereSection= where_section )? (groupSection= grouping_section )? (havingSection= having_section )?
    {
       MATCHT(SELECT, &FOLLOW_SELECT_in_select_core213);
      if  (HASEXCEPTION())
      {
        goto ruleselect_coreEx;
      }


      // SQL.g:113:11: ( DISTINCT | ALL )?
      {
        int alt6=2;
        switch ( LA(1) )
        {
          case ALL:
          case DISTINCT:
            {
              alt6=1;
            }
            break;
        }

        switch (alt6)
        {
        case 1:
          // SQL.g:
          {
            if ( LA(1) == ALL || LA(1) == DISTINCT )
            {
              CONSUME();
              PERRORRECOVERY=ANTLR3_FALSE;
            }
            else
            {
              CONSTRUCTEX();
              EXCEPTION->type     = ANTLR3_MISMATCHED_SET_EXCEPTION;
              EXCEPTION->name     = (void *)ANTLR3_MISMATCHED_SET_NAME;
              EXCEPTION->expectingSet = NULL;

              goto ruleselect_coreEx;
            }


          }
          break;

        }
      }

      // SQL.g:114:4: (columnSection= result_column_section )?
      {
        int alt7=2;
        switch ( LA(1) )
        {
          case ASTERISK:
          case CURRENT_DATE:
          case CURRENT_TIME:
          case CURRENT_TIMESTAMP:
          case F:
          case FLOAT:
          case ID:
          case NIL:
          case NUMBER:
          case STRING:
          case T:
          case 94:
          case 97:
          case 99:
            {
              alt7=1;
            }
            break;
        }

        switch (alt7)
        {
        case 1:
          // SQL.g:114:5: columnSection= result_column_section
          {
            FOLLOWPUSH(FOLLOW_result_column_section_in_select_core232);
            columnSection=result_column_section(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
              goto ruleselect_coreEx;
            }


          }
          break;

        }
      }

      // SQL.g:115:4: (fromSection= from_section )
      // SQL.g:115:5: fromSection= from_section
      {
        FOLLOWPUSH(FOLLOW_from_section_in_select_core244);
        fromSection=from_section(ctx);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
          goto ruleselect_coreEx;
        }


      }


      // SQL.g:116:4: (whereSection= where_section )?
      {
        int alt8=2;
        switch ( LA(1) )
        {
          case WHERE:
            {
              alt8=1;
            }
            break;
        }

        switch (alt8)
        {
        case 1:
          // SQL.g:116:5: whereSection= where_section
          {
            FOLLOWPUSH(FOLLOW_where_section_in_select_core255);
            whereSection=where_section(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
              goto ruleselect_coreEx;
            }


          }
          break;

        }
      }

      // SQL.g:117:4: (groupSection= grouping_section )?
      {
        int alt9=2;
        switch ( LA(1) )
        {
          case GROUP:
            {
              alt9=1;
            }
            break;
        }

        switch (alt9)
        {
        case 1:
          // SQL.g:117:5: groupSection= grouping_section
          {
            FOLLOWPUSH(FOLLOW_grouping_section_in_select_core267);
            groupSection=grouping_section(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
              goto ruleselect_coreEx;
            }


          }
          break;

        }
      }

      // SQL.g:118:4: (havingSection= having_section )?
      {
        int alt10=2;
        switch ( LA(1) )
        {
          case HAVING:
            {
              alt10=1;
            }
            break;
        }

        switch (alt10)
        {
        case 1:
          // SQL.g:118:5: havingSection= having_section
          {
            FOLLOWPUSH(FOLLOW_having_section_in_select_core280);
            havingSection=having_section(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
              goto ruleselect_coreEx;
            }


          }
          break;

        }
      }

      {

            
            if (columnSection) {
              if (columnSection->hasExpressions())
                sqlStmt->addChildNode(columnSection);
              else 
                delete columnSection;
            }
            // FROM
            if (fromSection)    
              sqlStmt->addChildNode(fromSection);
              
            // WHERE
            if (whereSection)     
              sqlStmt->addChildNode(whereSection);

            // GROUP BY
            if (groupSection)     
              sqlStmt->addChildNode(groupSection);

            // HAVING
            if (havingSection)    
              sqlStmt->addChildNode(havingSection);
            
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto ruleselect_coreEx; /* Prevent compiler warnings */
  ruleselect_coreEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return ;
}
/* $ANTLR end select_core */

/**
 * $ANTLR start result_column_section
 * SQL.g:145:1: result_column_section returns [uSQL::SQLColumns *sqlColumns] : ( ASTERISK | column_section[sqlColumns] ( ',' column_section[sqlColumns] )* );
 */
static uSQL::SQLColumns *
result_column_section(pSQLParser ctx)
{
  uSQL::SQLColumns * sqlColumns;


  /* Initialize rule variables
   */


      sqlColumns = new uSQL::SQLColumns();
    
  {
    {
      //  SQL.g:149:2: ( ASTERISK | column_section[sqlColumns] ( ',' column_section[sqlColumns] )* )

      ANTLR3_UINT32 alt12;

      alt12=2;

      switch ( LA(1) )
      {
      case ASTERISK:
        {
          alt12=1;
        }
        break;
      case CURRENT_DATE:
      case CURRENT_TIME:
      case CURRENT_TIMESTAMP:
      case F:
      case FLOAT:
      case ID:
      case NIL:
      case NUMBER:
      case STRING:
      case T:
      case 94:
      case 97:
      case 99:
        {
          alt12=2;
        }
        break;

      default:
        CONSTRUCTEX();
        EXCEPTION->type     = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        EXCEPTION->message    = (void *)"";
        EXCEPTION->decisionNum  = 12;
        EXCEPTION->state    = 0;


        goto ruleresult_column_sectionEx;

      }

      switch (alt12)
      {
      case 1:
        // SQL.g:149:4: ASTERISK
        {
           MATCHT(ASTERISK, &FOLLOW_ASTERISK_in_result_column_section309);
          if  (HASEXCEPTION())
          {
            goto ruleresult_column_sectionEx;
          }


          {

                uSQL::SQLAsterisk *sqlAsterisk = new uSQL::SQLAsterisk();
                sqlColumns->addExpression(sqlAsterisk);
                
          }


        }
        break;
      case 2:
        // SQL.g:153:4: column_section[sqlColumns] ( ',' column_section[sqlColumns] )*
        {
          FOLLOWPUSH(FOLLOW_column_section_in_result_column_section316);
          column_section(ctx, sqlColumns);

          FOLLOWPOP();
          if  (HASEXCEPTION())
          {
            goto ruleresult_column_sectionEx;
          }


          // SQL.g:153:31: ( ',' column_section[sqlColumns] )*

          for (;;)
          {
            int alt11=2;
            switch ( LA(1) )
            {
            case COMMA:
              {
                alt11=1;
              }
              break;

            }

            switch (alt11)
            {
            case 1:
              // SQL.g:153:32: ',' column_section[sqlColumns]
              {
                 MATCHT(COMMA, &FOLLOW_COMMA_in_result_column_section320);
                if  (HASEXCEPTION())
                {
                  goto ruleresult_column_sectionEx;
                }


                FOLLOWPUSH(FOLLOW_column_section_in_result_column_section322);
                column_section(ctx, sqlColumns);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                  goto ruleresult_column_sectionEx;
                }


              }
              break;

            default:
              goto loop11;  /* break out of the loop */
              break;
            }
          }
          loop11: ; /* Jump out to here if this rule does not match */


          {

                
          }


        }
        break;

      }
    }
  }

  // This is where rules clean up and exit
  //
  goto ruleresult_column_sectionEx; /* Prevent compiler warnings */
  ruleresult_column_sectionEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return sqlColumns;
}
/* $ANTLR end result_column_section */

/**
 * $ANTLR start from_section
 * SQL.g:157:1: from_section returns [uSQL::SQLFrom *sqlCollections] : ( FROM table_name[sqlCollections] ) ( COMMA table_name[sqlCollections] )* ;
 */
static uSQL::SQLFrom *
from_section(pSQLParser ctx)
{
  uSQL::SQLFrom * sqlCollections;


  /* Initialize rule variables
   */


      sqlCollections = new uSQL::SQLFrom();
    
  {
    // SQL.g:161:2: ( ( FROM table_name[sqlCollections] ) ( COMMA table_name[sqlCollections] )* )
    // SQL.g:161:4: ( FROM table_name[sqlCollections] ) ( COMMA table_name[sqlCollections] )*
    {
      // SQL.g:161:4: ( FROM table_name[sqlCollections] )
      // SQL.g:161:5: FROM table_name[sqlCollections]
      {
         MATCHT(FROM, &FOLLOW_FROM_in_from_section349);
        if  (HASEXCEPTION())
        {
          goto rulefrom_sectionEx;
        }


        FOLLOWPUSH(FOLLOW_table_name_in_from_section351);
        table_name(ctx, sqlCollections);

        FOLLOWPOP();
        if  (HASEXCEPTION())
        {
          goto rulefrom_sectionEx;
        }


      }


      // SQL.g:161:38: ( COMMA table_name[sqlCollections] )*

      for (;;)
      {
        int alt13=2;
        switch ( LA(1) )
        {
        case COMMA:
          {
            alt13=1;
          }
          break;

        }

        switch (alt13)
        {
        case 1:
          // SQL.g:161:39: COMMA table_name[sqlCollections]
          {
             MATCHT(COMMA, &FOLLOW_COMMA_in_from_section356);
            if  (HASEXCEPTION())
            {
              goto rulefrom_sectionEx;
            }


            FOLLOWPUSH(FOLLOW_table_name_in_from_section358);
            table_name(ctx, sqlCollections);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
              goto rulefrom_sectionEx;
            }


          }
          break;

        default:
          goto loop13;  /* break out of the loop */
          break;
        }
      }
      loop13: ; /* Jump out to here if this rule does not match */


    }

  }

  // This is where rules clean up and exit
  //
  goto rulefrom_sectionEx; /* Prevent compiler warnings */
  rulefrom_sectionEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return sqlCollections;
}
/* $ANTLR end from_section */

/**
 * $ANTLR start table_name
 * SQL.g:164:1: table_name[uSQL::SQLCollections *SQLCollections] : dataSource= data_source ;
 */
static void
table_name(pSQLParser ctx, uSQL::SQLCollections *SQLCollections)
{
  uSQL::SQLCollection * dataSource;
  #undef  RETURN_TYPE_dataSource
  #define RETURN_TYPE_dataSource uSQL::SQLCollection *

  /* Initialize rule variables
   */

  {
    // SQL.g:165:2: (dataSource= data_source )
    // SQL.g:165:4: dataSource= data_source
    {
      FOLLOWPUSH(FOLLOW_data_source_in_table_name378);
      dataSource=data_source(ctx);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto ruletable_nameEx;
      }


      {

            SQLCollections->addChildNode(dataSource);
            
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto ruletable_nameEx; /* Prevent compiler warnings */
  ruletable_nameEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return ;
}
/* $ANTLR end table_name */

/**
 * $ANTLR start data_source
 * SQL.g:170:1: data_source returns [uSQL::SQLCollection *sqlDataSource] : collection_name ;
 */
static uSQL::SQLCollection *
data_source(pSQLParser ctx)
{
  uSQL::SQLCollection * sqlDataSource;


  SQLParser_collection_name_return collection_name1;
  #undef  RETURN_TYPE_collection_name1
  #define RETURN_TYPE_collection_name1 SQLParser_collection_name_return

  /* Initialize rule variables
   */


      sqlDataSource = new uSQL::SQLCollection();
    
  {
    // SQL.g:174:2: ( collection_name )
    // SQL.g:174:4: collection_name
    {
      FOLLOWPUSH(FOLLOW_collection_name_in_data_source401);
      collection_name1=collection_name(ctx);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto ruledata_sourceEx;
      }


      {

            // Collection
            sqlDataSource->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, collection_name1.start, collection_name1.stop))
        ));
            
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto ruledata_sourceEx; /* Prevent compiler warnings */
  ruledata_sourceEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return sqlDataSource;
}
/* $ANTLR end data_source */

/**
 * $ANTLR start grouping_section
 * SQL.g:180:1: grouping_section returns [uSQL::SQLGroupBy *sqlGroupBy] : GROUP BY expression[sqlGroupBy] ( COMMA expression[sqlGroupBy] )* ;
 */
static uSQL::SQLGroupBy *
grouping_section(pSQLParser ctx)
{
  uSQL::SQLGroupBy * sqlGroupBy;


  /* Initialize rule variables
   */


      sqlGroupBy = new uSQL::SQLGroupBy();
    
  {
    // SQL.g:184:2: ( GROUP BY expression[sqlGroupBy] ( COMMA expression[sqlGroupBy] )* )
    // SQL.g:184:4: GROUP BY expression[sqlGroupBy] ( COMMA expression[sqlGroupBy] )*
    {
       MATCHT(GROUP, &FOLLOW_GROUP_in_grouping_section424);
      if  (HASEXCEPTION())
      {
        goto rulegrouping_sectionEx;
      }


       MATCHT(BY, &FOLLOW_BY_in_grouping_section426);
      if  (HASEXCEPTION())
      {
        goto rulegrouping_sectionEx;
      }


      FOLLOWPUSH(FOLLOW_expression_in_grouping_section428);
      expression(ctx, sqlGroupBy);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto rulegrouping_sectionEx;
      }


      // SQL.g:184:36: ( COMMA expression[sqlGroupBy] )*

      for (;;)
      {
        int alt14=2;
        switch ( LA(1) )
        {
        case COMMA:
          {
            alt14=1;
          }
          break;

        }

        switch (alt14)
        {
        case 1:
          // SQL.g:184:37: COMMA expression[sqlGroupBy]
          {
             MATCHT(COMMA, &FOLLOW_COMMA_in_grouping_section432);
            if  (HASEXCEPTION())
            {
              goto rulegrouping_sectionEx;
            }


            FOLLOWPUSH(FOLLOW_expression_in_grouping_section434);
            expression(ctx, sqlGroupBy);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
              goto rulegrouping_sectionEx;
            }


          }
          break;

        default:
          goto loop14;  /* break out of the loop */
          break;
        }
      }
      loop14: ; /* Jump out to here if this rule does not match */


    }

  }

  // This is where rules clean up and exit
  //
  goto rulegrouping_sectionEx; /* Prevent compiler warnings */
  rulegrouping_sectionEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return sqlGroupBy;
}
/* $ANTLR end grouping_section */

/**
 * $ANTLR start having_section
 * SQL.g:187:1: having_section returns [uSQL::SQLHaving *sqlHaving] : HAVING expression[sqlHaving] ;
 */
static uSQL::SQLHaving *
having_section(pSQLParser ctx)
{
  uSQL::SQLHaving * sqlHaving;


  /* Initialize rule variables
   */


      sqlHaving = new uSQL::SQLHaving();
    
  {
    // SQL.g:191:2: ( HAVING expression[sqlHaving] )
    // SQL.g:191:4: HAVING expression[sqlHaving]
    {
       MATCHT(HAVING, &FOLLOW_HAVING_in_having_section459);
      if  (HASEXCEPTION())
      {
        goto rulehaving_sectionEx;
      }


      FOLLOWPUSH(FOLLOW_expression_in_having_section461);
      expression(ctx, sqlHaving);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto rulehaving_sectionEx;
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto rulehaving_sectionEx; /* Prevent compiler warnings */
  rulehaving_sectionEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return sqlHaving;
}
/* $ANTLR end having_section */

/**
 * $ANTLR start sorting_section
 * SQL.g:194:1: sorting_section returns [uSQL::SQLOrderBy *sqlOrders] : ORDER BY sorting_item[sqlOrders] ( COMMA sorting_item[sqlOrders] )* ;
 */
static uSQL::SQLOrderBy *
sorting_section(pSQLParser ctx)
{
  uSQL::SQLOrderBy * sqlOrders;


  /* Initialize rule variables
   */


      sqlOrders = new uSQL::SQLOrderBy();
    
  {
    // SQL.g:198:2: ( ORDER BY sorting_item[sqlOrders] ( COMMA sorting_item[sqlOrders] )* )
    // SQL.g:198:4: ORDER BY sorting_item[sqlOrders] ( COMMA sorting_item[sqlOrders] )*
    {
       MATCHT(ORDER, &FOLLOW_ORDER_in_sorting_section483);
      if  (HASEXCEPTION())
      {
        goto rulesorting_sectionEx;
      }


       MATCHT(BY, &FOLLOW_BY_in_sorting_section485);
      if  (HASEXCEPTION())
      {
        goto rulesorting_sectionEx;
      }


      FOLLOWPUSH(FOLLOW_sorting_item_in_sorting_section487);
      sorting_item(ctx, sqlOrders);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto rulesorting_sectionEx;
      }


      // SQL.g:198:37: ( COMMA sorting_item[sqlOrders] )*

      for (;;)
      {
        int alt15=2;
        switch ( LA(1) )
        {
        case COMMA:
          {
            alt15=1;
          }
          break;

        }

        switch (alt15)
        {
        case 1:
          // SQL.g:198:38: COMMA sorting_item[sqlOrders]
          {
             MATCHT(COMMA, &FOLLOW_COMMA_in_sorting_section491);
            if  (HASEXCEPTION())
            {
              goto rulesorting_sectionEx;
            }


            FOLLOWPUSH(FOLLOW_sorting_item_in_sorting_section493);
            sorting_item(ctx, sqlOrders);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
              goto rulesorting_sectionEx;
            }


          }
          break;

        default:
          goto loop15;  /* break out of the loop */
          break;
        }
      }
      loop15: ; /* Jump out to here if this rule does not match */


    }

  }

  // This is where rules clean up and exit
  //
  goto rulesorting_sectionEx; /* Prevent compiler warnings */
  rulesorting_sectionEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return sqlOrders;
}
/* $ANTLR end sorting_section */

/**
 * $ANTLR start sorting_item
 * SQL.g:201:1: sorting_item[uSQL::SQLOrderBy *sqlOrders] : property ( sorting_specification )? ;
 */
static void
sorting_item(pSQLParser ctx, uSQL::SQLOrderBy *sqlOrders)
{
  SQLParser_property_return property2;
  #undef  RETURN_TYPE_property2
  #define RETURN_TYPE_property2 SQLParser_property_return

  SQLParser_sorting_specification_return sorting_specification3;
  #undef  RETURN_TYPE_sorting_specification3
  #define RETURN_TYPE_sorting_specification3 SQLParser_sorting_specification_return

  /* Initialize rule variables
   */

  {
    // SQL.g:202:2: ( property ( sorting_specification )? )
    // SQL.g:202:4: property ( sorting_specification )?
    {
      FOLLOWPUSH(FOLLOW_property_in_sorting_item511);
      property2=property(ctx);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto rulesorting_itemEx;
      }


      // SQL.g:202:13: ( sorting_specification )?
      {
        int alt16=2;
        switch ( LA(1) )
        {
          case ASC:
          case DESC:
            {
              alt16=1;
            }
            break;
        }

        switch (alt16)
        {
        case 1:
          // SQL.g:202:14: sorting_specification
          {
            FOLLOWPUSH(FOLLOW_sorting_specification_in_sorting_item514);
            sorting_specification3=sorting_specification(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
              goto rulesorting_itemEx;
            }


          }
          break;

        }
      }

      {

            uSQL::SQLOrder *sqlOrder = new uSQL::SQLOrder();
            sqlOrder->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, property2.start, property2.stop))
        ));
            if (sorting_specification)
              sqlOrder->setOrder(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, sorting_specification3.start, sorting_specification3.stop))
        ));
            sqlOrders->addChildNode(sqlOrder);
            
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto rulesorting_itemEx; /* Prevent compiler warnings */
  rulesorting_itemEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return ;
}
/* $ANTLR end sorting_item */

/**
 * $ANTLR start sorting_specification
 * SQL.g:211:1: sorting_specification : ( ASC | DESC );
 */
static SQLParser_sorting_specification_return
sorting_specification(pSQLParser ctx)
{
  SQLParser_sorting_specification_return retval;


  /* Initialize rule variables
   */

  retval.start = LT(1); retval.stop = retval.start;


  {
    // SQL.g:212:2: ( ASC | DESC )
    // SQL.g:
    {
      if ( LA(1) == ASC || LA(1) == DESC )
      {
        CONSUME();
        PERRORRECOVERY=ANTLR3_FALSE;
      }
      else
      {
        CONSTRUCTEX();
        EXCEPTION->type     = ANTLR3_MISMATCHED_SET_EXCEPTION;
        EXCEPTION->name     = (void *)ANTLR3_MISMATCHED_SET_NAME;
        EXCEPTION->expectingSet = NULL;

        goto rulesorting_specificationEx;
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto rulesorting_specificationEx; /* Prevent compiler warnings */
  rulesorting_specificationEx: ;
  retval.stop = LT(-1);


      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return retval;
}
/* $ANTLR end sorting_specification */

/**
 * $ANTLR start limit_section
 * SQL.g:216:1: limit_section returns [uSQL::SQLLimit *sqlLimit] : LIMIT (offsetExpr= expression_literal COMMA )? countExpr= expression_literal ;
 */
static uSQL::SQLLimit *
limit_section(pSQLParser ctx)
{
  uSQL::SQLLimit * sqlLimit;


  uSQL::SQLExpression * offsetExpr;
  #undef  RETURN_TYPE_offsetExpr
  #define RETURN_TYPE_offsetExpr uSQL::SQLExpression *

  uSQL::SQLExpression * countExpr;
  #undef  RETURN_TYPE_countExpr
  #define RETURN_TYPE_countExpr uSQL::SQLExpression *

  /* Initialize rule variables
   */


      sqlLimit = new uSQL::SQLLimit();
      offsetExpr = NULL;
    
  {
    // SQL.g:221:2: ( LIMIT (offsetExpr= expression_literal COMMA )? countExpr= expression_literal )
    // SQL.g:221:4: LIMIT (offsetExpr= expression_literal COMMA )? countExpr= expression_literal
    {
       MATCHT(LIMIT, &FOLLOW_LIMIT_in_limit_section555);
      if  (HASEXCEPTION())
      {
        goto rulelimit_sectionEx;
      }


      // SQL.g:221:10: (offsetExpr= expression_literal COMMA )?
      {
        int alt17=2;
        switch ( LA(1) )
        {
          case ID:
            {
              switch ( LA(2) )
              {
                case COMMA:
                  {
                    alt17=1;
                  }
                  break;
              }

            }
            break;
          case NUMBER:
            {
              switch ( LA(2) )
              {
                case COMMA:
                  {
                    alt17=1;
                  }
                  break;
              }

            }
            break;
          case FLOAT:
            {
              switch ( LA(2) )
              {
                case COMMA:
                  {
                    alt17=1;
                  }
                  break;
              }

            }
            break;
          case STRING:
            {
              switch ( LA(2) )
              {
                case COMMA:
                  {
                    alt17=1;
                  }
                  break;
              }

            }
            break;
          case T:
            {
              switch ( LA(2) )
              {
                case R:
                  {
                    switch ( LA(3) )
                    {
                      case U:
                        {
                          switch ( LA(4) )
                          {
                            case E:
                              {
                                switch ( LA(5) )
                                {
                                  case COMMA:
                                    {
                                      alt17=1;
                                    }
                                    break;
                                }

                              }
                              break;
                          }

                        }
                        break;
                    }

                  }
                  break;
              }

            }
            break;
          case F:
            {
              switch ( LA(2) )
              {
                case A:
                  {
                    switch ( LA(3) )
                    {
                      case L:
                        {
                          switch ( LA(4) )
                          {
                            case S:
                              {
                                switch ( LA(5) )
                                {
                                  case E:
                                    {
                                      switch ( LA(6) )
                                      {
                                        case COMMA:
                                          {
                                            alt17=1;
                                          }
                                          break;
                                      }

                                    }
                                    break;
                                }

                              }
                              break;
                          }

                        }
                        break;
                    }

                  }
                  break;
              }

            }
            break;
          case NIL:
            {
              switch ( LA(2) )
              {
                case COMMA:
                  {
                    alt17=1;
                  }
                  break;
              }

            }
            break;
          case CURRENT_TIME:
            {
              switch ( LA(2) )
              {
                case COMMA:
                  {
                    alt17=1;
                  }
                  break;
              }

            }
            break;
          case CURRENT_DATE:
            {
              switch ( LA(2) )
              {
                case COMMA:
                  {
                    alt17=1;
                  }
                  break;
              }

            }
            break;
          case CURRENT_TIMESTAMP:
            {
              switch ( LA(2) )
              {
                case COMMA:
                  {
                    alt17=1;
                  }
                  break;
              }

            }
            break;
        }

        switch (alt17)
        {
        case 1:
          // SQL.g:221:11: offsetExpr= expression_literal COMMA
          {
            FOLLOWPUSH(FOLLOW_expression_literal_in_limit_section560);
            offsetExpr=expression_literal(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
              goto rulelimit_sectionEx;
            }


             MATCHT(COMMA, &FOLLOW_COMMA_in_limit_section562);
            if  (HASEXCEPTION())
            {
              goto rulelimit_sectionEx;
            }


          }
          break;

        }
      }

      FOLLOWPUSH(FOLLOW_expression_literal_in_limit_section568);
      countExpr=expression_literal(ctx);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto rulelimit_sectionEx;
      }


      {

            if (offsetExpr)
              sqlLimit->addChildNode(offsetExpr);
            sqlLimit->addChildNode(countExpr);
            
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto rulelimit_sectionEx; /* Prevent compiler warnings */
  rulelimit_sectionEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return sqlLimit;
}
/* $ANTLR end limit_section */

/**
 * $ANTLR start offset_section
 * SQL.g:228:1: offset_section returns [uSQL::SQLOffset *sqlOffset] : offsetExpr= expression_literal ;
 */
static uSQL::SQLOffset *
offset_section(pSQLParser ctx)
{
  uSQL::SQLOffset * sqlOffset;


  uSQL::SQLExpression * offsetExpr;
  #undef  RETURN_TYPE_offsetExpr
  #define RETURN_TYPE_offsetExpr uSQL::SQLExpression *

  /* Initialize rule variables
   */


      sqlOffset = new uSQL::SQLOffset();
    
  {
    // SQL.g:232:2: (offsetExpr= expression_literal )
    // SQL.g:232:4: offsetExpr= expression_literal
    {
      FOLLOWPUSH(FOLLOW_expression_literal_in_offset_section593);
      offsetExpr=expression_literal(ctx);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto ruleoffset_sectionEx;
      }


      {

            sqlOffset->addChildNode(offsetExpr);
            
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto ruleoffset_sectionEx; /* Prevent compiler warnings */
  ruleoffset_sectionEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return sqlOffset;
}
/* $ANTLR end offset_section */

/**
 * $ANTLR start create_collection_stmt
 * SQL.g:243:1: create_collection_stmt[uSQL::SQLStatement *sqlStmt] : CREATE COLLECTION collectionNode= collection_section ( OPTIONS expression[sqlOpt] )? ;
 */
static void
create_collection_stmt(pSQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
  uSQL::SQLCollection * collectionNode;
  #undef  RETURN_TYPE_collectionNode
  #define RETURN_TYPE_collectionNode uSQL::SQLCollection *

  /* Initialize rule variables
   */

    
      uSQL::SQLOption *sqlOpt = new uSQL::SQLOption();
    
  {
    // SQL.g:247:2: ( CREATE COLLECTION collectionNode= collection_section ( OPTIONS expression[sqlOpt] )? )
    // SQL.g:247:4: CREATE COLLECTION collectionNode= collection_section ( OPTIONS expression[sqlOpt] )?
    {
       MATCHT(CREATE, &FOLLOW_CREATE_in_create_collection_stmt618);
      if  (HASEXCEPTION())
      {
        goto rulecreate_collection_stmtEx;
      }


       MATCHT(COLLECTION, &FOLLOW_COLLECTION_in_create_collection_stmt620);
      if  (HASEXCEPTION())
      {
        goto rulecreate_collection_stmtEx;
      }


      FOLLOWPUSH(FOLLOW_collection_section_in_create_collection_stmt624);
      collectionNode=collection_section(ctx);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto rulecreate_collection_stmtEx;
      }


      // SQL.g:247:56: ( OPTIONS expression[sqlOpt] )?
      {
        int alt18=2;
        switch ( LA(1) )
        {
          case OPTIONS:
            {
              alt18=1;
            }
            break;
        }

        switch (alt18)
        {
        case 1:
          // SQL.g:247:57: OPTIONS expression[sqlOpt]
          {
             MATCHT(OPTIONS, &FOLLOW_OPTIONS_in_create_collection_stmt627);
            if  (HASEXCEPTION())
            {
              goto rulecreate_collection_stmtEx;
            }


            FOLLOWPUSH(FOLLOW_expression_in_create_collection_stmt629);
            expression(ctx, sqlOpt);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
              goto rulecreate_collection_stmtEx;
            }


          }
          break;

        }
      }

      {

            // CREATE
            uSQL::SQLCreate *sqlCmd = new uSQL::SQLCreate();
            sqlStmt->addChildNode(sqlCmd);
            
            // Collection
            sqlCmd->addChildNode(collectionNode);

            // Option 
            if (sqlOpt->hasExpressions())
              sqlCmd->addChildNode(sqlOpt);
            else 
              delete sqlOpt;
            
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto rulecreate_collection_stmtEx; /* Prevent compiler warnings */
  rulecreate_collection_stmtEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return ;
}
/* $ANTLR end create_collection_stmt */

/**
 * $ANTLR start drop_collection_stmt
 * SQL.g:269:1: drop_collection_stmt[uSQL::SQLStatement *sqlStmt] : DROP COLLECTION collectionNode= collection_section ;
 */
static void
drop_collection_stmt(pSQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
  uSQL::SQLCollection * collectionNode;
  #undef  RETURN_TYPE_collectionNode
  #define RETURN_TYPE_collectionNode uSQL::SQLCollection *

  /* Initialize rule variables
   */

    
    
  {
    // SQL.g:272:2: ( DROP COLLECTION collectionNode= collection_section )
    // SQL.g:272:4: DROP COLLECTION collectionNode= collection_section
    {
       MATCHT(DROP, &FOLLOW_DROP_in_drop_collection_stmt656);
      if  (HASEXCEPTION())
      {
        goto ruledrop_collection_stmtEx;
      }


       MATCHT(COLLECTION, &FOLLOW_COLLECTION_in_drop_collection_stmt658);
      if  (HASEXCEPTION())
      {
        goto ruledrop_collection_stmtEx;
      }


      FOLLOWPUSH(FOLLOW_collection_section_in_drop_collection_stmt662);
      collectionNode=collection_section(ctx);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto ruledrop_collection_stmtEx;
      }


      {

            // DROP
            uSQL::SQLDrop *sqlCmd = new uSQL::SQLDrop();
            sqlStmt->addChildNode(sqlCmd);
            
            // Collection
            sqlCmd->addChildNode(collectionNode);
          
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto ruledrop_collection_stmtEx; /* Prevent compiler warnings */
  ruledrop_collection_stmtEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return ;
}
/* $ANTLR end drop_collection_stmt */

/**
 * $ANTLR start create_index_stmt
 * SQL.g:289:1: create_index_stmt[uSQL::SQLStatement *sqlStmt] : CREATE COLLECTION_INDEX indexNode= index_section ;
 */
static void
create_index_stmt(pSQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
  uSQL::SQLIndex * indexNode;
  #undef  RETURN_TYPE_indexNode
  #define RETURN_TYPE_indexNode uSQL::SQLIndex *

  /* Initialize rule variables
   */

    
    
  {
    // SQL.g:292:2: ( CREATE COLLECTION_INDEX indexNode= index_section )
    // SQL.g:292:4: CREATE COLLECTION_INDEX indexNode= index_section
    {
       MATCHT(CREATE, &FOLLOW_CREATE_in_create_index_stmt687);
      if  (HASEXCEPTION())
      {
        goto rulecreate_index_stmtEx;
      }


       MATCHT(COLLECTION_INDEX, &FOLLOW_COLLECTION_INDEX_in_create_index_stmt689);
      if  (HASEXCEPTION())
      {
        goto rulecreate_index_stmtEx;
      }


      FOLLOWPUSH(FOLLOW_index_section_in_create_index_stmt693);
      indexNode=index_section(ctx);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto rulecreate_index_stmtEx;
      }


      {

            // DROP
            uSQL::SQLCreateIndex *sqlCmd = new uSQL::SQLCreateIndex();
            sqlStmt->addChildNode(sqlCmd);
            
            // Collection
            sqlCmd->addChildNode(indexNode);
          
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto rulecreate_index_stmtEx; /* Prevent compiler warnings */
  rulecreate_index_stmtEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return ;
}
/* $ANTLR end create_index_stmt */

/**
 * $ANTLR start drop_index_stmt
 * SQL.g:309:1: drop_index_stmt[uSQL::SQLStatement *sqlStmt] : DROP COLLECTION_INDEX indexNode= index_section ;
 */
static void
drop_index_stmt(pSQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
  uSQL::SQLIndex * indexNode;
  #undef  RETURN_TYPE_indexNode
  #define RETURN_TYPE_indexNode uSQL::SQLIndex *

  /* Initialize rule variables
   */

    
    
  {
    // SQL.g:312:2: ( DROP COLLECTION_INDEX indexNode= index_section )
    // SQL.g:312:4: DROP COLLECTION_INDEX indexNode= index_section
    {
       MATCHT(DROP, &FOLLOW_DROP_in_drop_index_stmt718);
      if  (HASEXCEPTION())
      {
        goto ruledrop_index_stmtEx;
      }


       MATCHT(COLLECTION_INDEX, &FOLLOW_COLLECTION_INDEX_in_drop_index_stmt720);
      if  (HASEXCEPTION())
      {
        goto ruledrop_index_stmtEx;
      }


      FOLLOWPUSH(FOLLOW_index_section_in_drop_index_stmt724);
      indexNode=index_section(ctx);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto ruledrop_index_stmtEx;
      }


      {

            // DROP
            uSQL::SQLDropIndex *sqlCmd = new uSQL::SQLDropIndex();
            sqlStmt->addChildNode(sqlCmd);
            
            // Collection
            sqlCmd->addChildNode(indexNode);
          
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto ruledrop_index_stmtEx; /* Prevent compiler warnings */
  ruledrop_index_stmtEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return ;
}
/* $ANTLR end drop_index_stmt */

/**
 * $ANTLR start insert_stmt
 * SQL.g:329:1: insert_stmt[uSQL::SQLStatement *sqlStmt] : (isAsync= sync_operator )? INSERT INTO collectionNode= collection_section (columnNode= insert_columns_section )? sqlValue= insert_values_section ;
 */
static void
insert_stmt(pSQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
  bool isAsync;
  #undef  RETURN_TYPE_isAsync
  #define RETURN_TYPE_isAsync bool

  uSQL::SQLCollection * collectionNode;
  #undef  RETURN_TYPE_collectionNode
  #define RETURN_TYPE_collectionNode uSQL::SQLCollection *

  uSQL::SQLColumns * columnNode;
  #undef  RETURN_TYPE_columnNode
  #define RETURN_TYPE_columnNode uSQL::SQLColumns *

  uSQL::SQLValues * sqlValue;
  #undef  RETURN_TYPE_sqlValue
  #define RETURN_TYPE_sqlValue uSQL::SQLValues *

  /* Initialize rule variables
   */


      isAsync = false;
      columnNode = NULL;
    
  {
    // SQL.g:334:2: ( (isAsync= sync_operator )? INSERT INTO collectionNode= collection_section (columnNode= insert_columns_section )? sqlValue= insert_values_section )
    // SQL.g:334:4: (isAsync= sync_operator )? INSERT INTO collectionNode= collection_section (columnNode= insert_columns_section )? sqlValue= insert_values_section
    {
      // SQL.g:334:4: (isAsync= sync_operator )?
      {
        int alt19=2;
        switch ( LA(1) )
        {
          case ASYNC:
          case SYNC:
            {
              alt19=1;
            }
            break;
        }

        switch (alt19)
        {
        case 1:
          // SQL.g:334:5: isAsync= sync_operator
          {
            FOLLOWPUSH(FOLLOW_sync_operator_in_insert_stmt752);
            isAsync=sync_operator(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
              goto ruleinsert_stmtEx;
            }


          }
          break;

        }
      }

       MATCHT(INSERT, &FOLLOW_INSERT_in_insert_stmt756);
      if  (HASEXCEPTION())
      {
        goto ruleinsert_stmtEx;
      }


       MATCHT(INTO, &FOLLOW_INTO_in_insert_stmt758);
      if  (HASEXCEPTION())
      {
        goto ruleinsert_stmtEx;
      }


      FOLLOWPUSH(FOLLOW_collection_section_in_insert_stmt762);
      collectionNode=collection_section(ctx);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto ruleinsert_stmtEx;
      }


      // SQL.g:334:75: (columnNode= insert_columns_section )?
      {
        int alt20=2;
        switch ( LA(1) )
        {
          case 94:
            {
              alt20=1;
            }
            break;
        }

        switch (alt20)
        {
        case 1:
          // SQL.g:334:76: columnNode= insert_columns_section
          {
            FOLLOWPUSH(FOLLOW_insert_columns_section_in_insert_stmt767);
            columnNode=insert_columns_section(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
              goto ruleinsert_stmtEx;
            }


          }
          break;

        }
      }

      FOLLOWPUSH(FOLLOW_insert_values_section_in_insert_stmt773);
      sqlValue=insert_values_section(ctx);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto ruleinsert_stmtEx;
      }


      {

            // INSERT
            uSQL::SQLInsert *sqlCmd = new uSQL::SQLInsert();
            sqlCmd->setAsyncEnabled(isAsync);
            sqlStmt->addChildNode(sqlCmd);

            // Collection
            uSQL::SQLCollections *sqlCollections = new uSQL::SQLCollections();
            sqlStmt->addChildNode(sqlCollections);
            sqlCollections->addChildNode(collectionNode);
            
            // Column
            if (columnNode)
              sqlStmt->addChildNode(columnNode);
            
            // Value
            sqlStmt->addChildNode(sqlValue);
          
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto ruleinsert_stmtEx; /* Prevent compiler warnings */
  ruleinsert_stmtEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return ;
}
/* $ANTLR end insert_stmt */

/**
 * $ANTLR start insert_columns_section
 * SQL.g:355:1: insert_columns_section returns [uSQL::SQLColumns *sqlColumns] : '(' column_section[sqlColumns] ( ',' column_section[sqlColumns] )* ')' ;
 */
static uSQL::SQLColumns *
insert_columns_section(pSQLParser ctx)
{
  uSQL::SQLColumns * sqlColumns;


  /* Initialize rule variables
   */


      sqlColumns = new uSQL::SQLColumns();
    
  {
    // SQL.g:359:2: ( '(' column_section[sqlColumns] ( ',' column_section[sqlColumns] )* ')' )
    // SQL.g:359:4: '(' column_section[sqlColumns] ( ',' column_section[sqlColumns] )* ')'
    {
       MATCHT(94, &FOLLOW_94_in_insert_columns_section797);
      if  (HASEXCEPTION())
      {
        goto ruleinsert_columns_sectionEx;
      }


      FOLLOWPUSH(FOLLOW_column_section_in_insert_columns_section799);
      column_section(ctx, sqlColumns);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto ruleinsert_columns_sectionEx;
      }


      // SQL.g:359:35: ( ',' column_section[sqlColumns] )*

      for (;;)
      {
        int alt21=2;
        switch ( LA(1) )
        {
        case COMMA:
          {
            alt21=1;
          }
          break;

        }

        switch (alt21)
        {
        case 1:
          // SQL.g:359:36: ',' column_section[sqlColumns]
          {
             MATCHT(COMMA, &FOLLOW_COMMA_in_insert_columns_section803);
            if  (HASEXCEPTION())
            {
              goto ruleinsert_columns_sectionEx;
            }


            FOLLOWPUSH(FOLLOW_column_section_in_insert_columns_section805);
            column_section(ctx, sqlColumns);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
              goto ruleinsert_columns_sectionEx;
            }


          }
          break;

        default:
          goto loop21;  /* break out of the loop */
          break;
        }
      }
      loop21: ; /* Jump out to here if this rule does not match */


       MATCHT(95, &FOLLOW_95_in_insert_columns_section810);
      if  (HASEXCEPTION())
      {
        goto ruleinsert_columns_sectionEx;
      }


      {

            
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto ruleinsert_columns_sectionEx; /* Prevent compiler warnings */
  ruleinsert_columns_sectionEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return sqlColumns;
}
/* $ANTLR end insert_columns_section */

/**
 * $ANTLR start insert_values_section
 * SQL.g:363:1: insert_values_section returns [uSQL::SQLValues *sqlValues] : ( VALUE expression[sqlValues] | VALUES expression[sqlValues] );
 */
static uSQL::SQLValues *
insert_values_section(pSQLParser ctx)
{
  uSQL::SQLValues * sqlValues;


  /* Initialize rule variables
   */


      sqlValues = new uSQL::SQLValues();
    
  {
    {
      //  SQL.g:367:2: ( VALUE expression[sqlValues] | VALUES expression[sqlValues] )

      ANTLR3_UINT32 alt22;

      alt22=2;

      switch ( LA(1) )
      {
      case VALUE:
        {
          alt22=1;
        }
        break;
      case VALUES:
        {
          alt22=2;
        }
        break;

      default:
        CONSTRUCTEX();
        EXCEPTION->type     = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        EXCEPTION->message    = (void *)"";
        EXCEPTION->decisionNum  = 22;
        EXCEPTION->state    = 0;


        goto ruleinsert_values_sectionEx;

      }

      switch (alt22)
      {
      case 1:
        // SQL.g:367:4: VALUE expression[sqlValues]
        {
           MATCHT(VALUE, &FOLLOW_VALUE_in_insert_values_section833);
          if  (HASEXCEPTION())
          {
            goto ruleinsert_values_sectionEx;
          }


          FOLLOWPUSH(FOLLOW_expression_in_insert_values_section835);
          expression(ctx, sqlValues);

          FOLLOWPOP();
          if  (HASEXCEPTION())
          {
            goto ruleinsert_values_sectionEx;
          }


          {

                
          }


        }
        break;
      case 2:
        // SQL.g:369:4: VALUES expression[sqlValues]
        {
           MATCHT(VALUES, &FOLLOW_VALUES_in_insert_values_section843);
          if  (HASEXCEPTION())
          {
            goto ruleinsert_values_sectionEx;
          }


          FOLLOWPUSH(FOLLOW_expression_in_insert_values_section845);
          expression(ctx, sqlValues);

          FOLLOWPOP();
          if  (HASEXCEPTION())
          {
            goto ruleinsert_values_sectionEx;
          }


          {

                
          }


        }
        break;

      }
    }
  }

  // This is where rules clean up and exit
  //
  goto ruleinsert_values_sectionEx; /* Prevent compiler warnings */
  ruleinsert_values_sectionEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return sqlValues;
}
/* $ANTLR end insert_values_section */

/**
 * $ANTLR start update_stmt
 * SQL.g:379:1: update_stmt[uSQL::SQLStatement *sqlStmt] : (isAsync= sync_operator )? UPDATE collectionNode= collection_section SET property_section[sqlSet] ( COMMA property_section[sqlSet] )* (whereSection= where_section )? ;
 */
static void
update_stmt(pSQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
  bool isAsync;
  #undef  RETURN_TYPE_isAsync
  #define RETURN_TYPE_isAsync bool

  uSQL::SQLCollection * collectionNode;
  #undef  RETURN_TYPE_collectionNode
  #define RETURN_TYPE_collectionNode uSQL::SQLCollection *

  uSQL::SQLWhere * whereSection;
  #undef  RETURN_TYPE_whereSection
  #define RETURN_TYPE_whereSection uSQL::SQLWhere *

  /* Initialize rule variables
   */


      uSQL::SQLSets *sqlSet = new uSQL::SQLSets();
      isAsync = false;
      whereSection = NULL;
    
  {
    // SQL.g:385:2: ( (isAsync= sync_operator )? UPDATE collectionNode= collection_section SET property_section[sqlSet] ( COMMA property_section[sqlSet] )* (whereSection= where_section )? )
    // SQL.g:385:4: (isAsync= sync_operator )? UPDATE collectionNode= collection_section SET property_section[sqlSet] ( COMMA property_section[sqlSet] )* (whereSection= where_section )?
    {
      // SQL.g:385:4: (isAsync= sync_operator )?
      {
        int alt23=2;
        switch ( LA(1) )
        {
          case ASYNC:
          case SYNC:
            {
              alt23=1;
            }
            break;
        }

        switch (alt23)
        {
        case 1:
          // SQL.g:385:5: isAsync= sync_operator
          {
            FOLLOWPUSH(FOLLOW_sync_operator_in_update_stmt873);
            isAsync=sync_operator(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
              goto ruleupdate_stmtEx;
            }


          }
          break;

        }
      }

       MATCHT(UPDATE, &FOLLOW_UPDATE_in_update_stmt877);
      if  (HASEXCEPTION())
      {
        goto ruleupdate_stmtEx;
      }


      FOLLOWPUSH(FOLLOW_collection_section_in_update_stmt881);
      collectionNode=collection_section(ctx);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto ruleupdate_stmtEx;
      }


       MATCHT(SET, &FOLLOW_SET_in_update_stmt883);
      if  (HASEXCEPTION())
      {
        goto ruleupdate_stmtEx;
      }


      FOLLOWPUSH(FOLLOW_property_section_in_update_stmt885);
      property_section(ctx, sqlSet);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto ruleupdate_stmtEx;
      }


      // SQL.g:385:99: ( COMMA property_section[sqlSet] )*

      for (;;)
      {
        int alt24=2;
        switch ( LA(1) )
        {
        case COMMA:
          {
            alt24=1;
          }
          break;

        }

        switch (alt24)
        {
        case 1:
          // SQL.g:385:100: COMMA property_section[sqlSet]
          {
             MATCHT(COMMA, &FOLLOW_COMMA_in_update_stmt889);
            if  (HASEXCEPTION())
            {
              goto ruleupdate_stmtEx;
            }


            FOLLOWPUSH(FOLLOW_property_section_in_update_stmt891);
            property_section(ctx, sqlSet);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
              goto ruleupdate_stmtEx;
            }


          }
          break;

        default:
          goto loop24;  /* break out of the loop */
          break;
        }
      }
      loop24: ; /* Jump out to here if this rule does not match */


      // SQL.g:385:133: (whereSection= where_section )?
      {
        int alt25=2;
        switch ( LA(1) )
        {
          case WHERE:
            {
              alt25=1;
            }
            break;
        }

        switch (alt25)
        {
        case 1:
          // SQL.g:385:134: whereSection= where_section
          {
            FOLLOWPUSH(FOLLOW_where_section_in_update_stmt901);
            whereSection=where_section(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
              goto ruleupdate_stmtEx;
            }


          }
          break;

        }
      }

      {

            // INSERT
            uSQL::SQLUpdate *sqlCmd = new uSQL::SQLUpdate();
            sqlCmd->setAsyncEnabled(isAsync);
            sqlStmt->addChildNode(sqlCmd);

            // Collection
            uSQL::SQLCollections *sqlCollections = new uSQL::SQLCollections();
            sqlStmt->addChildNode(sqlCollections);
            sqlCollections->addChildNode(collectionNode);
            
            // Set
            sqlStmt->addChildNode(sqlSet);

            // WHERE
            if (whereSection)     
              sqlStmt->addChildNode(whereSection);
          
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto ruleupdate_stmtEx; /* Prevent compiler warnings */
  ruleupdate_stmtEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return ;
}
/* $ANTLR end update_stmt */

/**
 * $ANTLR start property_section
 * SQL.g:407:1: property_section[uSQL::SQLSets *sqlSet] : property SINGLE_EQ exprRight= expression_literal ;
 */
static void
property_section(pSQLParser ctx, uSQL::SQLSets *sqlSet)
{
  uSQL::SQLExpression * exprRight;
  #undef  RETURN_TYPE_exprRight
  #define RETURN_TYPE_exprRight uSQL::SQLExpression *

  SQLParser_property_return property4;
  #undef  RETURN_TYPE_property4
  #define RETURN_TYPE_property4 SQLParser_property_return

  /* Initialize rule variables
   */


      
    
  {
    // SQL.g:411:2: ( property SINGLE_EQ exprRight= expression_literal )
    // SQL.g:411:4: property SINGLE_EQ exprRight= expression_literal
    {
      FOLLOWPUSH(FOLLOW_property_in_property_section926);
      property4=property(ctx);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto ruleproperty_sectionEx;
      }


       MATCHT(SINGLE_EQ, &FOLLOW_SINGLE_EQ_in_property_section928);
      if  (HASEXCEPTION())
      {
        goto ruleproperty_sectionEx;
      }


      FOLLOWPUSH(FOLLOW_expression_literal_in_property_section932);
      exprRight=expression_literal(ctx);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto ruleproperty_sectionEx;
      }


      {

            uSQL::SQLSet *sqlDict = new uSQL::SQLSet();
            sqlDict->setName(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, property4.start, property4.stop))
        ));
            sqlDict->setValue(exprRight);
            sqlSet->addChildNode(sqlDict);
          
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto ruleproperty_sectionEx; /* Prevent compiler warnings */
  ruleproperty_sectionEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return ;
}
/* $ANTLR end property_section */

/**
 * $ANTLR start delete_stmt
 * SQL.g:427:1: delete_stmt[uSQL::SQLStatement *sqlStmt] : (isAsync= sync_operator )? DELETE FROM collectionNode= collection_section (whereSection= where_section )? ;
 */
static void
delete_stmt(pSQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
  bool isAsync;
  #undef  RETURN_TYPE_isAsync
  #define RETURN_TYPE_isAsync bool

  uSQL::SQLCollection * collectionNode;
  #undef  RETURN_TYPE_collectionNode
  #define RETURN_TYPE_collectionNode uSQL::SQLCollection *

  uSQL::SQLWhere * whereSection;
  #undef  RETURN_TYPE_whereSection
  #define RETURN_TYPE_whereSection uSQL::SQLWhere *

  /* Initialize rule variables
   */


      isAsync = false;
      whereSection = NULL;
    
  {
    // SQL.g:432:2: ( (isAsync= sync_operator )? DELETE FROM collectionNode= collection_section (whereSection= where_section )? )
    // SQL.g:432:4: (isAsync= sync_operator )? DELETE FROM collectionNode= collection_section (whereSection= where_section )?
    {
      // SQL.g:432:4: (isAsync= sync_operator )?
      {
        int alt26=2;
        switch ( LA(1) )
        {
          case ASYNC:
          case SYNC:
            {
              alt26=1;
            }
            break;
        }

        switch (alt26)
        {
        case 1:
          // SQL.g:432:5: isAsync= sync_operator
          {
            FOLLOWPUSH(FOLLOW_sync_operator_in_delete_stmt961);
            isAsync=sync_operator(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
              goto ruledelete_stmtEx;
            }


          }
          break;

        }
      }

       MATCHT(DELETE, &FOLLOW_DELETE_in_delete_stmt965);
      if  (HASEXCEPTION())
      {
        goto ruledelete_stmtEx;
      }


       MATCHT(FROM, &FOLLOW_FROM_in_delete_stmt967);
      if  (HASEXCEPTION())
      {
        goto ruledelete_stmtEx;
      }


      FOLLOWPUSH(FOLLOW_collection_section_in_delete_stmt971);
      collectionNode=collection_section(ctx);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto ruledelete_stmtEx;
      }


      // SQL.g:432:75: (whereSection= where_section )?
      {
        int alt27=2;
        switch ( LA(1) )
        {
          case WHERE:
            {
              alt27=1;
            }
            break;
        }

        switch (alt27)
        {
        case 1:
          // SQL.g:432:76: whereSection= where_section
          {
            FOLLOWPUSH(FOLLOW_where_section_in_delete_stmt978);
            whereSection=where_section(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
              goto ruledelete_stmtEx;
            }


          }
          break;

        }
      }

      {

            // DELETE
            uSQL::SQLDelete *sqlCmd = new uSQL::SQLDelete();
            sqlCmd->setAsyncEnabled(isAsync);
            sqlStmt->addChildNode(sqlCmd);

            // Collection
            uSQL::SQLCollections *sqlCollections = new uSQL::SQLCollections();
            sqlStmt->addChildNode(sqlCollections);
            sqlCollections->addChildNode(collectionNode);
            
            // WHERE
            if (whereSection)     
              sqlStmt->addChildNode(whereSection);
          
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto ruledelete_stmtEx; /* Prevent compiler warnings */
  ruledelete_stmtEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return ;
}
/* $ANTLR end delete_stmt */

/**
 * $ANTLR start expression
 * SQL.g:457:1: expression[uSQL::SQLNode *parentNode] : expression_list[sqlNodeList] ;
 */
static void
expression(pSQLParser ctx, uSQL::SQLNode *parentNode)
{
  /* Initialize rule variables
   */


      uSQL::SQLNodeList sqlNodeList;
    
  {
    // SQL.g:461:3: ( expression_list[sqlNodeList] )
    // SQL.g:461:5: expression_list[sqlNodeList]
    {
      FOLLOWPUSH(FOLLOW_expression_list_in_expression1007);
      expression_list(ctx, sqlNodeList);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto ruleexpressionEx;
      }


      {

            CG_ANTLR3_SQLNODE_ADDNODES(parentNode, &sqlNodeList);
            
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto ruleexpressionEx; /* Prevent compiler warnings */
  ruleexpressionEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return ;
}
/* $ANTLR end expression */

/**
 * $ANTLR start expression_list
 * SQL.g:466:1: expression_list[uSQL::SQLNodeList &sqlNodeList] : (sqlExpr= expression_literal |sqlFunc= expression_function | expression_binary_operator[sqlNodeList] ( expression_logic_operator[sqlNodeList] expression_binary_operator[sqlNodeList] )* | '(' expression_array[sqlNodeList] ( COMMA expression_array[sqlNodeList] )* ')' | '{' ( expression_dictionary[sqlNodeList] ) ( COMMA expression_dictionary[sqlNodeList] )* '}' | '[' expression_array[sqlNodeList] ( COMMA expression_array[sqlNodeList] )* ']' );
 */
static void
expression_list(pSQLParser ctx, uSQL::SQLNodeList &sqlNodeList)
{
  uSQL::SQLExpression * sqlExpr;
  #undef  RETURN_TYPE_sqlExpr
  #define RETURN_TYPE_sqlExpr uSQL::SQLExpression *

  uSQL::SQLFunction * sqlFunc;
  #undef  RETURN_TYPE_sqlFunc
  #define RETURN_TYPE_sqlFunc uSQL::SQLFunction *

  /* Initialize rule variables
   */

  {
    {
      //  SQL.g:467:3: (sqlExpr= expression_literal |sqlFunc= expression_function | expression_binary_operator[sqlNodeList] ( expression_logic_operator[sqlNodeList] expression_binary_operator[sqlNodeList] )* | '(' expression_array[sqlNodeList] ( COMMA expression_array[sqlNodeList] )* ')' | '{' ( expression_dictionary[sqlNodeList] ) ( COMMA expression_dictionary[sqlNodeList] )* '}' | '[' expression_array[sqlNodeList] ( COMMA expression_array[sqlNodeList] )* ']' )

      ANTLR3_UINT32 alt32;

      alt32=6;

      switch ( LA(1) )
      {
      case ID:
        {
          switch ( LA(2) )
          {
          case 94:
            {
              alt32=2;
            }
            break;
          case EOF:
          case AS:
          case COMMA:
          case CURRENT_DATE:
          case CURRENT_TIME:
          case CURRENT_TIMESTAMP:
          case F:
          case FLOAT:
          case FROM:
          case GROUP:
          case HAVING:
          case ID:
          case LIMIT:
          case NIL:
          case NUMBER:
          case ORDER:
          case SEMICOLON:
          case STRING:
          case T:
          case 95:
            {
              alt32=1;
            }
            break;
          case DOUBLE_EQ:
          case GE:
          case GT:
          case LE:
          case NOTEQ:
          case OP_LT:
          case SINGLE_EQ:
            {
              alt32=3;
            }
            break;

          default:
            CONSTRUCTEX();
            EXCEPTION->type     = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message    = (void *)"";
            EXCEPTION->decisionNum  = 32;
            EXCEPTION->state    = 1;


            goto ruleexpression_listEx;

          }

        }
        break;
      case NUMBER:
        {
          switch ( LA(2) )
          {
          case EOF:
          case AS:
          case COMMA:
          case CURRENT_DATE:
          case CURRENT_TIME:
          case CURRENT_TIMESTAMP:
          case F:
          case FLOAT:
          case FROM:
          case GROUP:
          case HAVING:
          case ID:
          case LIMIT:
          case NIL:
          case NUMBER:
          case ORDER:
          case SEMICOLON:
          case STRING:
          case T:
          case 95:
            {
              alt32=1;
            }
            break;
          case DOUBLE_EQ:
          case GE:
          case GT:
          case LE:
          case NOTEQ:
          case OP_LT:
          case SINGLE_EQ:
            {
              alt32=3;
            }
            break;

          default:
            CONSTRUCTEX();
            EXCEPTION->type     = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message    = (void *)"";
            EXCEPTION->decisionNum  = 32;
            EXCEPTION->state    = 2;


            goto ruleexpression_listEx;

          }

        }
        break;
      case FLOAT:
        {
          switch ( LA(2) )
          {
          case EOF:
          case AS:
          case COMMA:
          case CURRENT_DATE:
          case CURRENT_TIME:
          case CURRENT_TIMESTAMP:
          case F:
          case FLOAT:
          case FROM:
          case GROUP:
          case HAVING:
          case ID:
          case LIMIT:
          case NIL:
          case NUMBER:
          case ORDER:
          case SEMICOLON:
          case STRING:
          case T:
          case 95:
            {
              alt32=1;
            }
            break;
          case DOUBLE_EQ:
          case GE:
          case GT:
          case LE:
          case NOTEQ:
          case OP_LT:
          case SINGLE_EQ:
            {
              alt32=3;
            }
            break;

          default:
            CONSTRUCTEX();
            EXCEPTION->type     = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message    = (void *)"";
            EXCEPTION->decisionNum  = 32;
            EXCEPTION->state    = 3;


            goto ruleexpression_listEx;

          }

        }
        break;
      case STRING:
        {
          switch ( LA(2) )
          {
          case EOF:
          case AS:
          case COMMA:
          case CURRENT_DATE:
          case CURRENT_TIME:
          case CURRENT_TIMESTAMP:
          case F:
          case FLOAT:
          case FROM:
          case GROUP:
          case HAVING:
          case ID:
          case LIMIT:
          case NIL:
          case NUMBER:
          case ORDER:
          case SEMICOLON:
          case STRING:
          case T:
          case 95:
            {
              alt32=1;
            }
            break;
          case DOUBLE_EQ:
          case GE:
          case GT:
          case LE:
          case NOTEQ:
          case OP_LT:
          case SINGLE_EQ:
            {
              alt32=3;
            }
            break;

          default:
            CONSTRUCTEX();
            EXCEPTION->type     = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message    = (void *)"";
            EXCEPTION->decisionNum  = 32;
            EXCEPTION->state    = 4;


            goto ruleexpression_listEx;

          }

        }
        break;
      case T:
        {
          switch ( LA(2) )
          {
          case R:
            {
              switch ( LA(3) )
              {
              case U:
                {
                  switch ( LA(4) )
                  {
                  case E:
                    {
                      switch ( LA(5) )
                      {
                      case EOF:
                      case AS:
                      case COMMA:
                      case CURRENT_DATE:
                      case CURRENT_TIME:
                      case CURRENT_TIMESTAMP:
                      case F:
                      case FLOAT:
                      case FROM:
                      case GROUP:
                      case HAVING:
                      case ID:
                      case LIMIT:
                      case NIL:
                      case NUMBER:
                      case ORDER:
                      case SEMICOLON:
                      case STRING:
                      case T:
                      case 95:
                        {
                          alt32=1;
                        }
                        break;
                      case DOUBLE_EQ:
                      case GE:
                      case GT:
                      case LE:
                      case NOTEQ:
                      case OP_LT:
                      case SINGLE_EQ:
                        {
                          alt32=3;
                        }
                        break;

                      default:
                        CONSTRUCTEX();
                        EXCEPTION->type     = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message    = (void *)"";
                        EXCEPTION->decisionNum  = 32;
                        EXCEPTION->state    = 21;


                        goto ruleexpression_listEx;

                      }

                    }
                    break;

                  default:
                    CONSTRUCTEX();
                    EXCEPTION->type     = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message    = (void *)"";
                    EXCEPTION->decisionNum  = 32;
                    EXCEPTION->state    = 19;


                    goto ruleexpression_listEx;

                  }

                }
                break;

              default:
                CONSTRUCTEX();
                EXCEPTION->type     = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message    = (void *)"";
                EXCEPTION->decisionNum  = 32;
                EXCEPTION->state    = 17;


                goto ruleexpression_listEx;

              }

            }
            break;

          default:
            CONSTRUCTEX();
            EXCEPTION->type     = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message    = (void *)"";
            EXCEPTION->decisionNum  = 32;
            EXCEPTION->state    = 5;


            goto ruleexpression_listEx;

          }

        }
        break;
      case F:
        {
          switch ( LA(2) )
          {
          case A:
            {
              switch ( LA(3) )
              {
              case L:
                {
                  switch ( LA(4) )
                  {
                  case S:
                    {
                      switch ( LA(5) )
                      {
                      case E:
                        {
                          switch ( LA(6) )
                          {
                          case EOF:
                          case AS:
                          case COMMA:
                          case CURRENT_DATE:
                          case CURRENT_TIME:
                          case CURRENT_TIMESTAMP:
                          case F:
                          case FLOAT:
                          case FROM:
                          case GROUP:
                          case HAVING:
                          case ID:
                          case LIMIT:
                          case NIL:
                          case NUMBER:
                          case ORDER:
                          case SEMICOLON:
                          case STRING:
                          case T:
                          case 95:
                            {
                              alt32=1;
                            }
                            break;
                          case DOUBLE_EQ:
                          case GE:
                          case GT:
                          case LE:
                          case NOTEQ:
                          case OP_LT:
                          case SINGLE_EQ:
                            {
                              alt32=3;
                            }
                            break;

                          default:
                            CONSTRUCTEX();
                            EXCEPTION->type     = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                            EXCEPTION->message    = (void *)"";
                            EXCEPTION->decisionNum  = 32;
                            EXCEPTION->state    = 23;


                            goto ruleexpression_listEx;

                          }

                        }
                        break;

                      default:
                        CONSTRUCTEX();
                        EXCEPTION->type     = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                        EXCEPTION->message    = (void *)"";
                        EXCEPTION->decisionNum  = 32;
                        EXCEPTION->state    = 22;


                        goto ruleexpression_listEx;

                      }

                    }
                    break;

                  default:
                    CONSTRUCTEX();
                    EXCEPTION->type     = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message    = (void *)"";
                    EXCEPTION->decisionNum  = 32;
                    EXCEPTION->state    = 20;


                    goto ruleexpression_listEx;

                  }

                }
                break;

              default:
                CONSTRUCTEX();
                EXCEPTION->type     = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message    = (void *)"";
                EXCEPTION->decisionNum  = 32;
                EXCEPTION->state    = 18;


                goto ruleexpression_listEx;

              }

            }
            break;

          default:
            CONSTRUCTEX();
            EXCEPTION->type     = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message    = (void *)"";
            EXCEPTION->decisionNum  = 32;
            EXCEPTION->state    = 6;


            goto ruleexpression_listEx;

          }

        }
        break;
      case NIL:
        {
          switch ( LA(2) )
          {
          case EOF:
          case AS:
          case COMMA:
          case CURRENT_DATE:
          case CURRENT_TIME:
          case CURRENT_TIMESTAMP:
          case F:
          case FLOAT:
          case FROM:
          case GROUP:
          case HAVING:
          case ID:
          case LIMIT:
          case NIL:
          case NUMBER:
          case ORDER:
          case SEMICOLON:
          case STRING:
          case T:
          case 95:
            {
              alt32=1;
            }
            break;
          case DOUBLE_EQ:
          case GE:
          case GT:
          case LE:
          case NOTEQ:
          case OP_LT:
          case SINGLE_EQ:
            {
              alt32=3;
            }
            break;

          default:
            CONSTRUCTEX();
            EXCEPTION->type     = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message    = (void *)"";
            EXCEPTION->decisionNum  = 32;
            EXCEPTION->state    = 7;


            goto ruleexpression_listEx;

          }

        }
        break;
      case CURRENT_TIME:
        {
          switch ( LA(2) )
          {
          case EOF:
          case AS:
          case COMMA:
          case CURRENT_DATE:
          case CURRENT_TIME:
          case CURRENT_TIMESTAMP:
          case F:
          case FLOAT:
          case FROM:
          case GROUP:
          case HAVING:
          case ID:
          case LIMIT:
          case NIL:
          case NUMBER:
          case ORDER:
          case SEMICOLON:
          case STRING:
          case T:
          case 95:
            {
              alt32=1;
            }
            break;
          case DOUBLE_EQ:
          case GE:
          case GT:
          case LE:
          case NOTEQ:
          case OP_LT:
          case SINGLE_EQ:
            {
              alt32=3;
            }
            break;

          default:
            CONSTRUCTEX();
            EXCEPTION->type     = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message    = (void *)"";
            EXCEPTION->decisionNum  = 32;
            EXCEPTION->state    = 8;


            goto ruleexpression_listEx;

          }

        }
        break;
      case CURRENT_DATE:
        {
          switch ( LA(2) )
          {
          case EOF:
          case AS:
          case COMMA:
          case CURRENT_DATE:
          case CURRENT_TIME:
          case CURRENT_TIMESTAMP:
          case F:
          case FLOAT:
          case FROM:
          case GROUP:
          case HAVING:
          case ID:
          case LIMIT:
          case NIL:
          case NUMBER:
          case ORDER:
          case SEMICOLON:
          case STRING:
          case T:
          case 95:
            {
              alt32=1;
            }
            break;
          case DOUBLE_EQ:
          case GE:
          case GT:
          case LE:
          case NOTEQ:
          case OP_LT:
          case SINGLE_EQ:
            {
              alt32=3;
            }
            break;

          default:
            CONSTRUCTEX();
            EXCEPTION->type     = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message    = (void *)"";
            EXCEPTION->decisionNum  = 32;
            EXCEPTION->state    = 9;


            goto ruleexpression_listEx;

          }

        }
        break;
      case CURRENT_TIMESTAMP:
        {
          switch ( LA(2) )
          {
          case EOF:
          case AS:
          case COMMA:
          case CURRENT_DATE:
          case CURRENT_TIME:
          case CURRENT_TIMESTAMP:
          case F:
          case FLOAT:
          case FROM:
          case GROUP:
          case HAVING:
          case ID:
          case LIMIT:
          case NIL:
          case NUMBER:
          case ORDER:
          case SEMICOLON:
          case STRING:
          case T:
          case 95:
            {
              alt32=1;
            }
            break;
          case DOUBLE_EQ:
          case GE:
          case GT:
          case LE:
          case NOTEQ:
          case OP_LT:
          case SINGLE_EQ:
            {
              alt32=3;
            }
            break;

          default:
            CONSTRUCTEX();
            EXCEPTION->type     = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message    = (void *)"";
            EXCEPTION->decisionNum  = 32;
            EXCEPTION->state    = 10;


            goto ruleexpression_listEx;

          }

        }
        break;
      case 94:
        {
          alt32=4;
        }
        break;
      case 99:
        {
          alt32=5;
        }
        break;
      case 97:
        {
          alt32=6;
        }
        break;

      default:
        CONSTRUCTEX();
        EXCEPTION->type     = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        EXCEPTION->message    = (void *)"";
        EXCEPTION->decisionNum  = 32;
        EXCEPTION->state    = 0;


        goto ruleexpression_listEx;

      }

      switch (alt32)
      {
      case 1:
        // SQL.g:467:5: sqlExpr= expression_literal
        {
          FOLLOWPUSH(FOLLOW_expression_literal_in_expression_list1026);
          sqlExpr=expression_literal(ctx);

          FOLLOWPOP();
          if  (HASEXCEPTION())
          {
            goto ruleexpression_listEx;
          }


          {

                sqlNodeList.push_back(sqlExpr);
                
          }


        }
        break;
      case 2:
        // SQL.g:470:4: sqlFunc= expression_function
        {
          FOLLOWPUSH(FOLLOW_expression_function_in_expression_list1035);
          sqlFunc=expression_function(ctx);

          FOLLOWPOP();
          if  (HASEXCEPTION())
          {
            goto ruleexpression_listEx;
          }


          {

                sqlNodeList.push_back(sqlFunc);
                
          }


        }
        break;
      case 3:
        // SQL.g:473:4: expression_binary_operator[sqlNodeList] ( expression_logic_operator[sqlNodeList] expression_binary_operator[sqlNodeList] )*
        {
          FOLLOWPUSH(FOLLOW_expression_binary_operator_in_expression_list1042);
          expression_binary_operator(ctx, sqlNodeList);

          FOLLOWPOP();
          if  (HASEXCEPTION())
          {
            goto ruleexpression_listEx;
          }


          // SQL.g:473:44: ( expression_logic_operator[sqlNodeList] expression_binary_operator[sqlNodeList] )*

          for (;;)
          {
            int alt28=2;
            switch ( LA(1) )
            {
            case AND:
            case OR:
              {
                alt28=1;
              }
              break;

            }

            switch (alt28)
            {
            case 1:
              // SQL.g:473:45: expression_logic_operator[sqlNodeList] expression_binary_operator[sqlNodeList]
              {
                FOLLOWPUSH(FOLLOW_expression_logic_operator_in_expression_list1046);
                expression_logic_operator(ctx, sqlNodeList);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                  goto ruleexpression_listEx;
                }


                FOLLOWPUSH(FOLLOW_expression_binary_operator_in_expression_list1049);
                expression_binary_operator(ctx, sqlNodeList);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                  goto ruleexpression_listEx;
                }


              }
              break;

            default:
              goto loop28;  /* break out of the loop */
              break;
            }
          }
          loop28: ; /* Jump out to here if this rule does not match */


          {

                sqlNodeList.sort();
                
          }


        }
        break;
      case 4:
        // SQL.g:476:4: '(' expression_array[sqlNodeList] ( COMMA expression_array[sqlNodeList] )* ')'
        {
           MATCHT(94, &FOLLOW_94_in_expression_list1059);
          if  (HASEXCEPTION())
          {
            goto ruleexpression_listEx;
          }


          FOLLOWPUSH(FOLLOW_expression_array_in_expression_list1061);
          expression_array(ctx, sqlNodeList);

          FOLLOWPOP();
          if  (HASEXCEPTION())
          {
            goto ruleexpression_listEx;
          }


          // SQL.g:476:38: ( COMMA expression_array[sqlNodeList] )*

          for (;;)
          {
            int alt29=2;
            switch ( LA(1) )
            {
            case COMMA:
              {
                alt29=1;
              }
              break;

            }

            switch (alt29)
            {
            case 1:
              // SQL.g:476:39: COMMA expression_array[sqlNodeList]
              {
                 MATCHT(COMMA, &FOLLOW_COMMA_in_expression_list1065);
                if  (HASEXCEPTION())
                {
                  goto ruleexpression_listEx;
                }


                FOLLOWPUSH(FOLLOW_expression_array_in_expression_list1067);
                expression_array(ctx, sqlNodeList);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                  goto ruleexpression_listEx;
                }


              }
              break;

            default:
              goto loop29;  /* break out of the loop */
              break;
            }
          }
          loop29: ; /* Jump out to here if this rule does not match */


           MATCHT(95, &FOLLOW_95_in_expression_list1073);
          if  (HASEXCEPTION())
          {
            goto ruleexpression_listEx;
          }


        }
        break;
      case 5:
        // SQL.g:477:4: '{' ( expression_dictionary[sqlNodeList] ) ( COMMA expression_dictionary[sqlNodeList] )* '}'
        {
           MATCHT(99, &FOLLOW_99_in_expression_list1078);
          if  (HASEXCEPTION())
          {
            goto ruleexpression_listEx;
          }


          // SQL.g:477:8: ( expression_dictionary[sqlNodeList] )
          // SQL.g:477:9: expression_dictionary[sqlNodeList]
          {
            FOLLOWPUSH(FOLLOW_expression_dictionary_in_expression_list1081);
            expression_dictionary(ctx, sqlNodeList);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
              goto ruleexpression_listEx;
            }


          }


          // SQL.g:477:45: ( COMMA expression_dictionary[sqlNodeList] )*

          for (;;)
          {
            int alt30=2;
            switch ( LA(1) )
            {
            case COMMA:
              {
                alt30=1;
              }
              break;

            }

            switch (alt30)
            {
            case 1:
              // SQL.g:477:46: COMMA expression_dictionary[sqlNodeList]
              {
                 MATCHT(COMMA, &FOLLOW_COMMA_in_expression_list1086);
                if  (HASEXCEPTION())
                {
                  goto ruleexpression_listEx;
                }


                FOLLOWPUSH(FOLLOW_expression_dictionary_in_expression_list1088);
                expression_dictionary(ctx, sqlNodeList);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                  goto ruleexpression_listEx;
                }


              }
              break;

            default:
              goto loop30;  /* break out of the loop */
              break;
            }
          }
          loop30: ; /* Jump out to here if this rule does not match */


           MATCHT(100, &FOLLOW_100_in_expression_list1093);
          if  (HASEXCEPTION())
          {
            goto ruleexpression_listEx;
          }


        }
        break;
      case 6:
        // SQL.g:478:4: '[' expression_array[sqlNodeList] ( COMMA expression_array[sqlNodeList] )* ']'
        {
           MATCHT(97, &FOLLOW_97_in_expression_list1098);
          if  (HASEXCEPTION())
          {
            goto ruleexpression_listEx;
          }


          FOLLOWPUSH(FOLLOW_expression_array_in_expression_list1100);
          expression_array(ctx, sqlNodeList);

          FOLLOWPOP();
          if  (HASEXCEPTION())
          {
            goto ruleexpression_listEx;
          }


          // SQL.g:478:38: ( COMMA expression_array[sqlNodeList] )*

          for (;;)
          {
            int alt31=2;
            switch ( LA(1) )
            {
            case COMMA:
              {
                alt31=1;
              }
              break;

            }

            switch (alt31)
            {
            case 1:
              // SQL.g:478:39: COMMA expression_array[sqlNodeList]
              {
                 MATCHT(COMMA, &FOLLOW_COMMA_in_expression_list1104);
                if  (HASEXCEPTION())
                {
                  goto ruleexpression_listEx;
                }


                FOLLOWPUSH(FOLLOW_expression_array_in_expression_list1106);
                expression_array(ctx, sqlNodeList);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                  goto ruleexpression_listEx;
                }


              }
              break;

            default:
              goto loop31;  /* break out of the loop */
              break;
            }
          }
          loop31: ; /* Jump out to here if this rule does not match */


           MATCHT(98, &FOLLOW_98_in_expression_list1112);
          if  (HASEXCEPTION())
          {
            goto ruleexpression_listEx;
          }


        }
        break;

      }
    }
  }

  // This is where rules clean up and exit
  //
  goto ruleexpression_listEx; /* Prevent compiler warnings */
  ruleexpression_listEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return ;
}
/* $ANTLR end expression_list */

/**
 * $ANTLR start expression_literal
 * SQL.g:481:1: expression_literal returns [uSQL::SQLExpression *sqlExpr] : expression_literal_value[sqlExpr] ;
 */
static uSQL::SQLExpression *
expression_literal(pSQLParser ctx)
{
  uSQL::SQLExpression * sqlExpr;


  /* Initialize rule variables
   */


      sqlExpr = new uSQL::SQLExpression();
    
  {
    // SQL.g:485:3: ( expression_literal_value[sqlExpr] )
    // SQL.g:485:5: expression_literal_value[sqlExpr]
    {
      FOLLOWPUSH(FOLLOW_expression_literal_value_in_expression_literal1134);
      expression_literal_value(ctx, sqlExpr);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto ruleexpression_literalEx;
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto ruleexpression_literalEx; /* Prevent compiler warnings */
  ruleexpression_literalEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return sqlExpr;
}
/* $ANTLR end expression_literal */

/**
 * $ANTLR start expression_literal_value
 * SQL.g:488:1: expression_literal_value[uSQL::SQLExpression *sqlExpr] : ( property_literal | integer_literal | real_literal | string_literal | true_literal | false_literal | NIL | CURRENT_TIME | CURRENT_DATE | CURRENT_TIMESTAMP );
 */
static void
expression_literal_value(pSQLParser ctx, uSQL::SQLExpression *sqlExpr)
{
  SQLParser_property_literal_return property_literal5;
  #undef  RETURN_TYPE_property_literal5
  #define RETURN_TYPE_property_literal5 SQLParser_property_literal_return

  SQLParser_integer_literal_return integer_literal6;
  #undef  RETURN_TYPE_integer_literal6
  #define RETURN_TYPE_integer_literal6 SQLParser_integer_literal_return

  SQLParser_real_literal_return real_literal7;
  #undef  RETURN_TYPE_real_literal7
  #define RETURN_TYPE_real_literal7 SQLParser_real_literal_return

  SQLParser_string_literal_return string_literal8;
  #undef  RETURN_TYPE_string_literal8
  #define RETURN_TYPE_string_literal8 SQLParser_string_literal_return

  SQLParser_true_literal_return true_literal9;
  #undef  RETURN_TYPE_true_literal9
  #define RETURN_TYPE_true_literal9 SQLParser_true_literal_return

  SQLParser_false_literal_return false_literal10;
  #undef  RETURN_TYPE_false_literal10
  #define RETURN_TYPE_false_literal10 SQLParser_false_literal_return

  /* Initialize rule variables
   */

  {
    {
      //  SQL.g:489:3: ( property_literal | integer_literal | real_literal | string_literal | true_literal | false_literal | NIL | CURRENT_TIME | CURRENT_DATE | CURRENT_TIMESTAMP )

      ANTLR3_UINT32 alt33;

      alt33=10;

      switch ( LA(1) )
      {
      case ID:
        {
          alt33=1;
        }
        break;
      case NUMBER:
        {
          alt33=2;
        }
        break;
      case FLOAT:
        {
          alt33=3;
        }
        break;
      case STRING:
        {
          alt33=4;
        }
        break;
      case T:
        {
          alt33=5;
        }
        break;
      case F:
        {
          alt33=6;
        }
        break;
      case NIL:
        {
          alt33=7;
        }
        break;
      case CURRENT_TIME:
        {
          alt33=8;
        }
        break;
      case CURRENT_DATE:
        {
          alt33=9;
        }
        break;
      case CURRENT_TIMESTAMP:
        {
          alt33=10;
        }
        break;

      default:
        CONSTRUCTEX();
        EXCEPTION->type     = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        EXCEPTION->message    = (void *)"";
        EXCEPTION->decisionNum  = 33;
        EXCEPTION->state    = 0;


        goto ruleexpression_literal_valueEx;

      }

      switch (alt33)
      {
      case 1:
        // SQL.g:489:5: property_literal
        {
          FOLLOWPUSH(FOLLOW_property_literal_in_expression_literal_value1150);
          property_literal5=property_literal(ctx);

          FOLLOWPOP();
          if  (HASEXCEPTION())
          {
            goto ruleexpression_literal_valueEx;
          }


          {

                sqlExpr->setLiteralType(uSQL::SQLExpression::PROPERTY);
                sqlExpr->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, property_literal5.start, property_literal5.stop))
            ));
                
          }


        }
        break;
      case 2:
        // SQL.g:493:4: integer_literal
        {
          FOLLOWPUSH(FOLLOW_integer_literal_in_expression_literal_value1157);
          integer_literal6=integer_literal(ctx);

          FOLLOWPOP();
          if  (HASEXCEPTION())
          {
            goto ruleexpression_literal_valueEx;
          }


          {

                sqlExpr->setLiteralType(uSQL::SQLExpression::INTEGER);
                sqlExpr->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, integer_literal6.start, integer_literal6.stop))
            ));
                
          }


        }
        break;
      case 3:
        // SQL.g:497:4: real_literal
        {
          FOLLOWPUSH(FOLLOW_real_literal_in_expression_literal_value1164);
          real_literal7=real_literal(ctx);

          FOLLOWPOP();
          if  (HASEXCEPTION())
          {
            goto ruleexpression_literal_valueEx;
          }


          {

                sqlExpr->setLiteralType(uSQL::SQLExpression::REAL);
                sqlExpr->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, real_literal7.start, real_literal7.stop))
            ));
                
          }


        }
        break;
      case 4:
        // SQL.g:501:4: string_literal
        {
          FOLLOWPUSH(FOLLOW_string_literal_in_expression_literal_value1171);
          string_literal8=string_literal(ctx);

          FOLLOWPOP();
          if  (HASEXCEPTION())
          {
            goto ruleexpression_literal_valueEx;
          }


          {

                sqlExpr->setLiteralType(1/*uSQL::SQLExpression::STRING*/);
                sqlExpr->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, string_literal8.start, string_literal8.stop))
            ));
                
          }


        }
        break;
      case 5:
        // SQL.g:505:4: true_literal
        {
          FOLLOWPUSH(FOLLOW_true_literal_in_expression_literal_value1178);
          true_literal9=true_literal(ctx);

          FOLLOWPOP();
          if  (HASEXCEPTION())
          {
            goto ruleexpression_literal_valueEx;
          }


          {

                sqlExpr->setLiteralType(uSQL::SQLExpression::BOOLEAN);
                sqlExpr->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, true_literal9.start, true_literal9.stop))
            ));
                
          }


        }
        break;
      case 6:
        // SQL.g:509:4: false_literal
        {
          FOLLOWPUSH(FOLLOW_false_literal_in_expression_literal_value1185);
          false_literal10=false_literal(ctx);

          FOLLOWPOP();
          if  (HASEXCEPTION())
          {
            goto ruleexpression_literal_valueEx;
          }


          {

                sqlExpr->setLiteralType(uSQL::SQLExpression::BOOLEAN);
                sqlExpr->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, false_literal10.start, false_literal10.stop))
            ));
                
          }


        }
        break;
      case 7:
        // SQL.g:513:4: NIL
        {
           MATCHT(NIL, &FOLLOW_NIL_in_expression_literal_value1192);
          if  (HASEXCEPTION())
          {
            goto ruleexpression_literal_valueEx;
          }


          {

                sqlExpr->setLiteralType(10/*uSQL::SQLExpression::NIL*/);
                
          }


        }
        break;
      case 8:
        // SQL.g:516:4: CURRENT_TIME
        {
           MATCHT(CURRENT_TIME, &FOLLOW_CURRENT_TIME_in_expression_literal_value1199);
          if  (HASEXCEPTION())
          {
            goto ruleexpression_literal_valueEx;
          }


          {

                sqlExpr->setLiteralType(11/*uSQL::SQLExpression::CURRENT_TIME*/);
                
          }


        }
        break;
      case 9:
        // SQL.g:519:4: CURRENT_DATE
        {
           MATCHT(CURRENT_DATE, &FOLLOW_CURRENT_DATE_in_expression_literal_value1206);
          if  (HASEXCEPTION())
          {
            goto ruleexpression_literal_valueEx;
          }


          {

                sqlExpr->setLiteralType(12/*uSQL::SQLExpression::CURRENT_DATE*/);
                
          }


        }
        break;
      case 10:
        // SQL.g:522:4: CURRENT_TIMESTAMP
        {
           MATCHT(CURRENT_TIMESTAMP, &FOLLOW_CURRENT_TIMESTAMP_in_expression_literal_value1213);
          if  (HASEXCEPTION())
          {
            goto ruleexpression_literal_valueEx;
          }


          {

                sqlExpr->setLiteralType(13/*uSQL::SQLExpression::CURRENT_TIMESTAMP*/);
                
          }


        }
        break;

      }
    }
  }

  // This is where rules clean up and exit
  //
  goto ruleexpression_literal_valueEx; /* Prevent compiler warnings */
  ruleexpression_literal_valueEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return ;
}
/* $ANTLR end expression_literal_value */

/**
 * $ANTLR start expression_dictionary
 * SQL.g:527:1: expression_dictionary[uSQL::SQLNodeList &sqlNodeList] : name ':' sqlExpr= expression_literal ;
 */
static void
expression_dictionary(pSQLParser ctx, uSQL::SQLNodeList &sqlNodeList)
{
  uSQL::SQLExpression * sqlExpr;
  #undef  RETURN_TYPE_sqlExpr
  #define RETURN_TYPE_sqlExpr uSQL::SQLExpression *

  SQLParser_name_return name11;
  #undef  RETURN_TYPE_name11
  #define RETURN_TYPE_name11 SQLParser_name_return

  /* Initialize rule variables
   */

  {
    // SQL.g:528:2: ( name ':' sqlExpr= expression_literal )
    // SQL.g:528:4: name ':' sqlExpr= expression_literal
    {
      FOLLOWPUSH(FOLLOW_name_in_expression_dictionary1228);
      name11=name(ctx);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto ruleexpression_dictionaryEx;
      }


       MATCHT(96, &FOLLOW_96_in_expression_dictionary1230);
      if  (HASEXCEPTION())
      {
        goto ruleexpression_dictionaryEx;
      }


      FOLLOWPUSH(FOLLOW_expression_literal_in_expression_dictionary1234);
      sqlExpr=expression_literal(ctx);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto ruleexpression_dictionaryEx;
      }


      {

            uSQL::SQLSet *dictNode = new uSQL::SQLSet();
            dictNode->set(sqlExpr);
            dictNode->setName(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, name11.start, name11.stop))
        ));
            sqlNodeList.push_back(dictNode);
            delete sqlExpr;
            
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto ruleexpression_dictionaryEx; /* Prevent compiler warnings */
  ruleexpression_dictionaryEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return ;
}
/* $ANTLR end expression_dictionary */

/**
 * $ANTLR start dictionary_literal
 * SQL.g:537:1: dictionary_literal[uSQL::SQLExpression *parentSqlExpr] : name ':' sqlExpr= expression_literal ;
 */
static void
dictionary_literal(pSQLParser ctx, uSQL::SQLExpression *parentSqlExpr)
{
  uSQL::SQLExpression * sqlExpr;
  #undef  RETURN_TYPE_sqlExpr
  #define RETURN_TYPE_sqlExpr uSQL::SQLExpression *

  SQLParser_name_return name12;
  #undef  RETURN_TYPE_name12
  #define RETURN_TYPE_name12 SQLParser_name_return

  /* Initialize rule variables
   */

  {
    // SQL.g:538:2: ( name ':' sqlExpr= expression_literal )
    // SQL.g:538:4: name ':' sqlExpr= expression_literal
    {
      FOLLOWPUSH(FOLLOW_name_in_dictionary_literal1249);
      name12=name(ctx);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto ruledictionary_literalEx;
      }


       MATCHT(96, &FOLLOW_96_in_dictionary_literal1251);
      if  (HASEXCEPTION())
      {
        goto ruledictionary_literalEx;
      }


      FOLLOWPUSH(FOLLOW_expression_literal_in_dictionary_literal1255);
      sqlExpr=expression_literal(ctx);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto ruledictionary_literalEx;
      }


      {

            uSQL::SQLSet *dictNode = new uSQL::SQLSet();
            dictNode->set(sqlExpr);
            dictNode->setName(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, name12.start, name12.stop))
        ));
            parentSqlExpr->addExpression(dictNode);
            delete sqlExpr;
            
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto ruledictionary_literalEx; /* Prevent compiler warnings */
  ruledictionary_literalEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return ;
}
/* $ANTLR end dictionary_literal */

/**
 * $ANTLR start expression_array
 * SQL.g:547:1: expression_array[uSQL::SQLNodeList &sqlNodeList] : sqlExpr= expression_literal ;
 */
static void
expression_array(pSQLParser ctx, uSQL::SQLNodeList &sqlNodeList)
{
  uSQL::SQLExpression * sqlExpr;
  #undef  RETURN_TYPE_sqlExpr
  #define RETURN_TYPE_sqlExpr uSQL::SQLExpression *

  /* Initialize rule variables
   */

  {
    // SQL.g:548:2: (sqlExpr= expression_literal )
    // SQL.g:548:4: sqlExpr= expression_literal
    {
      FOLLOWPUSH(FOLLOW_expression_literal_in_expression_array1272);
      sqlExpr=expression_literal(ctx);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto ruleexpression_arrayEx;
      }


      {

            sqlNodeList.push_back(sqlExpr);
            
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto ruleexpression_arrayEx; /* Prevent compiler warnings */
  ruleexpression_arrayEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return ;
}
/* $ANTLR end expression_array */

/**
 * $ANTLR start array_literal
 * SQL.g:553:1: array_literal[uSQL::SQLExpression *parentSqlExpr] : sqlExpr= expression_literal ;
 */
static void
array_literal(pSQLParser ctx, uSQL::SQLExpression *parentSqlExpr)
{
  uSQL::SQLExpression * sqlExpr;
  #undef  RETURN_TYPE_sqlExpr
  #define RETURN_TYPE_sqlExpr uSQL::SQLExpression *

  /* Initialize rule variables
   */

  {
    // SQL.g:554:2: (sqlExpr= expression_literal )
    // SQL.g:554:4: sqlExpr= expression_literal
    {
      FOLLOWPUSH(FOLLOW_expression_literal_in_array_literal1289);
      sqlExpr=expression_literal(ctx);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto rulearray_literalEx;
      }


      {

            parentSqlExpr->addExpression(sqlExpr);
            
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto rulearray_literalEx; /* Prevent compiler warnings */
  rulearray_literalEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return ;
}
/* $ANTLR end array_literal */

/**
 * $ANTLR start expression_logic_operator
 * SQL.g:559:1: expression_logic_operator[uSQL::SQLNodeList &sqlNodeList] : logicOper= logical_operator ;
 */
static void
expression_logic_operator(pSQLParser ctx, uSQL::SQLNodeList &sqlNodeList)
{
  uSQL::SQLOperator * logicOper;
  #undef  RETURN_TYPE_logicOper
  #define RETURN_TYPE_logicOper uSQL::SQLOperator *

  /* Initialize rule variables
   */

  {
    // SQL.g:560:2: (logicOper= logical_operator )
    // SQL.g:560:4: logicOper= logical_operator
    {
      FOLLOWPUSH(FOLLOW_logical_operator_in_expression_logic_operator1305);
      logicOper=logical_operator(ctx);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto ruleexpression_logic_operatorEx;
      }


      {

            sqlNodeList.push_back(logicOper);
            
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto ruleexpression_logic_operatorEx; /* Prevent compiler warnings */
  ruleexpression_logic_operatorEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return ;
}
/* $ANTLR end expression_logic_operator */

/**
 * $ANTLR start expression_binary_operator
 * SQL.g:565:1: expression_binary_operator[uSQL::SQLNodeList &sqlNodeList] : binOper= expression_operator ;
 */
static void
expression_binary_operator(pSQLParser ctx, uSQL::SQLNodeList &sqlNodeList)
{
  uSQL::SQLOperator * binOper;
  #undef  RETURN_TYPE_binOper
  #define RETURN_TYPE_binOper uSQL::SQLOperator *

  /* Initialize rule variables
   */

  {
    // SQL.g:566:2: (binOper= expression_operator )
    // SQL.g:566:4: binOper= expression_operator
    {
      FOLLOWPUSH(FOLLOW_expression_operator_in_expression_binary_operator1322);
      binOper=expression_operator(ctx);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto ruleexpression_binary_operatorEx;
      }


      {

            sqlNodeList.push_back(binOper);
            
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto ruleexpression_binary_operatorEx; /* Prevent compiler warnings */
  ruleexpression_binary_operatorEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return ;
}
/* $ANTLR end expression_binary_operator */

/**
 * $ANTLR start expression_function
 * SQL.g:572:1: expression_function returns [uSQL::SQLFunction *sqlFunc] : ID '(' ( function_value[sqlFunc] )? ')' ;
 */
static uSQL::SQLFunction *
expression_function(pSQLParser ctx)
{
  uSQL::SQLFunction * sqlFunc;


  pANTLR3_COMMON_TOKEN  ID13;

  /* Initialize rule variables
   */


      sqlFunc = new uSQL::SQLFunction();
      sqlFunc->setLiteralType(uSQL::SQLExpression::FUNCTION);
    
  ID13     = NULL;

  {
    // SQL.g:577:2: ( ID '(' ( function_value[sqlFunc] )? ')' )
    // SQL.g:577:4: ID '(' ( function_value[sqlFunc] )? ')'
    {
      ID13 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_expression_function1346);
      if  (HASEXCEPTION())
      {
        goto ruleexpression_functionEx;
      }


       MATCHT(94, &FOLLOW_94_in_expression_function1348);
      if  (HASEXCEPTION())
      {
        goto ruleexpression_functionEx;
      }


      // SQL.g:577:11: ( function_value[sqlFunc] )?
      {
        int alt34=2;
        switch ( LA(1) )
        {
          case ASTERISK:
          case CURRENT_DATE:
          case CURRENT_TIME:
          case CURRENT_TIMESTAMP:
          case F:
          case FLOAT:
          case ID:
          case NIL:
          case NUMBER:
          case STRING:
          case T:
          case 94:
          case 97:
          case 99:
            {
              alt34=1;
            }
            break;
        }

        switch (alt34)
        {
        case 1:
          // SQL.g:577:12: function_value[sqlFunc]
          {
            FOLLOWPUSH(FOLLOW_function_value_in_expression_function1351);
            function_value(ctx, sqlFunc);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
              goto ruleexpression_functionEx;
            }


          }
          break;

        }
      }

       MATCHT(95, &FOLLOW_95_in_expression_function1356);
      if  (HASEXCEPTION())
      {
        goto ruleexpression_functionEx;
      }


      {

            sqlFunc->setValue(CG_ANTLR3_STRING_2_UTF8((ID13->getText(ID13))));
            
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto ruleexpression_functionEx; /* Prevent compiler warnings */
  ruleexpression_functionEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return sqlFunc;
}
/* $ANTLR end expression_function */

/**
 * $ANTLR start function_name
 * SQL.g:582:1: function_name returns [uSQL::SQLFunction *sqlFunc] : ID ;
 */
static uSQL::SQLFunction *
function_name(pSQLParser ctx)
{
  uSQL::SQLFunction * sqlFunc;


  pANTLR3_COMMON_TOKEN  ID14;

  /* Initialize rule variables
   */


      sqlFunc = new uSQL::SQLFunction();
      sqlFunc->setLiteralType(uSQL::SQLExpression::FUNCTION);
    
  ID14     = NULL;

  {
    // SQL.g:587:2: ( ID )
    // SQL.g:587:4: ID
    {
      ID14 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_function_name1379);
      if  (HASEXCEPTION())
      {
        goto rulefunction_nameEx;
      }


      {

            sqlFunc->setValue(CG_ANTLR3_STRING_2_UTF8((ID14->getText(ID14))));
            
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto rulefunction_nameEx; /* Prevent compiler warnings */
  rulefunction_nameEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return sqlFunc;
}
/* $ANTLR end function_name */

/**
 * $ANTLR start function_value
 * SQL.g:592:1: function_value[uSQL::SQLFunction *sqlFunc] : ( expression[sqlFunc] ( COMMA expression[sqlFunc] )* | ASTERISK );
 */
static void
function_value(pSQLParser ctx, uSQL::SQLFunction *sqlFunc)
{
  /* Initialize rule variables
   */

  {
    {
      //  SQL.g:593:2: ( expression[sqlFunc] ( COMMA expression[sqlFunc] )* | ASTERISK )

      ANTLR3_UINT32 alt36;

      alt36=2;

      switch ( LA(1) )
      {
      case CURRENT_DATE:
      case CURRENT_TIME:
      case CURRENT_TIMESTAMP:
      case F:
      case FLOAT:
      case ID:
      case NIL:
      case NUMBER:
      case STRING:
      case T:
      case 94:
      case 97:
      case 99:
        {
          alt36=1;
        }
        break;
      case ASTERISK:
        {
          alt36=2;
        }
        break;

      default:
        CONSTRUCTEX();
        EXCEPTION->type     = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        EXCEPTION->message    = (void *)"";
        EXCEPTION->decisionNum  = 36;
        EXCEPTION->state    = 0;


        goto rulefunction_valueEx;

      }

      switch (alt36)
      {
      case 1:
        // SQL.g:593:4: expression[sqlFunc] ( COMMA expression[sqlFunc] )*
        {
          FOLLOWPUSH(FOLLOW_expression_in_function_value1394);
          expression(ctx, sqlFunc);

          FOLLOWPOP();
          if  (HASEXCEPTION())
          {
            goto rulefunction_valueEx;
          }


          // SQL.g:593:24: ( COMMA expression[sqlFunc] )*

          for (;;)
          {
            int alt35=2;
            switch ( LA(1) )
            {
            case COMMA:
              {
                alt35=1;
              }
              break;

            }

            switch (alt35)
            {
            case 1:
              // SQL.g:593:25: COMMA expression[sqlFunc]
              {
                 MATCHT(COMMA, &FOLLOW_COMMA_in_function_value1398);
                if  (HASEXCEPTION())
                {
                  goto rulefunction_valueEx;
                }


                FOLLOWPUSH(FOLLOW_expression_in_function_value1400);
                expression(ctx, sqlFunc);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                  goto rulefunction_valueEx;
                }


              }
              break;

            default:
              goto loop35;  /* break out of the loop */
              break;
            }
          }
          loop35: ; /* Jump out to here if this rule does not match */


        }
        break;
      case 2:
        // SQL.g:594:4: ASTERISK
        {
           MATCHT(ASTERISK, &FOLLOW_ASTERISK_in_function_value1408);
          if  (HASEXCEPTION())
          {
            goto rulefunction_valueEx;
          }


          {

                uSQL::SQLExpression *sqlExpr = new uSQL::SQLExpression();
                sqlExpr->setLiteralType(1/*uSQL::SQLExpression::STRING*/);
                sqlExpr->setValue("*");
                sqlExpr->addExpression(sqlFunc);
              
          }


        }
        break;

      }
    }
  }

  // This is where rules clean up and exit
  //
  goto rulefunction_valueEx; /* Prevent compiler warnings */
  rulefunction_valueEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return ;
}
/* $ANTLR end function_value */

/**
 * $ANTLR start expression_operator
 * SQL.g:602:1: expression_operator returns [uSQL::SQLOperator *sqlOpeExpr] : leftExpr= expression_literal sqlBinOpeExpr= binary_operator rightExpr= expression_literal ;
 */
static uSQL::SQLOperator *
expression_operator(pSQLParser ctx)
{
  uSQL::SQLOperator * sqlOpeExpr;


  uSQL::SQLExpression * leftExpr;
  #undef  RETURN_TYPE_leftExpr
  #define RETURN_TYPE_leftExpr uSQL::SQLExpression *

  uSQL::SQLOperator * sqlBinOpeExpr;
  #undef  RETURN_TYPE_sqlBinOpeExpr
  #define RETURN_TYPE_sqlBinOpeExpr uSQL::SQLOperator *

  uSQL::SQLExpression * rightExpr;
  #undef  RETURN_TYPE_rightExpr
  #define RETURN_TYPE_rightExpr uSQL::SQLExpression *

  /* Initialize rule variables
   */

  {
    // SQL.g:603:2: (leftExpr= expression_literal sqlBinOpeExpr= binary_operator rightExpr= expression_literal )
    // SQL.g:603:4: leftExpr= expression_literal sqlBinOpeExpr= binary_operator rightExpr= expression_literal
    {
      FOLLOWPUSH(FOLLOW_expression_literal_in_expression_operator1427);
      leftExpr=expression_literal(ctx);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto ruleexpression_operatorEx;
      }


      FOLLOWPUSH(FOLLOW_binary_operator_in_expression_operator1431);
      sqlBinOpeExpr=binary_operator(ctx);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto ruleexpression_operatorEx;
      }


      FOLLOWPUSH(FOLLOW_expression_literal_in_expression_operator1435);
      rightExpr=expression_literal(ctx);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto ruleexpression_operatorEx;
      }


      {

            sqlOpeExpr = sqlBinOpeExpr;
            sqlOpeExpr->addExpression(leftExpr);
            sqlOpeExpr->addExpression(rightExpr);
            
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto ruleexpression_operatorEx; /* Prevent compiler warnings */
  ruleexpression_operatorEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return sqlOpeExpr;
}
/* $ANTLR end expression_operator */

/**
 * $ANTLR start binary_operator
 * SQL.g:610:1: binary_operator returns [uSQL::SQLOperator *sqlOper] : ( SINGLE_EQ | DOUBLE_EQ | OP_LT | LE | GT | GE | NOTEQ );
 */
static uSQL::SQLOperator *
binary_operator(pSQLParser ctx)
{
  uSQL::SQLOperator * sqlOper;


  /* Initialize rule variables
   */


      sqlOper = new uSQL::SQLOperator();
      sqlOper->setLiteralType(uSQL::SQLExpression::OPERATOR);
    
  {
    {
      //  SQL.g:615:2: ( SINGLE_EQ | DOUBLE_EQ | OP_LT | LE | GT | GE | NOTEQ )

      ANTLR3_UINT32 alt37;

      alt37=7;

      switch ( LA(1) )
      {
      case SINGLE_EQ:
        {
          alt37=1;
        }
        break;
      case DOUBLE_EQ:
        {
          alt37=2;
        }
        break;
      case OP_LT:
        {
          alt37=3;
        }
        break;
      case LE:
        {
          alt37=4;
        }
        break;
      case GT:
        {
          alt37=5;
        }
        break;
      case GE:
        {
          alt37=6;
        }
        break;
      case NOTEQ:
        {
          alt37=7;
        }
        break;

      default:
        CONSTRUCTEX();
        EXCEPTION->type     = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        EXCEPTION->message    = (void *)"";
        EXCEPTION->decisionNum  = 37;
        EXCEPTION->state    = 0;


        goto rulebinary_operatorEx;

      }

      switch (alt37)
      {
      case 1:
        // SQL.g:615:4: SINGLE_EQ
        {
           MATCHT(SINGLE_EQ, &FOLLOW_SINGLE_EQ_in_binary_operator1458);
          if  (HASEXCEPTION())
          {
            goto rulebinary_operatorEx;
          }


          {

                sqlOper->setValue(1/*uSQL::SQLOperator::SEQ*/);
                
          }


        }
        break;
      case 2:
        // SQL.g:618:4: DOUBLE_EQ
        {
           MATCHT(DOUBLE_EQ, &FOLLOW_DOUBLE_EQ_in_binary_operator1465);
          if  (HASEXCEPTION())
          {
            goto rulebinary_operatorEx;
          }


          {

                sqlOper->setValue(2/*uSQL::SQLOperator::DEQ*/);
                
          }


        }
        break;
      case 3:
        // SQL.g:621:4: OP_LT
        {
           MATCHT(OP_LT, &FOLLOW_OP_LT_in_binary_operator1472);
          if  (HASEXCEPTION())
          {
            goto rulebinary_operatorEx;
          }


          {

                sqlOper->setValue(3/*uSQL::SQLOperator::LT*/);
                
          }


        }
        break;
      case 4:
        // SQL.g:624:4: LE
        {
           MATCHT(LE, &FOLLOW_LE_in_binary_operator1479);
          if  (HASEXCEPTION())
          {
            goto rulebinary_operatorEx;
          }


          {

                sqlOper->setValue(4/*uSQL::SQLOperator::LE*/);
                
          }


        }
        break;
      case 5:
        // SQL.g:627:4: GT
        {
           MATCHT(GT, &FOLLOW_GT_in_binary_operator1486);
          if  (HASEXCEPTION())
          {
            goto rulebinary_operatorEx;
          }


          {

                sqlOper->setValue(5/*uSQL::SQLOperator::GT*/);
                
          }


        }
        break;
      case 6:
        // SQL.g:630:4: GE
        {
           MATCHT(GE, &FOLLOW_GE_in_binary_operator1493);
          if  (HASEXCEPTION())
          {
            goto rulebinary_operatorEx;
          }


          {

                sqlOper->setValue(6/*uSQL::SQLOperator::GE*/);
                
          }


        }
        break;
      case 7:
        // SQL.g:633:4: NOTEQ
        {
           MATCHT(NOTEQ, &FOLLOW_NOTEQ_in_binary_operator1500);
          if  (HASEXCEPTION())
          {
            goto rulebinary_operatorEx;
          }


          {

                sqlOper->setValue(7/*uSQL::SQLOperator::NOTEQ*/);
                
          }


        }
        break;

      }
    }
  }

  // This is where rules clean up and exit
  //
  goto rulebinary_operatorEx; /* Prevent compiler warnings */
  rulebinary_operatorEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return sqlOper;
}
/* $ANTLR end binary_operator */

/**
 * $ANTLR start logical_operator
 * SQL.g:638:1: logical_operator returns [uSQL::SQLOperator *sqlOper] : ( AND | OR );
 */
static uSQL::SQLOperator *
logical_operator(pSQLParser ctx)
{
  uSQL::SQLOperator * sqlOper;


  /* Initialize rule variables
   */


      sqlOper = new uSQL::SQLOperator();
      sqlOper->setLiteralType(uSQL::SQLExpression::OPERATOR);
    
  {
    {
      //  SQL.g:643:2: ( AND | OR )

      ANTLR3_UINT32 alt38;

      alt38=2;

      switch ( LA(1) )
      {
      case AND:
        {
          alt38=1;
        }
        break;
      case OR:
        {
          alt38=2;
        }
        break;

      default:
        CONSTRUCTEX();
        EXCEPTION->type     = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        EXCEPTION->message    = (void *)"";
        EXCEPTION->decisionNum  = 38;
        EXCEPTION->state    = 0;


        goto rulelogical_operatorEx;

      }

      switch (alt38)
      {
      case 1:
        // SQL.g:643:4: AND
        {
           MATCHT(AND, &FOLLOW_AND_in_logical_operator1523);
          if  (HASEXCEPTION())
          {
            goto rulelogical_operatorEx;
          }


          {

                sqlOper->setValue(8/*uSQL::SQLOperator::AND*/);
                
          }


        }
        break;
      case 2:
        // SQL.g:646:4: OR
        {
           MATCHT(OR, &FOLLOW_OR_in_logical_operator1530);
          if  (HASEXCEPTION())
          {
            goto rulelogical_operatorEx;
          }


          {

                sqlOper->setValue(9/*uSQL::SQLOperator::OR*/);
                
          }


        }
        break;

      }
    }
  }

  // This is where rules clean up and exit
  //
  goto rulelogical_operatorEx; /* Prevent compiler warnings */
  rulelogical_operatorEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return sqlOper;
}
/* $ANTLR end logical_operator */

/**
 * $ANTLR start property_literal
 * SQL.g:651:1: property_literal : ID ;
 */
static SQLParser_property_literal_return
property_literal(pSQLParser ctx)
{
  SQLParser_property_literal_return retval;


  /* Initialize rule variables
   */

  retval.start = LT(1); retval.stop = retval.start;


  {
    // SQL.g:652:2: ( ID )
    // SQL.g:652:4: ID
    {
       MATCHT(ID, &FOLLOW_ID_in_property_literal1543);
      if  (HASEXCEPTION())
      {
        goto ruleproperty_literalEx;
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto ruleproperty_literalEx; /* Prevent compiler warnings */
  ruleproperty_literalEx: ;
  retval.stop = LT(-1);


      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return retval;
}
/* $ANTLR end property_literal */

/**
 * $ANTLR start integer_literal
 * SQL.g:655:1: integer_literal : NUMBER ;
 */
static SQLParser_integer_literal_return
integer_literal(pSQLParser ctx)
{
  SQLParser_integer_literal_return retval;


  /* Initialize rule variables
   */

  retval.start = LT(1); retval.stop = retval.start;


  {
    // SQL.g:656:2: ( NUMBER )
    // SQL.g:656:4: NUMBER
    {
       MATCHT(NUMBER, &FOLLOW_NUMBER_in_integer_literal1555);
      if  (HASEXCEPTION())
      {
        goto ruleinteger_literalEx;
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto ruleinteger_literalEx; /* Prevent compiler warnings */
  ruleinteger_literalEx: ;
  retval.stop = LT(-1);


      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return retval;
}
/* $ANTLR end integer_literal */

/**
 * $ANTLR start real_literal
 * SQL.g:659:1: real_literal : FLOAT ;
 */
static SQLParser_real_literal_return
real_literal(pSQLParser ctx)
{
  SQLParser_real_literal_return retval;


  /* Initialize rule variables
   */

  retval.start = LT(1); retval.stop = retval.start;


  {
    // SQL.g:660:2: ( FLOAT )
    // SQL.g:660:4: FLOAT
    {
       MATCHT(FLOAT, &FOLLOW_FLOAT_in_real_literal1566);
      if  (HASEXCEPTION())
      {
        goto rulereal_literalEx;
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto rulereal_literalEx; /* Prevent compiler warnings */
  rulereal_literalEx: ;
  retval.stop = LT(-1);


      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return retval;
}
/* $ANTLR end real_literal */

/**
 * $ANTLR start string_literal
 * SQL.g:663:1: string_literal : STRING ;
 */
static SQLParser_string_literal_return
string_literal(pSQLParser ctx)
{
  SQLParser_string_literal_return retval;


  /* Initialize rule variables
   */

  retval.start = LT(1); retval.stop = retval.start;


  {
    // SQL.g:664:2: ( STRING )
    // SQL.g:664:4: STRING
    {
       MATCHT(STRING, &FOLLOW_STRING_in_string_literal1577);
      if  (HASEXCEPTION())
      {
        goto rulestring_literalEx;
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto rulestring_literalEx; /* Prevent compiler warnings */
  rulestring_literalEx: ;
  retval.stop = LT(-1);


      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return retval;
}
/* $ANTLR end string_literal */

/**
 * $ANTLR start true_literal
 * SQL.g:667:1: true_literal : T R U E ;
 */
static SQLParser_true_literal_return
true_literal(pSQLParser ctx)
{
  SQLParser_true_literal_return retval;


  /* Initialize rule variables
   */

  retval.start = LT(1); retval.stop = retval.start;


  {
    // SQL.g:668:2: ( T R U E )
    // SQL.g:668:4: T R U E
    {
       MATCHT(T, &FOLLOW_T_in_true_literal1588);
      if  (HASEXCEPTION())
      {
        goto ruletrue_literalEx;
      }


       MATCHT(R, &FOLLOW_R_in_true_literal1590);
      if  (HASEXCEPTION())
      {
        goto ruletrue_literalEx;
      }


       MATCHT(U, &FOLLOW_U_in_true_literal1592);
      if  (HASEXCEPTION())
      {
        goto ruletrue_literalEx;
      }


       MATCHT(E, &FOLLOW_E_in_true_literal1594);
      if  (HASEXCEPTION())
      {
        goto ruletrue_literalEx;
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto ruletrue_literalEx; /* Prevent compiler warnings */
  ruletrue_literalEx: ;
  retval.stop = LT(-1);


      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return retval;
}
/* $ANTLR end true_literal */

/**
 * $ANTLR start false_literal
 * SQL.g:671:1: false_literal : F A L S E ;
 */
static SQLParser_false_literal_return
false_literal(pSQLParser ctx)
{
  SQLParser_false_literal_return retval;


  /* Initialize rule variables
   */

  retval.start = LT(1); retval.stop = retval.start;


  {
    // SQL.g:672:2: ( F A L S E )
    // SQL.g:672:4: F A L S E
    {
       MATCHT(F, &FOLLOW_F_in_false_literal1606);
      if  (HASEXCEPTION())
      {
        goto rulefalse_literalEx;
      }


       MATCHT(A, &FOLLOW_A_in_false_literal1608);
      if  (HASEXCEPTION())
      {
        goto rulefalse_literalEx;
      }


       MATCHT(L, &FOLLOW_L_in_false_literal1610);
      if  (HASEXCEPTION())
      {
        goto rulefalse_literalEx;
      }


       MATCHT(S, &FOLLOW_S_in_false_literal1612);
      if  (HASEXCEPTION())
      {
        goto rulefalse_literalEx;
      }


       MATCHT(E, &FOLLOW_E_in_false_literal1614);
      if  (HASEXCEPTION())
      {
        goto rulefalse_literalEx;
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto rulefalse_literalEx; /* Prevent compiler warnings */
  rulefalse_literalEx: ;
  retval.stop = LT(-1);


      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return retval;
}
/* $ANTLR end false_literal */

/**
 * $ANTLR start sync_operator
 * SQL.g:681:1: sync_operator returns [bool isAync] : ( SYNC | ASYNC );
 */
static bool
sync_operator(pSQLParser ctx)
{
  bool isAync;


  /* Initialize rule variables
   */

  {
    {
      //  SQL.g:682:2: ( SYNC | ASYNC )

      ANTLR3_UINT32 alt39;

      alt39=2;

      switch ( LA(1) )
      {
      case SYNC:
        {
          alt39=1;
        }
        break;
      case ASYNC:
        {
          alt39=2;
        }
        break;

      default:
        CONSTRUCTEX();
        EXCEPTION->type     = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        EXCEPTION->message    = (void *)"";
        EXCEPTION->decisionNum  = 39;
        EXCEPTION->state    = 0;


        goto rulesync_operatorEx;

      }

      switch (alt39)
      {
      case 1:
        // SQL.g:682:4: SYNC
        {
           MATCHT(SYNC, &FOLLOW_SYNC_in_sync_operator1632);
          if  (HASEXCEPTION())
          {
            goto rulesync_operatorEx;
          }


          {

                isAync = false;
                
          }


        }
        break;
      case 2:
        // SQL.g:685:4: ASYNC
        {
           MATCHT(ASYNC, &FOLLOW_ASYNC_in_sync_operator1639);
          if  (HASEXCEPTION())
          {
            goto rulesync_operatorEx;
          }


          {

                isAync = true;
                
          }


        }
        break;

      }
    }
  }

  // This is where rules clean up and exit
  //
  goto rulesync_operatorEx; /* Prevent compiler warnings */
  rulesync_operatorEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return isAync;
}
/* $ANTLR end sync_operator */

/**
 * $ANTLR start compound_operator
 * SQL.g:690:1: compound_operator : ( UNION ( ALL )? | INTERSECT | EXCEPT );
 */
static void
compound_operator(pSQLParser ctx)
{
  /* Initialize rule variables
   */

  {
    {
      //  SQL.g:691:2: ( UNION ( ALL )? | INTERSECT | EXCEPT )

      ANTLR3_UINT32 alt41;

      alt41=3;

      switch ( LA(1) )
      {
      case UNION:
        {
          alt41=1;
        }
        break;
      case INTERSECT:
        {
          alt41=2;
        }
        break;
      case EXCEPT:
        {
          alt41=3;
        }
        break;

      default:
        CONSTRUCTEX();
        EXCEPTION->type     = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        EXCEPTION->message    = (void *)"";
        EXCEPTION->decisionNum  = 41;
        EXCEPTION->state    = 0;


        goto rulecompound_operatorEx;

      }

      switch (alt41)
      {
      case 1:
        // SQL.g:691:4: UNION ( ALL )?
        {
           MATCHT(UNION, &FOLLOW_UNION_in_compound_operator1652);
          if  (HASEXCEPTION())
          {
            goto rulecompound_operatorEx;
          }


          // SQL.g:691:10: ( ALL )?
          {
            int alt40=2;
            switch ( LA(1) )
            {
              case ALL:
                {
                  alt40=1;
                }
                break;
            }

            switch (alt40)
            {
            case 1:
              // SQL.g:691:11: ALL
              {
                 MATCHT(ALL, &FOLLOW_ALL_in_compound_operator1655);
                if  (HASEXCEPTION())
                {
                  goto rulecompound_operatorEx;
                }


              }
              break;

            }
          }

        }
        break;
      case 2:
        // SQL.g:692:4: INTERSECT
        {
           MATCHT(INTERSECT, &FOLLOW_INTERSECT_in_compound_operator1662);
          if  (HASEXCEPTION())
          {
            goto rulecompound_operatorEx;
          }


        }
        break;
      case 3:
        // SQL.g:693:4: EXCEPT
        {
           MATCHT(EXCEPT, &FOLLOW_EXCEPT_in_compound_operator1667);
          if  (HASEXCEPTION())
          {
            goto rulecompound_operatorEx;
          }


        }
        break;

      }
    }
  }

  // This is where rules clean up and exit
  //
  goto rulecompound_operatorEx; /* Prevent compiler warnings */
  rulecompound_operatorEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return ;
}
/* $ANTLR end compound_operator */

/**
 * $ANTLR start condition_operator
 * SQL.g:696:1: condition_operator : ( SINGLE_EQ | DOUBLE_EQ | OP_LT | LE | GT | GE | NOTEQ );
 */
static void
condition_operator(pSQLParser ctx)
{
  /* Initialize rule variables
   */

  {
    // SQL.g:697:2: ( SINGLE_EQ | DOUBLE_EQ | OP_LT | LE | GT | GE | NOTEQ )
    // SQL.g:
    {
      if ( LA(1) == DOUBLE_EQ || LA(1) == GE || LA(1) == GT || LA(1) == LE || LA(1) == NOTEQ || LA(1) == OP_LT || LA(1) == SINGLE_EQ )
      {
        CONSUME();
        PERRORRECOVERY=ANTLR3_FALSE;
      }
      else
      {
        CONSTRUCTEX();
        EXCEPTION->type     = ANTLR3_MISMATCHED_SET_EXCEPTION;
        EXCEPTION->name     = (void *)ANTLR3_MISMATCHED_SET_NAME;
        EXCEPTION->expectingSet = NULL;

        goto rulecondition_operatorEx;
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto rulecondition_operatorEx; /* Prevent compiler warnings */
  rulecondition_operatorEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return ;
}
/* $ANTLR end condition_operator */

/**
 * $ANTLR start property
 * SQL.g:706:1: property : ID ;
 */
static SQLParser_property_return
property(pSQLParser ctx)
{
  SQLParser_property_return retval;


  /* Initialize rule variables
   */

  retval.start = LT(1); retval.stop = retval.start;


  {
    // SQL.g:707:2: ( ID )
    // SQL.g:707:4: ID
    {
       MATCHT(ID, &FOLLOW_ID_in_property1719);
      if  (HASEXCEPTION())
      {
        goto rulepropertyEx;
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto rulepropertyEx; /* Prevent compiler warnings */
  rulepropertyEx: ;
  retval.stop = LT(-1);


      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return retval;
}
/* $ANTLR end property */

/**
 * $ANTLR start value
 * SQL.g:710:1: value : ID ;
 */
static void
value(pSQLParser ctx)
{
  /* Initialize rule variables
   */

  {
    // SQL.g:711:2: ( ID )
    // SQL.g:711:4: ID
    {
       MATCHT(ID, &FOLLOW_ID_in_value1733);
      if  (HASEXCEPTION())
      {
        goto rulevalueEx;
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto rulevalueEx; /* Prevent compiler warnings */
  rulevalueEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return ;
}
/* $ANTLR end value */

/**
 * $ANTLR start name
 * SQL.g:714:1: name : ID ;
 */
static SQLParser_name_return
name(pSQLParser ctx)
{
  SQLParser_name_return retval;


  /* Initialize rule variables
   */

  retval.start = LT(1); retval.stop = retval.start;


  {
    // SQL.g:715:2: ( ID )
    // SQL.g:715:4: ID
    {
       MATCHT(ID, &FOLLOW_ID_in_name1745);
      if  (HASEXCEPTION())
      {
        goto rulenameEx;
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto rulenameEx; /* Prevent compiler warnings */
  rulenameEx: ;
  retval.stop = LT(-1);


      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return retval;
}
/* $ANTLR end name */

/**
 * $ANTLR start collection_section
 * SQL.g:718:1: collection_section returns [uSQL::SQLCollection *sqlCollection] : collection_name ;
 */
static uSQL::SQLCollection *
collection_section(pSQLParser ctx)
{
  uSQL::SQLCollection * sqlCollection;


  SQLParser_collection_name_return collection_name15;
  #undef  RETURN_TYPE_collection_name15
  #define RETURN_TYPE_collection_name15 SQLParser_collection_name_return

  /* Initialize rule variables
   */


      sqlCollection = new uSQL::SQLCollection();
    
  {
    // SQL.g:722:2: ( collection_name )
    // SQL.g:722:4: collection_name
    {
      FOLLOWPUSH(FOLLOW_collection_name_in_collection_section1766);
      collection_name15=collection_name(ctx);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto rulecollection_sectionEx;
      }


      {

            sqlCollection->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, collection_name15.start, collection_name15.stop))
        ));
            
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto rulecollection_sectionEx; /* Prevent compiler warnings */
  rulecollection_sectionEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return sqlCollection;
}
/* $ANTLR end collection_section */

/**
 * $ANTLR start collection_name
 * SQL.g:727:1: collection_name : ( ID | string_literal );
 */
static SQLParser_collection_name_return
collection_name(pSQLParser ctx)
{
  SQLParser_collection_name_return retval;


  /* Initialize rule variables
   */

  retval.start = LT(1); retval.stop = retval.start;


  {
    {
      //  SQL.g:728:2: ( ID | string_literal )

      ANTLR3_UINT32 alt42;

      alt42=2;

      switch ( LA(1) )
      {
      case ID:
        {
          alt42=1;
        }
        break;
      case STRING:
        {
          alt42=2;
        }
        break;

      default:
        CONSTRUCTEX();
        EXCEPTION->type     = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        EXCEPTION->message    = (void *)"";
        EXCEPTION->decisionNum  = 42;
        EXCEPTION->state    = 0;


        goto rulecollection_nameEx;

      }

      switch (alt42)
      {
      case 1:
        // SQL.g:728:4: ID
        {
           MATCHT(ID, &FOLLOW_ID_in_collection_name1779);
          if  (HASEXCEPTION())
          {
            goto rulecollection_nameEx;
          }


        }
        break;
      case 2:
        // SQL.g:729:4: string_literal
        {
          FOLLOWPUSH(FOLLOW_string_literal_in_collection_name1784);
          string_literal(ctx);

          FOLLOWPOP();
          if  (HASEXCEPTION())
          {
            goto rulecollection_nameEx;
          }


        }
        break;

      }
    }
  }

  // This is where rules clean up and exit
  //
  goto rulecollection_nameEx; /* Prevent compiler warnings */
  rulecollection_nameEx: ;
  retval.stop = LT(-1);


      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return retval;
}
/* $ANTLR end collection_name */

/**
 * $ANTLR start column_section
 * SQL.g:732:1: column_section[uSQL::SQLColumns *sqlColumns] : ( ( expression[sqlColumns] ) ( AS name )? ) ;
 */
static void
column_section(pSQLParser ctx, uSQL::SQLColumns *sqlColumns)
{
  /* Initialize rule variables
   */

  {
    // SQL.g:733:2: ( ( ( expression[sqlColumns] ) ( AS name )? ) )
    // SQL.g:733:4: ( ( expression[sqlColumns] ) ( AS name )? )
    {
      // SQL.g:733:4: ( ( expression[sqlColumns] ) ( AS name )? )
      // SQL.g:733:5: ( expression[sqlColumns] ) ( AS name )?
      {
        // SQL.g:733:5: ( expression[sqlColumns] )
        // SQL.g:733:6: expression[sqlColumns]
        {
          FOLLOWPUSH(FOLLOW_expression_in_column_section1799);
          expression(ctx, sqlColumns);

          FOLLOWPOP();
          if  (HASEXCEPTION())
          {
            goto rulecolumn_sectionEx;
          }


        }


        // SQL.g:733:30: ( AS name )?
        {
          int alt43=2;
          switch ( LA(1) )
          {
            case AS:
              {
                alt43=1;
              }
              break;
          }

          switch (alt43)
          {
          case 1:
            // SQL.g:733:31: AS name
            {
               MATCHT(AS, &FOLLOW_AS_in_column_section1804);
              if  (HASEXCEPTION())
              {
                goto rulecolumn_sectionEx;
              }


              FOLLOWPUSH(FOLLOW_name_in_column_section1806);
              name(ctx);

              FOLLOWPOP();
              if  (HASEXCEPTION())
              {
                goto rulecolumn_sectionEx;
              }


            }
            break;

          }
        }

      }


      {

            
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto rulecolumn_sectionEx; /* Prevent compiler warnings */
  rulecolumn_sectionEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return ;
}
/* $ANTLR end column_section */

/**
 * $ANTLR start index_section
 * SQL.g:737:1: index_section returns [uSQL::SQLIndex *sqlIndex] : index_name ;
 */
static uSQL::SQLIndex *
index_section(pSQLParser ctx)
{
  uSQL::SQLIndex * sqlIndex;


  SQLParser_index_name_return index_name16;
  #undef  RETURN_TYPE_index_name16
  #define RETURN_TYPE_index_name16 SQLParser_index_name_return

  /* Initialize rule variables
   */


      sqlIndex = new uSQL::SQLIndex();
    
  {
    // SQL.g:741:2: ( index_name )
    // SQL.g:741:4: index_name
    {
      FOLLOWPUSH(FOLLOW_index_name_in_index_section1832);
      index_name16=index_name(ctx);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto ruleindex_sectionEx;
      }


      {

            sqlIndex->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, index_name16.start, index_name16.stop))
        ));
            
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto ruleindex_sectionEx; /* Prevent compiler warnings */
  ruleindex_sectionEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return sqlIndex;
}
/* $ANTLR end index_section */

/**
 * $ANTLR start index_name
 * SQL.g:746:1: index_name : ( ID | string_literal );
 */
static SQLParser_index_name_return
index_name(pSQLParser ctx)
{
  SQLParser_index_name_return retval;


  /* Initialize rule variables
   */

  retval.start = LT(1); retval.stop = retval.start;


  {
    {
      //  SQL.g:747:2: ( ID | string_literal )

      ANTLR3_UINT32 alt44;

      alt44=2;

      switch ( LA(1) )
      {
      case ID:
        {
          alt44=1;
        }
        break;
      case STRING:
        {
          alt44=2;
        }
        break;

      default:
        CONSTRUCTEX();
        EXCEPTION->type     = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        EXCEPTION->message    = (void *)"";
        EXCEPTION->decisionNum  = 44;
        EXCEPTION->state    = 0;


        goto ruleindex_nameEx;

      }

      switch (alt44)
      {
      case 1:
        // SQL.g:747:4: ID
        {
           MATCHT(ID, &FOLLOW_ID_in_index_name1845);
          if  (HASEXCEPTION())
          {
            goto ruleindex_nameEx;
          }


        }
        break;
      case 2:
        // SQL.g:748:4: string_literal
        {
          FOLLOWPUSH(FOLLOW_string_literal_in_index_name1850);
          string_literal(ctx);

          FOLLOWPOP();
          if  (HASEXCEPTION())
          {
            goto ruleindex_nameEx;
          }


        }
        break;

      }
    }
  }

  // This is where rules clean up and exit
  //
  goto ruleindex_nameEx; /* Prevent compiler warnings */
  ruleindex_nameEx: ;
  retval.stop = LT(-1);


      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return retval;
}
/* $ANTLR end index_name */

/**
 * $ANTLR start where_section
 * SQL.g:751:1: where_section returns [uSQL::SQLWhere *sqlWhere] : WHERE expression[sqlWhere] ;
 */
static uSQL::SQLWhere *
where_section(pSQLParser ctx)
{
  uSQL::SQLWhere * sqlWhere;


  /* Initialize rule variables
   */


      sqlWhere = new uSQL::SQLWhere();
    
  {
    // SQL.g:755:2: ( WHERE expression[sqlWhere] )
    // SQL.g:755:4: WHERE expression[sqlWhere]
    {
       MATCHT(WHERE, &FOLLOW_WHERE_in_where_section1871);
      if  (HASEXCEPTION())
      {
        goto rulewhere_sectionEx;
      }


      FOLLOWPUSH(FOLLOW_expression_in_where_section1873);
      expression(ctx, sqlWhere);

      FOLLOWPOP();
      if  (HASEXCEPTION())
      {
        goto rulewhere_sectionEx;
      }


    }

  }

  // This is where rules clean up and exit
  //
  goto rulewhere_sectionEx; /* Prevent compiler warnings */
  rulewhere_sectionEx: ;

      if (HASEXCEPTION())
      {
        PREPORTERROR();
        PRECOVER();
      }
  return sqlWhere;
}
/* $ANTLR end where_section */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */






/* End of code
 * =============================================================================
 */
