/** \file
 *  This C source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : SQL.g
 *     -                            On : 2011-12-16 15:28:22
 *     -                for the parser : SQLParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "SQLParser.h"
/* ----------------------------------------- */

/******************************************************************
*
* uSQL for C++
*
* UnQL.g
*
* Copyright (C) Satoshi Konno 2011
*
* This is licensed under BSD-style license, see file COPYING.
*
******************************************************************/




/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pSQLParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pSQLParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pSQLParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pSQLParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */

#undef	    PARSER
#undef	    RECOGNIZER
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO
#undef		DBG

#define	    PARSER				ctx->pParser
#define	    RECOGNIZER				PARSER->rec
#define	    PSRSTATE				RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)			RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT				PARSER->tstream
#define	    STRSTREAM				INPUT
#define	    ISTREAM				INPUT->istream
#define	    INDEX()				ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()			(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				PSRSTATE->exception
#define	    MATCHT(t, fs)			RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()				RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK				PSRSTATE->following
#ifdef  SKIP_FOLLOW_SETS
#define	    FOLLOWPUSH(x)
#define	    FOLLOWPOP()
#else
#define	    FOLLOWPUSH(x)			FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()				FOLLOWSTACK->pop(FOLLOWSTACK)
#endif
#define	    PRECOVER()				RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()			RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)				INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)				INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()				ISTREAM->consume(ISTREAM)
#define	    MARK()				ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define	    SEEK(n)				ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY			PSRSTATE->errorRecovery
#define	    FAILEDFLAG				PSRSTATE->failed
#define	    HASFAILED()				(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING			PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   SQLParserTokenNames[96+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>",
        (pANTLR3_UINT8) "<UP>",
        (pANTLR3_UINT8) "A",
        (pANTLR3_UINT8) "ALL",
        (pANTLR3_UINT8) "ANCESTOR",
        (pANTLR3_UINT8) "AND",
        (pANTLR3_UINT8) "AS",
        (pANTLR3_UINT8) "ASC",
        (pANTLR3_UINT8) "ASTERISK",
        (pANTLR3_UINT8) "ASYNC",
        (pANTLR3_UINT8) "B",
        (pANTLR3_UINT8) "BY",
        (pANTLR3_UINT8) "C",
        (pANTLR3_UINT8) "CHAR",
        (pANTLR3_UINT8) "COLLECTION",
        (pANTLR3_UINT8) "COLLECTION_INDEX",
        (pANTLR3_UINT8) "COMMA",
        (pANTLR3_UINT8) "CREATE",
        (pANTLR3_UINT8) "CURRENT_DATE",
        (pANTLR3_UINT8) "CURRENT_TIME",
        (pANTLR3_UINT8) "CURRENT_TIMESTAMP",
        (pANTLR3_UINT8) "D",
        (pANTLR3_UINT8) "DELETE",
        (pANTLR3_UINT8) "DESC",
        (pANTLR3_UINT8) "DISTINCT",
        (pANTLR3_UINT8) "DOUBLE_EQ",
        (pANTLR3_UINT8) "DROP",
        (pANTLR3_UINT8) "E",
        (pANTLR3_UINT8) "EACH",
        (pANTLR3_UINT8) "ESC_SEQ",
        (pANTLR3_UINT8) "EXCEPT",
        (pANTLR3_UINT8) "EXPONENT",
        (pANTLR3_UINT8) "EscapeSequence",
        (pANTLR3_UINT8) "F",
        (pANTLR3_UINT8) "FLATTEN",
        (pANTLR3_UINT8) "FLOAT",
        (pANTLR3_UINT8) "FROM",
        (pANTLR3_UINT8) "G",
        (pANTLR3_UINT8) "GE",
        (pANTLR3_UINT8) "GROUP",
        (pANTLR3_UINT8) "GT",
        (pANTLR3_UINT8) "H",
        (pANTLR3_UINT8) "HAVING",
        (pANTLR3_UINT8) "HEX_DIGIT",
        (pANTLR3_UINT8) "I",
        (pANTLR3_UINT8) "ID",
        (pANTLR3_UINT8) "IN",
        (pANTLR3_UINT8) "INSERT",
        (pANTLR3_UINT8) "INTERSECT",
        (pANTLR3_UINT8) "INTO",
        (pANTLR3_UINT8) "IS",
        (pANTLR3_UINT8) "J",
        (pANTLR3_UINT8) "K",
        (pANTLR3_UINT8) "L",
        (pANTLR3_UINT8) "LE",
        (pANTLR3_UINT8) "LIMIT",
        (pANTLR3_UINT8) "M",
        (pANTLR3_UINT8) "N",
        (pANTLR3_UINT8) "NIL",
        (pANTLR3_UINT8) "NOTEQ",
        (pANTLR3_UINT8) "NUMBER",
        (pANTLR3_UINT8) "O",
        (pANTLR3_UINT8) "OCTAL_ESC",
        (pANTLR3_UINT8) "OFFSET",
        (pANTLR3_UINT8) "OPTIONS",
        (pANTLR3_UINT8) "OP_LT",
        (pANTLR3_UINT8) "OR",
        (pANTLR3_UINT8) "ORDER",
        (pANTLR3_UINT8) "P",
        (pANTLR3_UINT8) "Q",
        (pANTLR3_UINT8) "R",
        (pANTLR3_UINT8) "S",
        (pANTLR3_UINT8) "SELECT",
        (pANTLR3_UINT8) "SEMICOLON",
        (pANTLR3_UINT8) "SET",
        (pANTLR3_UINT8) "SINGLE_EQ",
        (pANTLR3_UINT8) "STRING",
        (pANTLR3_UINT8) "SYNC",
        (pANTLR3_UINT8) "T",
        (pANTLR3_UINT8) "U",
        (pANTLR3_UINT8) "UNICODE_ESC",
        (pANTLR3_UINT8) "UNION",
        (pANTLR3_UINT8) "UPDATE",
        (pANTLR3_UINT8) "V",
        (pANTLR3_UINT8) "VALUE",
        (pANTLR3_UINT8) "W",
        (pANTLR3_UINT8) "WHERE",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "X",
        (pANTLR3_UINT8) "Y",
        (pANTLR3_UINT8) "Z",
        (pANTLR3_UINT8) "'('",
        (pANTLR3_UINT8) "')'",
        (pANTLR3_UINT8) "':'",
        (pANTLR3_UINT8) "'['",
        (pANTLR3_UINT8) "']'",
        (pANTLR3_UINT8) "'{'",
        (pANTLR3_UINT8) "'}'"
       };



// Forward declare the locally static matching functions we have generated.
//
static 
 void
	statement_list    (pSQLParser ctx, uSQL::SQLParser *sqlParser);
static 
 void
	statement    (pSQLParser ctx, uSQL::SQLParser *sqlParser);
static 
 void
	select_stmt    (pSQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
	select_core    (pSQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 uSQL::SQLColumn *
	result_column_section    (pSQLParser ctx);
static 
 uSQL::SQLFrom *
	from_section    (pSQLParser ctx);
static 
 void
	table_name    (pSQLParser ctx, uSQL::SQLFrom *sqlFrom);
static 
 uSQL::SQLDataSource *
	data_source    (pSQLParser ctx);
static 
 uSQL::SQLGroupBy *
	grouping_section    (pSQLParser ctx);
static 
 uSQL::SQLHaving *
	having_section    (pSQLParser ctx);
static 
 uSQL::SQLOrderBy *
	sorting_section    (pSQLParser ctx);
static 
 void
	sorting_item    (pSQLParser ctx, uSQL::SQLOrderBy *sqlOrders);
static 
 SQLParser_sorting_specification_return
	sorting_specification    (pSQLParser ctx);
static 
 uSQL::SQLLimit *
	limit_section    (pSQLParser ctx);
static 
 uSQL::SQLOffset *
	offset_section    (pSQLParser ctx);
static 
 void
	create_collection_stmt    (pSQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
	drop_collection_stmt    (pSQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
	create_index_stmt    (pSQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
	drop_index_stmt    (pSQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
	insert_stmt    (pSQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
	update_stmt    (pSQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
	property_section    (pSQLParser ctx, uSQL::SQLSet *sqlSet);
static 
 void
	delete_stmt    (pSQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
	expression    (pSQLParser ctx, uSQL::SQLNode *parentNode);
static 
 void
	expression_list    (pSQLParser ctx, uSQL::SQLNodeList &sqlNodeList);
static 
 uSQL::SQLExpression *
	expression_literal    (pSQLParser ctx);
static 
 void
	expression_literal_value    (pSQLParser ctx, uSQL::SQLExpression *sqlExpr);
static 
 void
	expression_dictionary    (pSQLParser ctx, uSQL::SQLNodeList &sqlNodeList);
static 
 void
	dictionary_literal    (pSQLParser ctx, uSQL::SQLExpression *parentSqlExpr);
static 
 void
	expression_array    (pSQLParser ctx, uSQL::SQLNodeList &sqlNodeList);
static 
 void
	array_literal    (pSQLParser ctx, uSQL::SQLExpression *parentSqlExpr);
static 
 uSQL::SQLFunction *
	expression_function    (pSQLParser ctx);
static 
 uSQL::SQLFunction *
	function_name    (pSQLParser ctx);
static 
 void
	function_value    (pSQLParser ctx, uSQL::SQLFunction *sqlFunc);
static 
 uSQL::SQLOperator *
	expression_operator    (pSQLParser ctx);
static 
 uSQL::SQLOperator *
	binary_operator    (pSQLParser ctx);
static 
 SQLParser_property_literal_return
	property_literal    (pSQLParser ctx);
static 
 SQLParser_integer_literal_return
	integer_literal    (pSQLParser ctx);
static 
 SQLParser_real_literal_return
	real_literal    (pSQLParser ctx);
static 
 SQLParser_string_literal_return
	string_literal    (pSQLParser ctx);
static 
 SQLParser_true_literal_return
	true_literal    (pSQLParser ctx);
static 
 SQLParser_false_literal_return
	false_literal    (pSQLParser ctx);
static 
 bool
	sync_operator    (pSQLParser ctx);
static 
 void
	compound_operator    (pSQLParser ctx);
static 
 void
	condition_operator    (pSQLParser ctx);
static 
 SQLParser_property_return
	property    (pSQLParser ctx);
static 
 void
	value    (pSQLParser ctx);
static 
 SQLParser_name_return
	name    (pSQLParser ctx);
static 
 uSQL::SQLCollection *
	collection_section    (pSQLParser ctx);
static 
 SQLParser_collection_name_return
	collection_name    (pSQLParser ctx);
static 
 uSQL::SQLIndex *
	index_section    (pSQLParser ctx);
static 
 SQLParser_index_name_return
	index_name    (pSQLParser ctx);
static 
 uSQL::SQLWhere *
	where_section    (pSQLParser ctx);
static void	SQLParserFree(pSQLParser ctx);
static void     SQLParserReset (pSQLParser ctx);

/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed.
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "SQL.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new SQLParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pSQLParser
SQLParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return SQLParserNewSSD(instream, NULL);
}

/** \brief Create a new SQLParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pSQLParser
SQLParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pSQLParser ctx;	    /* Context structure we will build and return   */

    ctx	= (pSQLParser) ANTLR3_CALLOC(1, sizeof(SQLParser));

    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in SQLParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our SQLParser interface
     */
    ctx->statement_list	= statement_list;
    ctx->statement	= statement;
    ctx->select_stmt	= select_stmt;
    ctx->select_core	= select_core;
    ctx->result_column_section	= result_column_section;
    ctx->from_section	= from_section;
    ctx->table_name	= table_name;
    ctx->data_source	= data_source;
    ctx->grouping_section	= grouping_section;
    ctx->having_section	= having_section;
    ctx->sorting_section	= sorting_section;
    ctx->sorting_item	= sorting_item;
    ctx->sorting_specification	= sorting_specification;
    ctx->limit_section	= limit_section;
    ctx->offset_section	= offset_section;
    ctx->create_collection_stmt	= create_collection_stmt;
    ctx->drop_collection_stmt	= drop_collection_stmt;
    ctx->create_index_stmt	= create_index_stmt;
    ctx->drop_index_stmt	= drop_index_stmt;
    ctx->insert_stmt	= insert_stmt;
    ctx->update_stmt	= update_stmt;
    ctx->property_section	= property_section;
    ctx->delete_stmt	= delete_stmt;
    ctx->expression	= expression;
    ctx->expression_list	= expression_list;
    ctx->expression_literal	= expression_literal;
    ctx->expression_literal_value	= expression_literal_value;
    ctx->expression_dictionary	= expression_dictionary;
    ctx->dictionary_literal	= dictionary_literal;
    ctx->expression_array	= expression_array;
    ctx->array_literal	= array_literal;
    ctx->expression_function	= expression_function;
    ctx->function_name	= function_name;
    ctx->function_value	= function_value;
    ctx->expression_operator	= expression_operator;
    ctx->binary_operator	= binary_operator;
    ctx->property_literal	= property_literal;
    ctx->integer_literal	= integer_literal;
    ctx->real_literal	= real_literal;
    ctx->string_literal	= string_literal;
    ctx->true_literal	= true_literal;
    ctx->false_literal	= false_literal;
    ctx->sync_operator	= sync_operator;
    ctx->compound_operator	= compound_operator;
    ctx->condition_operator	= condition_operator;
    ctx->property	= property;
    ctx->value	= value;
    ctx->name	= name;
    ctx->collection_section	= collection_section;
    ctx->collection_name	= collection_name;
    ctx->index_section	= index_section;
    ctx->index_name	= index_name;
    ctx->where_section	= where_section;
    ctx->free			= SQLParserFree;
    ctx->reset			= SQLParserReset;
    ctx->getGrammarFileName	= getGrammarFileName;

    /* Install the scope pushing methods.
     */

    /* Install the token table
     */
    PSRSTATE->tokenNames   = SQLParserTokenNames;


    /* Return the newly built parser to the caller
     */
    return  ctx;
}

static void
SQLParserReset (pSQLParser ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** Free the parser resources
 */
 static void
 SQLParserFree(pSQLParser ctx)
 {
    /* Free any scope memory
     */

	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);


    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames()
{
        return SQLParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_statement_list55  */
static	ANTLR3_BITWORD FOLLOW_statement_in_statement_list55_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_statement_list55	= { FOLLOW_statement_in_statement_list55_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_statement_list59  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_statement_list59_bits[]	= { ANTLR3_UINT64_LIT(0x0002000011080800), ANTLR3_UINT64_LIT(0x0000000000108400) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_statement_list59	= { FOLLOW_SEMICOLON_in_statement_list59_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_statement_list61  */
static	ANTLR3_BITWORD FOLLOW_statement_in_statement_list61_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_statement_list61	= { FOLLOW_statement_in_statement_list61_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_select_stmt_in_statement84  */
static	ANTLR3_BITWORD FOLLOW_select_stmt_in_statement84_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_select_stmt_in_statement84	= { FOLLOW_select_stmt_in_statement84_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_create_collection_stmt_in_statement90  */
static	ANTLR3_BITWORD FOLLOW_create_collection_stmt_in_statement90_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_create_collection_stmt_in_statement90	= { FOLLOW_create_collection_stmt_in_statement90_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_drop_collection_stmt_in_statement96  */
static	ANTLR3_BITWORD FOLLOW_drop_collection_stmt_in_statement96_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_drop_collection_stmt_in_statement96	= { FOLLOW_drop_collection_stmt_in_statement96_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_create_index_stmt_in_statement102  */
static	ANTLR3_BITWORD FOLLOW_create_index_stmt_in_statement102_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_create_index_stmt_in_statement102	= { FOLLOW_create_index_stmt_in_statement102_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_drop_index_stmt_in_statement108  */
static	ANTLR3_BITWORD FOLLOW_drop_index_stmt_in_statement108_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_drop_index_stmt_in_statement108	= { FOLLOW_drop_index_stmt_in_statement108_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_insert_stmt_in_statement114  */
static	ANTLR3_BITWORD FOLLOW_insert_stmt_in_statement114_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_insert_stmt_in_statement114	= { FOLLOW_insert_stmt_in_statement114_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_update_stmt_in_statement120  */
static	ANTLR3_BITWORD FOLLOW_update_stmt_in_statement120_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_update_stmt_in_statement120	= { FOLLOW_update_stmt_in_statement120_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_delete_stmt_in_statement126  */
static	ANTLR3_BITWORD FOLLOW_delete_stmt_in_statement126_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_delete_stmt_in_statement126	= { FOLLOW_delete_stmt_in_statement126_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_select_core_in_select_stmt150  */
static	ANTLR3_BITWORD FOLLOW_select_core_in_select_stmt150_bits[]	= { ANTLR3_UINT64_LIT(0x5200802800700002), ANTLR3_UINT64_LIT(0x0000000000014020) };
static  ANTLR3_BITSET_LIST FOLLOW_select_core_in_select_stmt150	= { FOLLOW_select_core_in_select_stmt150_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sorting_section_in_select_stmt156  */
static	ANTLR3_BITWORD FOLLOW_sorting_section_in_select_stmt156_bits[]	= { ANTLR3_UINT64_LIT(0x5200802800700002), ANTLR3_UINT64_LIT(0x0000000000014000) };
static  ANTLR3_BITSET_LIST FOLLOW_sorting_section_in_select_stmt156	= { FOLLOW_sorting_section_in_select_stmt156_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_limit_section_in_select_stmt163  */
static	ANTLR3_BITWORD FOLLOW_limit_section_in_select_stmt163_bits[]	= { ANTLR3_UINT64_LIT(0x5000802800700002), ANTLR3_UINT64_LIT(0x0000000000014000) };
static  ANTLR3_BITSET_LIST FOLLOW_limit_section_in_select_stmt163	= { FOLLOW_limit_section_in_select_stmt163_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_offset_section_in_select_stmt170  */
static	ANTLR3_BITWORD FOLLOW_offset_section_in_select_stmt170_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_offset_section_in_select_stmt170	= { FOLLOW_offset_section_in_select_stmt170_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SELECT_in_select_core195  */
static	ANTLR3_BITWORD FOLLOW_SELECT_in_select_core195_bits[]	= { ANTLR3_UINT64_LIT(0x5000926804700520), ANTLR3_UINT64_LIT(0x0000000501014000) };
static  ANTLR3_BITSET_LIST FOLLOW_SELECT_in_select_core195	= { FOLLOW_SELECT_in_select_core195_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_result_column_section_in_select_core214  */
static	ANTLR3_BITWORD FOLLOW_result_column_section_in_select_core214_bits[]	= { ANTLR3_UINT64_LIT(0x0000124000000002), ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_result_column_section_in_select_core214	= { FOLLOW_result_column_section_in_select_core214_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_from_section_in_select_core225  */
static	ANTLR3_BITWORD FOLLOW_from_section_in_select_core225_bits[]	= { ANTLR3_UINT64_LIT(0x0000120000000002), ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_from_section_in_select_core225	= { FOLLOW_from_section_in_select_core225_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_where_section_in_select_core238  */
static	ANTLR3_BITWORD FOLLOW_where_section_in_select_core238_bits[]	= { ANTLR3_UINT64_LIT(0x0000120000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_where_section_in_select_core238	= { FOLLOW_where_section_in_select_core238_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_grouping_section_in_select_core250  */
static	ANTLR3_BITWORD FOLLOW_grouping_section_in_select_core250_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_grouping_section_in_select_core250	= { FOLLOW_grouping_section_in_select_core250_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_having_section_in_select_core263  */
static	ANTLR3_BITWORD FOLLOW_having_section_in_select_core263_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_having_section_in_select_core263	= { FOLLOW_having_section_in_select_core263_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASTERISK_in_result_column_section292  */
static	ANTLR3_BITWORD FOLLOW_ASTERISK_in_result_column_section292_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ASTERISK_in_result_column_section292	= { FOLLOW_ASTERISK_in_result_column_section292_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_result_column_section300  */
static	ANTLR3_BITWORD FOLLOW_expression_in_result_column_section300_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000102) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_result_column_section300	= { FOLLOW_expression_in_result_column_section300_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AS_in_result_column_section306  */
static	ANTLR3_BITWORD FOLLOW_AS_in_result_column_section306_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_AS_in_result_column_section306	= { FOLLOW_AS_in_result_column_section306_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_result_column_section308  */
static	ANTLR3_BITWORD FOLLOW_name_in_result_column_section308_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_result_column_section308	= { FOLLOW_name_in_result_column_section308_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FROM_in_from_section334  */
static	ANTLR3_BITWORD FOLLOW_FROM_in_from_section334_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_FROM_in_from_section334	= { FOLLOW_FROM_in_from_section334_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_table_name_in_from_section336  */
static	ANTLR3_BITWORD FOLLOW_table_name_in_from_section336_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_table_name_in_from_section336	= { FOLLOW_table_name_in_from_section336_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_from_section341  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_from_section341_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_from_section341	= { FOLLOW_COMMA_in_from_section341_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_table_name_in_from_section343  */
static	ANTLR3_BITWORD FOLLOW_table_name_in_from_section343_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_table_name_in_from_section343	= { FOLLOW_table_name_in_from_section343_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_data_source_in_table_name363  */
static	ANTLR3_BITWORD FOLLOW_data_source_in_table_name363_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_data_source_in_table_name363	= { FOLLOW_data_source_in_table_name363_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_collection_name_in_data_source386  */
static	ANTLR3_BITWORD FOLLOW_collection_name_in_data_source386_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_collection_name_in_data_source386	= { FOLLOW_collection_name_in_data_source386_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GROUP_in_grouping_section409  */
static	ANTLR3_BITWORD FOLLOW_GROUP_in_grouping_section409_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_GROUP_in_grouping_section409	= { FOLLOW_GROUP_in_grouping_section409_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BY_in_grouping_section411  */
static	ANTLR3_BITWORD FOLLOW_BY_in_grouping_section411_bits[]	= { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000500014000) };
static  ANTLR3_BITSET_LIST FOLLOW_BY_in_grouping_section411	= { FOLLOW_BY_in_grouping_section411_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_grouping_section413  */
static	ANTLR3_BITWORD FOLLOW_expression_in_grouping_section413_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_grouping_section413	= { FOLLOW_expression_in_grouping_section413_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_grouping_section417  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_grouping_section417_bits[]	= { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000500014000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_grouping_section417	= { FOLLOW_COMMA_in_grouping_section417_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_grouping_section419  */
static	ANTLR3_BITWORD FOLLOW_expression_in_grouping_section419_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_grouping_section419	= { FOLLOW_expression_in_grouping_section419_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_HAVING_in_having_section444  */
static	ANTLR3_BITWORD FOLLOW_HAVING_in_having_section444_bits[]	= { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000500014000) };
static  ANTLR3_BITSET_LIST FOLLOW_HAVING_in_having_section444	= { FOLLOW_HAVING_in_having_section444_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_having_section446  */
static	ANTLR3_BITWORD FOLLOW_expression_in_having_section446_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_having_section446	= { FOLLOW_expression_in_having_section446_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ORDER_in_sorting_section468  */
static	ANTLR3_BITWORD FOLLOW_ORDER_in_sorting_section468_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_ORDER_in_sorting_section468	= { FOLLOW_ORDER_in_sorting_section468_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BY_in_sorting_section470  */
static	ANTLR3_BITWORD FOLLOW_BY_in_sorting_section470_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_BY_in_sorting_section470	= { FOLLOW_BY_in_sorting_section470_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sorting_item_in_sorting_section472  */
static	ANTLR3_BITWORD FOLLOW_sorting_item_in_sorting_section472_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_sorting_item_in_sorting_section472	= { FOLLOW_sorting_item_in_sorting_section472_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_sorting_section476  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_sorting_section476_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_sorting_section476	= { FOLLOW_COMMA_in_sorting_section476_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sorting_item_in_sorting_section478  */
static	ANTLR3_BITWORD FOLLOW_sorting_item_in_sorting_section478_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_sorting_item_in_sorting_section478	= { FOLLOW_sorting_item_in_sorting_section478_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_property_in_sorting_item496  */
static	ANTLR3_BITWORD FOLLOW_property_in_sorting_item496_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000202) };
static  ANTLR3_BITSET_LIST FOLLOW_property_in_sorting_item496	= { FOLLOW_property_in_sorting_item496_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sorting_specification_in_sorting_item499  */
static	ANTLR3_BITWORD FOLLOW_sorting_specification_in_sorting_item499_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_sorting_specification_in_sorting_item499	= { FOLLOW_sorting_specification_in_sorting_item499_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LIMIT_in_limit_section540  */
static	ANTLR3_BITWORD FOLLOW_LIMIT_in_limit_section540_bits[]	= { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000000014000) };
static  ANTLR3_BITSET_LIST FOLLOW_LIMIT_in_limit_section540	= { FOLLOW_LIMIT_in_limit_section540_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_literal_in_limit_section545  */
static	ANTLR3_BITWORD FOLLOW_expression_literal_in_limit_section545_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_literal_in_limit_section545	= { FOLLOW_expression_literal_in_limit_section545_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_limit_section547  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_limit_section547_bits[]	= { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000000014000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_limit_section547	= { FOLLOW_COMMA_in_limit_section547_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_literal_in_limit_section553  */
static	ANTLR3_BITWORD FOLLOW_expression_literal_in_limit_section553_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_literal_in_limit_section553	= { FOLLOW_expression_literal_in_limit_section553_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_literal_in_offset_section578  */
static	ANTLR3_BITWORD FOLLOW_expression_literal_in_offset_section578_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_literal_in_offset_section578	= { FOLLOW_expression_literal_in_offset_section578_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CREATE_in_create_collection_stmt603  */
static	ANTLR3_BITWORD FOLLOW_CREATE_in_create_collection_stmt603_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_CREATE_in_create_collection_stmt603	= { FOLLOW_CREATE_in_create_collection_stmt603_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLLECTION_in_create_collection_stmt605  */
static	ANTLR3_BITWORD FOLLOW_COLLECTION_in_create_collection_stmt605_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_COLLECTION_in_create_collection_stmt605	= { FOLLOW_COLLECTION_in_create_collection_stmt605_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_collection_section_in_create_collection_stmt609  */
static	ANTLR3_BITWORD FOLLOW_collection_section_in_create_collection_stmt609_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_collection_section_in_create_collection_stmt609	= { FOLLOW_collection_section_in_create_collection_stmt609_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OPTIONS_in_create_collection_stmt612  */
static	ANTLR3_BITWORD FOLLOW_OPTIONS_in_create_collection_stmt612_bits[]	= { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000500014000) };
static  ANTLR3_BITSET_LIST FOLLOW_OPTIONS_in_create_collection_stmt612	= { FOLLOW_OPTIONS_in_create_collection_stmt612_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_create_collection_stmt614  */
static	ANTLR3_BITWORD FOLLOW_expression_in_create_collection_stmt614_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_create_collection_stmt614	= { FOLLOW_expression_in_create_collection_stmt614_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DROP_in_drop_collection_stmt641  */
static	ANTLR3_BITWORD FOLLOW_DROP_in_drop_collection_stmt641_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_DROP_in_drop_collection_stmt641	= { FOLLOW_DROP_in_drop_collection_stmt641_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLLECTION_in_drop_collection_stmt643  */
static	ANTLR3_BITWORD FOLLOW_COLLECTION_in_drop_collection_stmt643_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_COLLECTION_in_drop_collection_stmt643	= { FOLLOW_COLLECTION_in_drop_collection_stmt643_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_collection_section_in_drop_collection_stmt647  */
static	ANTLR3_BITWORD FOLLOW_collection_section_in_drop_collection_stmt647_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_collection_section_in_drop_collection_stmt647	= { FOLLOW_collection_section_in_drop_collection_stmt647_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CREATE_in_create_index_stmt672  */
static	ANTLR3_BITWORD FOLLOW_CREATE_in_create_index_stmt672_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_CREATE_in_create_index_stmt672	= { FOLLOW_CREATE_in_create_index_stmt672_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLLECTION_INDEX_in_create_index_stmt674  */
static	ANTLR3_BITWORD FOLLOW_COLLECTION_INDEX_in_create_index_stmt674_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_COLLECTION_INDEX_in_create_index_stmt674	= { FOLLOW_COLLECTION_INDEX_in_create_index_stmt674_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_index_section_in_create_index_stmt678  */
static	ANTLR3_BITWORD FOLLOW_index_section_in_create_index_stmt678_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_index_section_in_create_index_stmt678	= { FOLLOW_index_section_in_create_index_stmt678_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DROP_in_drop_index_stmt703  */
static	ANTLR3_BITWORD FOLLOW_DROP_in_drop_index_stmt703_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_DROP_in_drop_index_stmt703	= { FOLLOW_DROP_in_drop_index_stmt703_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLLECTION_INDEX_in_drop_index_stmt705  */
static	ANTLR3_BITWORD FOLLOW_COLLECTION_INDEX_in_drop_index_stmt705_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_COLLECTION_INDEX_in_drop_index_stmt705	= { FOLLOW_COLLECTION_INDEX_in_drop_index_stmt705_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_index_section_in_drop_index_stmt709  */
static	ANTLR3_BITWORD FOLLOW_index_section_in_drop_index_stmt709_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_index_section_in_drop_index_stmt709	= { FOLLOW_index_section_in_drop_index_stmt709_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sync_operator_in_insert_stmt737  */
static	ANTLR3_BITWORD FOLLOW_sync_operator_in_insert_stmt737_bits[]	= { ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_sync_operator_in_insert_stmt737	= { FOLLOW_sync_operator_in_insert_stmt737_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INSERT_in_insert_stmt741  */
static	ANTLR3_BITWORD FOLLOW_INSERT_in_insert_stmt741_bits[]	= { ANTLR3_UINT64_LIT(0x0008000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_INSERT_in_insert_stmt741	= { FOLLOW_INSERT_in_insert_stmt741_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INTO_in_insert_stmt743  */
static	ANTLR3_BITWORD FOLLOW_INTO_in_insert_stmt743_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_INTO_in_insert_stmt743	= { FOLLOW_INTO_in_insert_stmt743_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_collection_section_in_insert_stmt747  */
static	ANTLR3_BITWORD FOLLOW_collection_section_in_insert_stmt747_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_collection_section_in_insert_stmt747	= { FOLLOW_collection_section_in_insert_stmt747_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VALUE_in_insert_stmt749  */
static	ANTLR3_BITWORD FOLLOW_VALUE_in_insert_stmt749_bits[]	= { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000500014000) };
static  ANTLR3_BITSET_LIST FOLLOW_VALUE_in_insert_stmt749	= { FOLLOW_VALUE_in_insert_stmt749_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_insert_stmt751  */
static	ANTLR3_BITWORD FOLLOW_expression_in_insert_stmt751_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_insert_stmt751	= { FOLLOW_expression_in_insert_stmt751_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sync_operator_in_update_stmt780  */
static	ANTLR3_BITWORD FOLLOW_sync_operator_in_update_stmt780_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_sync_operator_in_update_stmt780	= { FOLLOW_sync_operator_in_update_stmt780_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_UPDATE_in_update_stmt784  */
static	ANTLR3_BITWORD FOLLOW_UPDATE_in_update_stmt784_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_UPDATE_in_update_stmt784	= { FOLLOW_UPDATE_in_update_stmt784_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_collection_section_in_update_stmt788  */
static	ANTLR3_BITWORD FOLLOW_collection_section_in_update_stmt788_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_collection_section_in_update_stmt788	= { FOLLOW_collection_section_in_update_stmt788_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SET_in_update_stmt790  */
static	ANTLR3_BITWORD FOLLOW_SET_in_update_stmt790_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_SET_in_update_stmt790	= { FOLLOW_SET_in_update_stmt790_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_property_section_in_update_stmt792  */
static	ANTLR3_BITWORD FOLLOW_property_section_in_update_stmt792_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002), ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_property_section_in_update_stmt792	= { FOLLOW_property_section_in_update_stmt792_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_update_stmt796  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_update_stmt796_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_update_stmt796	= { FOLLOW_COMMA_in_update_stmt796_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_property_section_in_update_stmt798  */
static	ANTLR3_BITWORD FOLLOW_property_section_in_update_stmt798_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002), ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_property_section_in_update_stmt798	= { FOLLOW_property_section_in_update_stmt798_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_where_section_in_update_stmt808  */
static	ANTLR3_BITWORD FOLLOW_where_section_in_update_stmt808_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_where_section_in_update_stmt808	= { FOLLOW_where_section_in_update_stmt808_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_property_in_property_section833  */
static	ANTLR3_BITWORD FOLLOW_property_in_property_section833_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_property_in_property_section833	= { FOLLOW_property_in_property_section833_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SINGLE_EQ_in_property_section835  */
static	ANTLR3_BITWORD FOLLOW_SINGLE_EQ_in_property_section835_bits[]	= { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000000014000) };
static  ANTLR3_BITSET_LIST FOLLOW_SINGLE_EQ_in_property_section835	= { FOLLOW_SINGLE_EQ_in_property_section835_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_literal_in_property_section839  */
static	ANTLR3_BITWORD FOLLOW_expression_literal_in_property_section839_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_literal_in_property_section839	= { FOLLOW_expression_literal_in_property_section839_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sync_operator_in_delete_stmt868  */
static	ANTLR3_BITWORD FOLLOW_sync_operator_in_delete_stmt868_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_sync_operator_in_delete_stmt868	= { FOLLOW_sync_operator_in_delete_stmt868_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DELETE_in_delete_stmt872  */
static	ANTLR3_BITWORD FOLLOW_DELETE_in_delete_stmt872_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_DELETE_in_delete_stmt872	= { FOLLOW_DELETE_in_delete_stmt872_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FROM_in_delete_stmt874  */
static	ANTLR3_BITWORD FOLLOW_FROM_in_delete_stmt874_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_FROM_in_delete_stmt874	= { FOLLOW_FROM_in_delete_stmt874_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_collection_section_in_delete_stmt878  */
static	ANTLR3_BITWORD FOLLOW_collection_section_in_delete_stmt878_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_collection_section_in_delete_stmt878	= { FOLLOW_collection_section_in_delete_stmt878_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_where_section_in_delete_stmt885  */
static	ANTLR3_BITWORD FOLLOW_where_section_in_delete_stmt885_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_where_section_in_delete_stmt885	= { FOLLOW_where_section_in_delete_stmt885_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_list_in_expression914  */
static	ANTLR3_BITWORD FOLLOW_expression_list_in_expression914_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_list_in_expression914	= { FOLLOW_expression_list_in_expression914_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_literal_in_expression_list933  */
static	ANTLR3_BITWORD FOLLOW_expression_literal_in_expression_list933_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_literal_in_expression_list933	= { FOLLOW_expression_literal_in_expression_list933_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_function_in_expression_list942  */
static	ANTLR3_BITWORD FOLLOW_expression_function_in_expression_list942_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_function_in_expression_list942	= { FOLLOW_expression_function_in_expression_list942_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_98_in_expression_list954  */
static	ANTLR3_BITWORD FOLLOW_98_in_expression_list954_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_98_in_expression_list954	= { FOLLOW_98_in_expression_list954_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_dictionary_in_expression_list957  */
static	ANTLR3_BITWORD FOLLOW_expression_dictionary_in_expression_list957_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000), ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_dictionary_in_expression_list957	= { FOLLOW_expression_dictionary_in_expression_list957_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_expression_list962  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_expression_list962_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_expression_list962	= { FOLLOW_COMMA_in_expression_list962_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_dictionary_in_expression_list964  */
static	ANTLR3_BITWORD FOLLOW_expression_dictionary_in_expression_list964_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000), ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_dictionary_in_expression_list964	= { FOLLOW_expression_dictionary_in_expression_list964_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_99_in_expression_list969  */
static	ANTLR3_BITWORD FOLLOW_99_in_expression_list969_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_99_in_expression_list969	= { FOLLOW_99_in_expression_list969_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_96_in_expression_list974  */
static	ANTLR3_BITWORD FOLLOW_96_in_expression_list974_bits[]	= { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000000014000) };
static  ANTLR3_BITSET_LIST FOLLOW_96_in_expression_list974	= { FOLLOW_96_in_expression_list974_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_array_in_expression_list976  */
static	ANTLR3_BITWORD FOLLOW_expression_array_in_expression_list976_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000), ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_array_in_expression_list976	= { FOLLOW_expression_array_in_expression_list976_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_expression_list980  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_expression_list980_bits[]	= { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000000014000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_expression_list980	= { FOLLOW_COMMA_in_expression_list980_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_array_in_expression_list982  */
static	ANTLR3_BITWORD FOLLOW_expression_array_in_expression_list982_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000), ANTLR3_UINT64_LIT(0x0000000200000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_array_in_expression_list982	= { FOLLOW_expression_array_in_expression_list982_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_97_in_expression_list988  */
static	ANTLR3_BITWORD FOLLOW_97_in_expression_list988_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_97_in_expression_list988	= { FOLLOW_97_in_expression_list988_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_literal_value_in_expression_literal1010  */
static	ANTLR3_BITWORD FOLLOW_expression_literal_value_in_expression_literal1010_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_literal_value_in_expression_literal1010	= { FOLLOW_expression_literal_value_in_expression_literal1010_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_property_literal_in_expression_literal_value1026  */
static	ANTLR3_BITWORD FOLLOW_property_literal_in_expression_literal_value1026_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_property_literal_in_expression_literal_value1026	= { FOLLOW_property_literal_in_expression_literal_value1026_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_integer_literal_in_expression_literal_value1033  */
static	ANTLR3_BITWORD FOLLOW_integer_literal_in_expression_literal_value1033_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_integer_literal_in_expression_literal_value1033	= { FOLLOW_integer_literal_in_expression_literal_value1033_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_real_literal_in_expression_literal_value1040  */
static	ANTLR3_BITWORD FOLLOW_real_literal_in_expression_literal_value1040_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_real_literal_in_expression_literal_value1040	= { FOLLOW_real_literal_in_expression_literal_value1040_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_string_literal_in_expression_literal_value1047  */
static	ANTLR3_BITWORD FOLLOW_string_literal_in_expression_literal_value1047_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_string_literal_in_expression_literal_value1047	= { FOLLOW_string_literal_in_expression_literal_value1047_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_true_literal_in_expression_literal_value1054  */
static	ANTLR3_BITWORD FOLLOW_true_literal_in_expression_literal_value1054_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_true_literal_in_expression_literal_value1054	= { FOLLOW_true_literal_in_expression_literal_value1054_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_false_literal_in_expression_literal_value1061  */
static	ANTLR3_BITWORD FOLLOW_false_literal_in_expression_literal_value1061_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_false_literal_in_expression_literal_value1061	= { FOLLOW_false_literal_in_expression_literal_value1061_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NIL_in_expression_literal_value1068  */
static	ANTLR3_BITWORD FOLLOW_NIL_in_expression_literal_value1068_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NIL_in_expression_literal_value1068	= { FOLLOW_NIL_in_expression_literal_value1068_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CURRENT_TIME_in_expression_literal_value1075  */
static	ANTLR3_BITWORD FOLLOW_CURRENT_TIME_in_expression_literal_value1075_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_CURRENT_TIME_in_expression_literal_value1075	= { FOLLOW_CURRENT_TIME_in_expression_literal_value1075_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CURRENT_DATE_in_expression_literal_value1082  */
static	ANTLR3_BITWORD FOLLOW_CURRENT_DATE_in_expression_literal_value1082_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_CURRENT_DATE_in_expression_literal_value1082	= { FOLLOW_CURRENT_DATE_in_expression_literal_value1082_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CURRENT_TIMESTAMP_in_expression_literal_value1089  */
static	ANTLR3_BITWORD FOLLOW_CURRENT_TIMESTAMP_in_expression_literal_value1089_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_CURRENT_TIMESTAMP_in_expression_literal_value1089	= { FOLLOW_CURRENT_TIMESTAMP_in_expression_literal_value1089_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_expression_dictionary1104  */
static	ANTLR3_BITWORD FOLLOW_name_in_expression_dictionary1104_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_expression_dictionary1104	= { FOLLOW_name_in_expression_dictionary1104_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_95_in_expression_dictionary1106  */
static	ANTLR3_BITWORD FOLLOW_95_in_expression_dictionary1106_bits[]	= { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000000014000) };
static  ANTLR3_BITSET_LIST FOLLOW_95_in_expression_dictionary1106	= { FOLLOW_95_in_expression_dictionary1106_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_literal_in_expression_dictionary1110  */
static	ANTLR3_BITWORD FOLLOW_expression_literal_in_expression_dictionary1110_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_literal_in_expression_dictionary1110	= { FOLLOW_expression_literal_in_expression_dictionary1110_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_dictionary_literal1125  */
static	ANTLR3_BITWORD FOLLOW_name_in_dictionary_literal1125_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_dictionary_literal1125	= { FOLLOW_name_in_dictionary_literal1125_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_95_in_dictionary_literal1127  */
static	ANTLR3_BITWORD FOLLOW_95_in_dictionary_literal1127_bits[]	= { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000000014000) };
static  ANTLR3_BITSET_LIST FOLLOW_95_in_dictionary_literal1127	= { FOLLOW_95_in_dictionary_literal1127_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_literal_in_dictionary_literal1131  */
static	ANTLR3_BITWORD FOLLOW_expression_literal_in_dictionary_literal1131_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_literal_in_dictionary_literal1131	= { FOLLOW_expression_literal_in_dictionary_literal1131_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_literal_in_expression_array1148  */
static	ANTLR3_BITWORD FOLLOW_expression_literal_in_expression_array1148_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_literal_in_expression_array1148	= { FOLLOW_expression_literal_in_expression_array1148_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_literal_in_array_literal1165  */
static	ANTLR3_BITWORD FOLLOW_expression_literal_in_array_literal1165_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_literal_in_array_literal1165	= { FOLLOW_expression_literal_in_array_literal1165_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_expression_function1188  */
static	ANTLR3_BITWORD FOLLOW_ID_in_expression_function1188_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_expression_function1188	= { FOLLOW_ID_in_expression_function1188_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_93_in_expression_function1190  */
static	ANTLR3_BITWORD FOLLOW_93_in_expression_function1190_bits[]	= { ANTLR3_UINT64_LIT(0x5000802800700400), ANTLR3_UINT64_LIT(0x0000000540014000) };
static  ANTLR3_BITSET_LIST FOLLOW_93_in_expression_function1190	= { FOLLOW_93_in_expression_function1190_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_value_in_expression_function1193  */
static	ANTLR3_BITWORD FOLLOW_function_value_in_expression_function1193_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_function_value_in_expression_function1193	= { FOLLOW_function_value_in_expression_function1193_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_94_in_expression_function1198  */
static	ANTLR3_BITWORD FOLLOW_94_in_expression_function1198_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_94_in_expression_function1198	= { FOLLOW_94_in_expression_function1198_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_function_name1221  */
static	ANTLR3_BITWORD FOLLOW_ID_in_function_name1221_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_function_name1221	= { FOLLOW_ID_in_function_name1221_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_function_value1236  */
static	ANTLR3_BITWORD FOLLOW_expression_in_function_value1236_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_function_value1236	= { FOLLOW_expression_in_function_value1236_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_function_value1240  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_function_value1240_bits[]	= { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000500014000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_function_value1240	= { FOLLOW_COMMA_in_function_value1240_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_function_value1242  */
static	ANTLR3_BITWORD FOLLOW_expression_in_function_value1242_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_function_value1242	= { FOLLOW_expression_in_function_value1242_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASTERISK_in_function_value1250  */
static	ANTLR3_BITWORD FOLLOW_ASTERISK_in_function_value1250_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ASTERISK_in_function_value1250	= { FOLLOW_ASTERISK_in_function_value1250_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_list_in_expression_operator1273  */
static	ANTLR3_BITWORD FOLLOW_expression_list_in_expression_operator1273_bits[]	= { ANTLR3_UINT64_LIT(0x2100050008000080), ANTLR3_UINT64_LIT(0x0000000000002018) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_list_in_expression_operator1273	= { FOLLOW_expression_list_in_expression_operator1273_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_binary_operator_in_expression_operator1278  */
static	ANTLR3_BITWORD FOLLOW_binary_operator_in_expression_operator1278_bits[]	= { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000500014000) };
static  ANTLR3_BITSET_LIST FOLLOW_binary_operator_in_expression_operator1278	= { FOLLOW_binary_operator_in_expression_operator1278_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_list_in_expression_operator1280  */
static	ANTLR3_BITWORD FOLLOW_expression_list_in_expression_operator1280_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_list_in_expression_operator1280	= { FOLLOW_expression_list_in_expression_operator1280_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SINGLE_EQ_in_binary_operator1304  */
static	ANTLR3_BITWORD FOLLOW_SINGLE_EQ_in_binary_operator1304_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SINGLE_EQ_in_binary_operator1304	= { FOLLOW_SINGLE_EQ_in_binary_operator1304_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOUBLE_EQ_in_binary_operator1311  */
static	ANTLR3_BITWORD FOLLOW_DOUBLE_EQ_in_binary_operator1311_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_DOUBLE_EQ_in_binary_operator1311	= { FOLLOW_DOUBLE_EQ_in_binary_operator1311_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OP_LT_in_binary_operator1318  */
static	ANTLR3_BITWORD FOLLOW_OP_LT_in_binary_operator1318_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OP_LT_in_binary_operator1318	= { FOLLOW_OP_LT_in_binary_operator1318_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LE_in_binary_operator1325  */
static	ANTLR3_BITWORD FOLLOW_LE_in_binary_operator1325_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LE_in_binary_operator1325	= { FOLLOW_LE_in_binary_operator1325_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GT_in_binary_operator1332  */
static	ANTLR3_BITWORD FOLLOW_GT_in_binary_operator1332_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GT_in_binary_operator1332	= { FOLLOW_GT_in_binary_operator1332_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GE_in_binary_operator1339  */
static	ANTLR3_BITWORD FOLLOW_GE_in_binary_operator1339_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GE_in_binary_operator1339	= { FOLLOW_GE_in_binary_operator1339_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOTEQ_in_binary_operator1346  */
static	ANTLR3_BITWORD FOLLOW_NOTEQ_in_binary_operator1346_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NOTEQ_in_binary_operator1346	= { FOLLOW_NOTEQ_in_binary_operator1346_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AND_in_binary_operator1353  */
static	ANTLR3_BITWORD FOLLOW_AND_in_binary_operator1353_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_AND_in_binary_operator1353	= { FOLLOW_AND_in_binary_operator1353_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OR_in_binary_operator1360  */
static	ANTLR3_BITWORD FOLLOW_OR_in_binary_operator1360_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OR_in_binary_operator1360	= { FOLLOW_OR_in_binary_operator1360_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_property_literal1373  */
static	ANTLR3_BITWORD FOLLOW_ID_in_property_literal1373_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_property_literal1373	= { FOLLOW_ID_in_property_literal1373_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_integer_literal1385  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_integer_literal1385_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_integer_literal1385	= { FOLLOW_NUMBER_in_integer_literal1385_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOAT_in_real_literal1396  */
static	ANTLR3_BITWORD FOLLOW_FLOAT_in_real_literal1396_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOAT_in_real_literal1396	= { FOLLOW_FLOAT_in_real_literal1396_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_string_literal1407  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_string_literal1407_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_string_literal1407	= { FOLLOW_STRING_in_string_literal1407_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_T_in_true_literal1418  */
static	ANTLR3_BITWORD FOLLOW_T_in_true_literal1418_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_T_in_true_literal1418	= { FOLLOW_T_in_true_literal1418_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_R_in_true_literal1420  */
static	ANTLR3_BITWORD FOLLOW_R_in_true_literal1420_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_R_in_true_literal1420	= { FOLLOW_R_in_true_literal1420_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_U_in_true_literal1422  */
static	ANTLR3_BITWORD FOLLOW_U_in_true_literal1422_bits[]	= { ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_U_in_true_literal1422	= { FOLLOW_U_in_true_literal1422_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_E_in_true_literal1424  */
static	ANTLR3_BITWORD FOLLOW_E_in_true_literal1424_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_E_in_true_literal1424	= { FOLLOW_E_in_true_literal1424_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_F_in_false_literal1436  */
static	ANTLR3_BITWORD FOLLOW_F_in_false_literal1436_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_F_in_false_literal1436	= { FOLLOW_F_in_false_literal1436_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_A_in_false_literal1438  */
static	ANTLR3_BITWORD FOLLOW_A_in_false_literal1438_bits[]	= { ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_A_in_false_literal1438	= { FOLLOW_A_in_false_literal1438_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_L_in_false_literal1440  */
static	ANTLR3_BITWORD FOLLOW_L_in_false_literal1440_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_L_in_false_literal1440	= { FOLLOW_L_in_false_literal1440_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_S_in_false_literal1442  */
static	ANTLR3_BITWORD FOLLOW_S_in_false_literal1442_bits[]	= { ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_S_in_false_literal1442	= { FOLLOW_S_in_false_literal1442_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_E_in_false_literal1444  */
static	ANTLR3_BITWORD FOLLOW_E_in_false_literal1444_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_E_in_false_literal1444	= { FOLLOW_E_in_false_literal1444_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SYNC_in_sync_operator1462  */
static	ANTLR3_BITWORD FOLLOW_SYNC_in_sync_operator1462_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SYNC_in_sync_operator1462	= { FOLLOW_SYNC_in_sync_operator1462_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASYNC_in_sync_operator1469  */
static	ANTLR3_BITWORD FOLLOW_ASYNC_in_sync_operator1469_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ASYNC_in_sync_operator1469	= { FOLLOW_ASYNC_in_sync_operator1469_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_UNION_in_compound_operator1482  */
static	ANTLR3_BITWORD FOLLOW_UNION_in_compound_operator1482_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000022) };
static  ANTLR3_BITSET_LIST FOLLOW_UNION_in_compound_operator1482	= { FOLLOW_UNION_in_compound_operator1482_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ALL_in_compound_operator1485  */
static	ANTLR3_BITWORD FOLLOW_ALL_in_compound_operator1485_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ALL_in_compound_operator1485	= { FOLLOW_ALL_in_compound_operator1485_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INTERSECT_in_compound_operator1492  */
static	ANTLR3_BITWORD FOLLOW_INTERSECT_in_compound_operator1492_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_INTERSECT_in_compound_operator1492	= { FOLLOW_INTERSECT_in_compound_operator1492_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXCEPT_in_compound_operator1497  */
static	ANTLR3_BITWORD FOLLOW_EXCEPT_in_compound_operator1497_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EXCEPT_in_compound_operator1497	= { FOLLOW_EXCEPT_in_compound_operator1497_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_property1549  */
static	ANTLR3_BITWORD FOLLOW_ID_in_property1549_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_property1549	= { FOLLOW_ID_in_property1549_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_value1563  */
static	ANTLR3_BITWORD FOLLOW_ID_in_value1563_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_value1563	= { FOLLOW_ID_in_value1563_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_name1575  */
static	ANTLR3_BITWORD FOLLOW_ID_in_name1575_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_name1575	= { FOLLOW_ID_in_name1575_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_collection_name_in_collection_section1596  */
static	ANTLR3_BITWORD FOLLOW_collection_name_in_collection_section1596_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_collection_name_in_collection_section1596	= { FOLLOW_collection_name_in_collection_section1596_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_collection_name1609  */
static	ANTLR3_BITWORD FOLLOW_ID_in_collection_name1609_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_collection_name1609	= { FOLLOW_ID_in_collection_name1609_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_string_literal_in_collection_name1614  */
static	ANTLR3_BITWORD FOLLOW_string_literal_in_collection_name1614_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_string_literal_in_collection_name1614	= { FOLLOW_string_literal_in_collection_name1614_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_index_name_in_index_section1636  */
static	ANTLR3_BITWORD FOLLOW_index_name_in_index_section1636_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_index_name_in_index_section1636	= { FOLLOW_index_name_in_index_section1636_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_index_name1649  */
static	ANTLR3_BITWORD FOLLOW_ID_in_index_name1649_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_index_name1649	= { FOLLOW_ID_in_index_name1649_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_string_literal_in_index_name1654  */
static	ANTLR3_BITWORD FOLLOW_string_literal_in_index_name1654_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_string_literal_in_index_name1654	= { FOLLOW_string_literal_in_index_name1654_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WHERE_in_where_section1675  */
static	ANTLR3_BITWORD FOLLOW_WHERE_in_where_section1675_bits[]	= { ANTLR3_UINT64_LIT(0x5000802800700000), ANTLR3_UINT64_LIT(0x0000000500014000) };
static  ANTLR3_BITSET_LIST FOLLOW_WHERE_in_where_section1675	= { FOLLOW_WHERE_in_where_section1675_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_where_section1677  */
static	ANTLR3_BITWORD FOLLOW_expression_in_where_section1677_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_where_section1677	= { FOLLOW_expression_in_where_section1677_bits, 1	};


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start statement_list
 * SQL.g:42:1: statement_list[uSQL::SQLParser *sqlParser] : statement[sqlParser] ( SEMICOLON statement[sqlParser] )* ;
 */
static void
statement_list(pSQLParser ctx, uSQL::SQLParser *sqlParser)
{
    /* Initialize rule variables
     */

    {
        // SQL.g:43:2: ( statement[sqlParser] ( SEMICOLON statement[sqlParser] )* )
        // SQL.g:43:4: statement[sqlParser] ( SEMICOLON statement[sqlParser] )*
        {
            FOLLOWPUSH(FOLLOW_statement_in_statement_list55);
            statement(ctx, sqlParser);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulestatement_listEx;
            }


            // SQL.g:43:25: ( SEMICOLON statement[sqlParser] )*

            for (;;)
            {
                int alt1=2;
                switch ( LA(1) )
                {
                case SEMICOLON:
                	{
                		alt1=1;
                	}
                    break;

                }

                switch (alt1)
                {
            	case 1:
            	    // SQL.g:43:26: SEMICOLON statement[sqlParser]
            	    {
            	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_statement_list59);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestatement_listEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_statement_in_statement_list61);
            	        statement(ctx, sqlParser);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestatement_listEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulestatement_listEx; /* Prevent compiler warnings */
    rulestatement_listEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end statement_list */

/**
 * $ANTLR start statement
 * SQL.g:46:1: statement[uSQL::SQLParser *sqlParser] : ( select_stmt[stmt] | create_collection_stmt[stmt] | drop_collection_stmt[stmt] | create_index_stmt[stmt] | drop_index_stmt[stmt] | insert_stmt[stmt] | update_stmt[stmt] | delete_stmt[stmt] );
 */
static void
statement(pSQLParser ctx, uSQL::SQLParser *sqlParser)
{
    /* Initialize rule variables
     */


    		uSQL::SQLStatement *stmt = new uSQL::SQLStatement();
    		sqlParser->addStatement(stmt);
    	
    {
        {
            //  SQL.g:51:2: ( select_stmt[stmt] | create_collection_stmt[stmt] | drop_collection_stmt[stmt] | create_index_stmt[stmt] | drop_index_stmt[stmt] | insert_stmt[stmt] | update_stmt[stmt] | delete_stmt[stmt] )

            ANTLR3_UINT32 alt2;

            alt2=8;

            switch ( LA(1) )
            {
            case SELECT:
            	{
            		alt2=1;
            	}
                break;
            case CREATE:
            	{
            		switch ( LA(2) )
            		{
            		case COLLECTION:
            			{
            				alt2=2;
            			}
            		    break;
            		case COLLECTION_INDEX:
            			{
            				alt2=4;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 2;
            		    EXCEPTION->state        = 2;


            		    goto rulestatementEx;

            		}

            	}
                break;
            case DROP:
            	{
            		switch ( LA(2) )
            		{
            		case COLLECTION:
            			{
            				alt2=3;
            			}
            		    break;
            		case COLLECTION_INDEX:
            			{
            				alt2=5;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 2;
            		    EXCEPTION->state        = 3;


            		    goto rulestatementEx;

            		}

            	}
                break;
            case SYNC:
            	{
            		switch ( LA(2) )
            		{
            		case INSERT:
            			{
            				alt2=6;
            			}
            		    break;
            		case UPDATE:
            			{
            				alt2=7;
            			}
            		    break;
            		case DELETE:
            			{
            				alt2=8;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 2;
            		    EXCEPTION->state        = 4;


            		    goto rulestatementEx;

            		}

            	}
                break;
            case ASYNC:
            	{
            		switch ( LA(2) )
            		{
            		case INSERT:
            			{
            				alt2=6;
            			}
            		    break;
            		case UPDATE:
            			{
            				alt2=7;
            			}
            		    break;
            		case DELETE:
            			{
            				alt2=8;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 2;
            		    EXCEPTION->state        = 5;


            		    goto rulestatementEx;

            		}

            	}
                break;
            case INSERT:
            	{
            		alt2=6;
            	}
                break;
            case UPDATE:
            	{
            		alt2=7;
            	}
                break;
            case DELETE:
            	{
            		alt2=8;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 2;
                EXCEPTION->state        = 0;


                goto rulestatementEx;

            }

            switch (alt2)
            {
        	case 1:
        	    // SQL.g:51:4: select_stmt[stmt]
        	    {
        	        FOLLOWPUSH(FOLLOW_select_stmt_in_statement84);
        	        select_stmt(ctx, stmt);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // SQL.g:52:4: create_collection_stmt[stmt]
        	    {
        	        FOLLOWPUSH(FOLLOW_create_collection_stmt_in_statement90);
        	        create_collection_stmt(ctx, stmt);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;
        	case 3:
        	    // SQL.g:53:4: drop_collection_stmt[stmt]
        	    {
        	        FOLLOWPUSH(FOLLOW_drop_collection_stmt_in_statement96);
        	        drop_collection_stmt(ctx, stmt);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;
        	case 4:
        	    // SQL.g:54:4: create_index_stmt[stmt]
        	    {
        	        FOLLOWPUSH(FOLLOW_create_index_stmt_in_statement102);
        	        create_index_stmt(ctx, stmt);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;
        	case 5:
        	    // SQL.g:55:4: drop_index_stmt[stmt]
        	    {
        	        FOLLOWPUSH(FOLLOW_drop_index_stmt_in_statement108);
        	        drop_index_stmt(ctx, stmt);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;
        	case 6:
        	    // SQL.g:56:4: insert_stmt[stmt]
        	    {
        	        FOLLOWPUSH(FOLLOW_insert_stmt_in_statement114);
        	        insert_stmt(ctx, stmt);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;
        	case 7:
        	    // SQL.g:57:4: update_stmt[stmt]
        	    {
        	        FOLLOWPUSH(FOLLOW_update_stmt_in_statement120);
        	        update_stmt(ctx, stmt);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;
        	case 8:
        	    // SQL.g:58:4: delete_stmt[stmt]
        	    {
        	        FOLLOWPUSH(FOLLOW_delete_stmt_in_statement126);
        	        delete_stmt(ctx, stmt);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end statement */

/**
 * $ANTLR start select_stmt
 * SQL.g:67:1: select_stmt[uSQL::SQLStatement *sqlStmt] : select_core[sqlStmt] (sortingSection= sorting_section )? (limitSection= limit_section )? (offsetSection= offset_section )? ;
 */
static void
select_stmt(pSQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
    uSQL::SQLOrderBy * sortingSection;
    #undef	RETURN_TYPE_sortingSection
    #define	RETURN_TYPE_sortingSection uSQL::SQLOrderBy *

    uSQL::SQLLimit * limitSection;
    #undef	RETURN_TYPE_limitSection
    #define	RETURN_TYPE_limitSection uSQL::SQLLimit *

    uSQL::SQLOffset * offsetSection;
    #undef	RETURN_TYPE_offsetSection
    #define	RETURN_TYPE_offsetSection uSQL::SQLOffset *

    /* Initialize rule variables
     */


    		// SELECT
    		uSQL::SQLSelect *sqlSelect = new uSQL::SQLSelect();
    		sqlStmt->addChildNode(sqlSelect);

    		sortingSection = NULL;
    		limitSection = NULL;
    		offsetSection = NULL;
    	
    {
        // SQL.g:77:2: ( select_core[sqlStmt] (sortingSection= sorting_section )? (limitSection= limit_section )? (offsetSection= offset_section )? )
        // SQL.g:77:4: select_core[sqlStmt] (sortingSection= sorting_section )? (limitSection= limit_section )? (offsetSection= offset_section )?
        {
            FOLLOWPUSH(FOLLOW_select_core_in_select_stmt150);
            select_core(ctx, sqlStmt);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleselect_stmtEx;
            }


            // SQL.g:77:25: (sortingSection= sorting_section )?
            {
                int alt3=2;
                switch ( LA(1) )
                {
                    case ORDER:
                    	{
                    		alt3=1;
                    	}
                        break;
                }

                switch (alt3)
                {
            	case 1:
            	    // SQL.g:77:26: sortingSection= sorting_section
            	    {
            	        FOLLOWPUSH(FOLLOW_sorting_section_in_select_stmt156);
            	        sortingSection=sorting_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_stmtEx;
            	        }


            	    }
            	    break;

                }
            }

            // SQL.g:77:59: (limitSection= limit_section )?
            {
                int alt4=2;
                switch ( LA(1) )
                {
                    case LIMIT:
                    	{
                    		alt4=1;
                    	}
                        break;
                }

                switch (alt4)
                {
            	case 1:
            	    // SQL.g:77:60: limitSection= limit_section
            	    {
            	        FOLLOWPUSH(FOLLOW_limit_section_in_select_stmt163);
            	        limitSection=limit_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_stmtEx;
            	        }


            	    }
            	    break;

                }
            }

            // SQL.g:77:89: (offsetSection= offset_section )?
            {
                int alt5=2;
                switch ( LA(1) )
                {
                    case CURRENT_DATE:
                    case CURRENT_TIME:
                    case CURRENT_TIMESTAMP:
                    case F:
                    case FLOAT:
                    case ID:
                    case NIL:
                    case NUMBER:
                    case STRING:
                    case T:
                    	{
                    		alt5=1;
                    	}
                        break;
                }

                switch (alt5)
                {
            	case 1:
            	    // SQL.g:77:90: offsetSection= offset_section
            	    {
            	        FOLLOWPUSH(FOLLOW_offset_section_in_select_stmt170);
            	        offsetSection=offset_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_stmtEx;
            	        }


            	    }
            	    break;

                }
            }

            {

                		// ORDER BY		
                		if (sortingSection)
                			sqlStmt->addChildNode(sortingSection);
                			
                		// LIMIT		
                		if (limitSection)
                			sqlStmt->addChildNode(limitSection);

                		// OFFSET
                		if (offsetSection)
                			sqlStmt->addChildNode(offsetSection);
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleselect_stmtEx; /* Prevent compiler warnings */
    ruleselect_stmtEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end select_stmt */

/**
 * $ANTLR start select_core
 * SQL.g:93:1: select_core[uSQL::SQLStatement *sqlStmt] : SELECT ( DISTINCT | ALL )? (columnSection= result_column_section ) (fromSection= from_section )? (whereSection= where_section )? (groupSection= grouping_section )? (havingSection= having_section )? ;
 */
static void
select_core(pSQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
    uSQL::SQLColumn * columnSection;
    #undef	RETURN_TYPE_columnSection
    #define	RETURN_TYPE_columnSection uSQL::SQLColumn *

    uSQL::SQLFrom * fromSection;
    #undef	RETURN_TYPE_fromSection
    #define	RETURN_TYPE_fromSection uSQL::SQLFrom *

    uSQL::SQLWhere * whereSection;
    #undef	RETURN_TYPE_whereSection
    #define	RETURN_TYPE_whereSection uSQL::SQLWhere *

    uSQL::SQLGroupBy * groupSection;
    #undef	RETURN_TYPE_groupSection
    #define	RETURN_TYPE_groupSection uSQL::SQLGroupBy *

    uSQL::SQLHaving * havingSection;
    #undef	RETURN_TYPE_havingSection
    #define	RETURN_TYPE_havingSection uSQL::SQLHaving *

    /* Initialize rule variables
     */


    		columnSection = NULL;
    		fromSection = NULL;
    		whereSection = NULL;
    		groupSection = NULL;
    		havingSection = NULL;
    	
    {
        // SQL.g:101:2: ( SELECT ( DISTINCT | ALL )? (columnSection= result_column_section ) (fromSection= from_section )? (whereSection= where_section )? (groupSection= grouping_section )? (havingSection= having_section )? )
        // SQL.g:101:4: SELECT ( DISTINCT | ALL )? (columnSection= result_column_section ) (fromSection= from_section )? (whereSection= where_section )? (groupSection= grouping_section )? (havingSection= having_section )?
        {
             MATCHT(SELECT, &FOLLOW_SELECT_in_select_core195);
            if  (HASEXCEPTION())
            {
                goto ruleselect_coreEx;
            }


            // SQL.g:101:11: ( DISTINCT | ALL )?
            {
                int alt6=2;
                switch ( LA(1) )
                {
                    case ALL:
                    case DISTINCT:
                    	{
                    		alt6=1;
                    	}
                        break;
                }

                switch (alt6)
                {
            	case 1:
            	    // SQL.g:
            	    {
            	        if ( LA(1) == ALL || LA(1) == DISTINCT )
            	        {
            	            CONSUME();
            	            PERRORRECOVERY=ANTLR3_FALSE;
            	        }
            	        else
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            	            EXCEPTION->expectingSet = NULL;

            	            goto ruleselect_coreEx;
            	        }


            	    }
            	    break;

                }
            }

            // SQL.g:102:4: (columnSection= result_column_section )
            // SQL.g:102:5: columnSection= result_column_section
            {
                FOLLOWPUSH(FOLLOW_result_column_section_in_select_core214);
                columnSection=result_column_section(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleselect_coreEx;
                }


            }


            // SQL.g:103:4: (fromSection= from_section )?
            {
                int alt7=2;
                switch ( LA(1) )
                {
                    case FROM:
                    	{
                    		alt7=1;
                    	}
                        break;
                }

                switch (alt7)
                {
            	case 1:
            	    // SQL.g:103:5: fromSection= from_section
            	    {
            	        FOLLOWPUSH(FOLLOW_from_section_in_select_core225);
            	        fromSection=from_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_coreEx;
            	        }


            	    }
            	    break;

                }
            }

            // SQL.g:104:4: (whereSection= where_section )?
            {
                int alt8=2;
                switch ( LA(1) )
                {
                    case WHERE:
                    	{
                    		alt8=1;
                    	}
                        break;
                }

                switch (alt8)
                {
            	case 1:
            	    // SQL.g:104:5: whereSection= where_section
            	    {
            	        FOLLOWPUSH(FOLLOW_where_section_in_select_core238);
            	        whereSection=where_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_coreEx;
            	        }


            	    }
            	    break;

                }
            }

            // SQL.g:105:4: (groupSection= grouping_section )?
            {
                int alt9=2;
                switch ( LA(1) )
                {
                    case GROUP:
                    	{
                    		alt9=1;
                    	}
                        break;
                }

                switch (alt9)
                {
            	case 1:
            	    // SQL.g:105:5: groupSection= grouping_section
            	    {
            	        FOLLOWPUSH(FOLLOW_grouping_section_in_select_core250);
            	        groupSection=grouping_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_coreEx;
            	        }


            	    }
            	    break;

                }
            }

            // SQL.g:106:4: (havingSection= having_section )?
            {
                int alt10=2;
                switch ( LA(1) )
                {
                    case HAVING:
                    	{
                    		alt10=1;
                    	}
                        break;
                }

                switch (alt10)
                {
            	case 1:
            	    // SQL.g:106:5: havingSection= having_section
            	    {
            	        FOLLOWPUSH(FOLLOW_having_section_in_select_core263);
            	        havingSection=having_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_coreEx;
            	        }


            	    }
            	    break;

                }
            }

            {

                	  
                		// COLUMN 
                		if (columnSection->hasExpressions())
                			sqlStmt->addChildNode(columnSection);
                		else 
                			delete columnSection;
                			
                		// FROM
                		if (fromSection)		
                			sqlStmt->addChildNode(fromSection);
                			
                		// WHERE
                		if (whereSection)		
                			sqlStmt->addChildNode(whereSection);

                		// GROUP BY
                		if (groupSection)		
                			sqlStmt->addChildNode(groupSection);

                		// HAVING
                		if (havingSection)		
                			sqlStmt->addChildNode(havingSection);
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleselect_coreEx; /* Prevent compiler warnings */
    ruleselect_coreEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end select_core */

/**
 * $ANTLR start result_column_section
 * SQL.g:133:1: result_column_section returns [uSQL::SQLColumn *sqlColumn] : ( ASTERISK | ( expression[sqlColumn] )? ( AS name )? );
 */
static uSQL::SQLColumn *
result_column_section(pSQLParser ctx)
{
    uSQL::SQLColumn * sqlColumn;


    /* Initialize rule variables
     */


    		sqlColumn = new uSQL::SQLColumn();
    	
    {
        {
            //  SQL.g:137:2: ( ASTERISK | ( expression[sqlColumn] )? ( AS name )? )

            ANTLR3_UINT32 alt13;

            alt13=2;

            switch ( LA(1) )
            {
            case ASTERISK:
            	{
            		alt13=1;
            	}
                break;
            case EOF:
            case AS:
            case CURRENT_DATE:
            case CURRENT_TIME:
            case CURRENT_TIMESTAMP:
            case F:
            case FLOAT:
            case FROM:
            case GROUP:
            case HAVING:
            case ID:
            case LIMIT:
            case NIL:
            case NUMBER:
            case ORDER:
            case SEMICOLON:
            case STRING:
            case T:
            case WHERE:
            case 96:
            case 98:
            	{
            		alt13=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 13;
                EXCEPTION->state        = 0;


                goto ruleresult_column_sectionEx;

            }

            switch (alt13)
            {
        	case 1:
        	    // SQL.g:137:4: ASTERISK
        	    {
        	         MATCHT(ASTERISK, &FOLLOW_ASTERISK_in_result_column_section292);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleresult_column_sectionEx;
        	        }


        	        {

        	            		uSQL::SQLAsterisk *sqlAsterisk = new uSQL::SQLAsterisk();
        	            		sqlColumn->addExpression(sqlAsterisk);
        	            	  
        	        }


        	    }
        	    break;
        	case 2:
        	    // SQL.g:141:4: ( expression[sqlColumn] )? ( AS name )?
        	    {
        	        // SQL.g:141:4: ( expression[sqlColumn] )?
        	        {
        	            int alt11=2;
        	            switch ( LA(1) )
        	            {
        	                case ID:
        	                	{
        	                		alt11=1;
        	                	}
        	                    break;
        	                case NUMBER:
        	                	{
        	                		alt11=1;
        	                	}
        	                    break;
        	                case FLOAT:
        	                	{
        	                		alt11=1;
        	                	}
        	                    break;
        	                case STRING:
        	                	{
        	                		alt11=1;
        	                	}
        	                    break;
        	                case T:
        	                	{
        	                		switch ( LA(2) )
        	                		{
        	                		    case R:
        	                		    	{
        	                		    		switch ( LA(3) )
        	                		    		{
        	                		    		    case U:
        	                		    		    	{
        	                		    		    		switch ( LA(4) )
        	                		    		    		{
        	                		    		    		    case E:
        	                		    		    		    	{
        	                		    		    		    		alt11=1;
        	                		    		    		    	}
        	                		    		    		        break;
        	                		    		    		}

        	                		    		    	}
        	                		    		        break;
        	                		    		}

        	                		    	}
        	                		        break;
        	                		}

        	                	}
        	                    break;
        	                case F:
        	                	{
        	                		switch ( LA(2) )
        	                		{
        	                		    case A:
        	                		    	{
        	                		    		switch ( LA(3) )
        	                		    		{
        	                		    		    case L:
        	                		    		    	{
        	                		    		    		switch ( LA(4) )
        	                		    		    		{
        	                		    		    		    case S:
        	                		    		    		    	{
        	                		    		    		    		switch ( LA(5) )
        	                		    		    		    		{
        	                		    		    		    		    case E:
        	                		    		    		    		    	{
        	                		    		    		    		    		alt11=1;
        	                		    		    		    		    	}
        	                		    		    		    		        break;
        	                		    		    		    		}

        	                		    		    		    	}
        	                		    		    		        break;
        	                		    		    		}

        	                		    		    	}
        	                		    		        break;
        	                		    		}

        	                		    	}
        	                		        break;
        	                		}

        	                	}
        	                    break;
        	                case NIL:
        	                	{
        	                		alt11=1;
        	                	}
        	                    break;
        	                case CURRENT_TIME:
        	                	{
        	                		alt11=1;
        	                	}
        	                    break;
        	                case CURRENT_DATE:
        	                	{
        	                		alt11=1;
        	                	}
        	                    break;
        	                case CURRENT_TIMESTAMP:
        	                case 96:
        	                case 98:
        	                	{
        	                		alt11=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt11)
        	            {
        	        	case 1:
        	        	    // SQL.g:141:5: expression[sqlColumn]
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_expression_in_result_column_section300);
        	        	        expression(ctx, sqlColumn);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleresult_column_sectionEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // SQL.g:141:29: ( AS name )?
        	        {
        	            int alt12=2;
        	            switch ( LA(1) )
        	            {
        	                case AS:
        	                	{
        	                		alt12=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt12)
        	            {
        	        	case 1:
        	        	    // SQL.g:141:30: AS name
        	        	    {
        	        	         MATCHT(AS, &FOLLOW_AS_in_result_column_section306);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleresult_column_sectionEx;
        	        	        }


        	        	        FOLLOWPUSH(FOLLOW_name_in_result_column_section308);
        	        	        name(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleresult_column_sectionEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        {

        	            	  
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleresult_column_sectionEx; /* Prevent compiler warnings */
    ruleresult_column_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlColumn;
}
/* $ANTLR end result_column_section */

/**
 * $ANTLR start from_section
 * SQL.g:145:1: from_section returns [uSQL::SQLFrom *sqlFrom] : ( FROM table_name[sqlFrom] ) ( COMMA table_name[sqlFrom] )* ;
 */
static uSQL::SQLFrom *
from_section(pSQLParser ctx)
{
    uSQL::SQLFrom * sqlFrom;


    /* Initialize rule variables
     */


    		sqlFrom = new uSQL::SQLFrom();
    	
    {
        // SQL.g:149:2: ( ( FROM table_name[sqlFrom] ) ( COMMA table_name[sqlFrom] )* )
        // SQL.g:149:4: ( FROM table_name[sqlFrom] ) ( COMMA table_name[sqlFrom] )*
        {
            // SQL.g:149:4: ( FROM table_name[sqlFrom] )
            // SQL.g:149:5: FROM table_name[sqlFrom]
            {
                 MATCHT(FROM, &FOLLOW_FROM_in_from_section334);
                if  (HASEXCEPTION())
                {
                    goto rulefrom_sectionEx;
                }


                FOLLOWPUSH(FOLLOW_table_name_in_from_section336);
                table_name(ctx, sqlFrom);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulefrom_sectionEx;
                }


            }


            // SQL.g:149:31: ( COMMA table_name[sqlFrom] )*

            for (;;)
            {
                int alt14=2;
                switch ( LA(1) )
                {
                case COMMA:
                	{
                		alt14=1;
                	}
                    break;

                }

                switch (alt14)
                {
            	case 1:
            	    // SQL.g:149:32: COMMA table_name[sqlFrom]
            	    {
            	         MATCHT(COMMA, &FOLLOW_COMMA_in_from_section341);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefrom_sectionEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_table_name_in_from_section343);
            	        table_name(ctx, sqlFrom);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefrom_sectionEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop14;	/* break out of the loop */
            	    break;
                }
            }
            loop14: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulefrom_sectionEx; /* Prevent compiler warnings */
    rulefrom_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlFrom;
}
/* $ANTLR end from_section */

/**
 * $ANTLR start table_name
 * SQL.g:152:1: table_name[uSQL::SQLFrom *sqlFrom] : dataSource= data_source ;
 */
static void
table_name(pSQLParser ctx, uSQL::SQLFrom *sqlFrom)
{
    uSQL::SQLDataSource * dataSource;
    #undef	RETURN_TYPE_dataSource
    #define	RETURN_TYPE_dataSource uSQL::SQLDataSource *

    /* Initialize rule variables
     */

    {
        // SQL.g:153:2: (dataSource= data_source )
        // SQL.g:153:4: dataSource= data_source
        {
            FOLLOWPUSH(FOLLOW_data_source_in_table_name363);
            dataSource=data_source(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletable_nameEx;
            }


            {

                		sqlFrom->addChildNode(dataSource);
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruletable_nameEx; /* Prevent compiler warnings */
    ruletable_nameEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end table_name */

/**
 * $ANTLR start data_source
 * SQL.g:158:1: data_source returns [uSQL::SQLDataSource *sqlDataSource] : collection_name ;
 */
static uSQL::SQLDataSource *
data_source(pSQLParser ctx)
{
    uSQL::SQLDataSource * sqlDataSource;


    SQLParser_collection_name_return collection_name1;
    #undef	RETURN_TYPE_collection_name1
    #define	RETURN_TYPE_collection_name1 SQLParser_collection_name_return

    /* Initialize rule variables
     */


    		sqlDataSource = new uSQL::SQLDataSource();
    	
    {
        // SQL.g:162:2: ( collection_name )
        // SQL.g:162:4: collection_name
        {
            FOLLOWPUSH(FOLLOW_collection_name_in_data_source386);
            collection_name1=collection_name(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledata_sourceEx;
            }


            {

                		// Collection
                		sqlDataSource->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, collection_name1.start, collection_name1.stop))
                ));
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruledata_sourceEx; /* Prevent compiler warnings */
    ruledata_sourceEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlDataSource;
}
/* $ANTLR end data_source */

/**
 * $ANTLR start grouping_section
 * SQL.g:168:1: grouping_section returns [uSQL::SQLGroupBy *sqlGroupBy] : GROUP BY expression[sqlGroupBy] ( COMMA expression[sqlGroupBy] )* ;
 */
static uSQL::SQLGroupBy *
grouping_section(pSQLParser ctx)
{
    uSQL::SQLGroupBy * sqlGroupBy;


    /* Initialize rule variables
     */


    		sqlGroupBy = new uSQL::SQLGroupBy();
    	
    {
        // SQL.g:172:2: ( GROUP BY expression[sqlGroupBy] ( COMMA expression[sqlGroupBy] )* )
        // SQL.g:172:4: GROUP BY expression[sqlGroupBy] ( COMMA expression[sqlGroupBy] )*
        {
             MATCHT(GROUP, &FOLLOW_GROUP_in_grouping_section409);
            if  (HASEXCEPTION())
            {
                goto rulegrouping_sectionEx;
            }


             MATCHT(BY, &FOLLOW_BY_in_grouping_section411);
            if  (HASEXCEPTION())
            {
                goto rulegrouping_sectionEx;
            }


            FOLLOWPUSH(FOLLOW_expression_in_grouping_section413);
            expression(ctx, sqlGroupBy);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulegrouping_sectionEx;
            }


            // SQL.g:172:36: ( COMMA expression[sqlGroupBy] )*

            for (;;)
            {
                int alt15=2;
                switch ( LA(1) )
                {
                case COMMA:
                	{
                		alt15=1;
                	}
                    break;

                }

                switch (alt15)
                {
            	case 1:
            	    // SQL.g:172:37: COMMA expression[sqlGroupBy]
            	    {
            	         MATCHT(COMMA, &FOLLOW_COMMA_in_grouping_section417);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulegrouping_sectionEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_expression_in_grouping_section419);
            	        expression(ctx, sqlGroupBy);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulegrouping_sectionEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop15;	/* break out of the loop */
            	    break;
                }
            }
            loop15: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulegrouping_sectionEx; /* Prevent compiler warnings */
    rulegrouping_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlGroupBy;
}
/* $ANTLR end grouping_section */

/**
 * $ANTLR start having_section
 * SQL.g:175:1: having_section returns [uSQL::SQLHaving *sqlHaving] : HAVING expression[sqlHaving] ;
 */
static uSQL::SQLHaving *
having_section(pSQLParser ctx)
{
    uSQL::SQLHaving * sqlHaving;


    /* Initialize rule variables
     */


    		sqlHaving = new uSQL::SQLHaving();
    	
    {
        // SQL.g:179:2: ( HAVING expression[sqlHaving] )
        // SQL.g:179:4: HAVING expression[sqlHaving]
        {
             MATCHT(HAVING, &FOLLOW_HAVING_in_having_section444);
            if  (HASEXCEPTION())
            {
                goto rulehaving_sectionEx;
            }


            FOLLOWPUSH(FOLLOW_expression_in_having_section446);
            expression(ctx, sqlHaving);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulehaving_sectionEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulehaving_sectionEx; /* Prevent compiler warnings */
    rulehaving_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlHaving;
}
/* $ANTLR end having_section */

/**
 * $ANTLR start sorting_section
 * SQL.g:182:1: sorting_section returns [uSQL::SQLOrderBy *sqlOrders] : ORDER BY sorting_item[sqlOrders] ( COMMA sorting_item[sqlOrders] )* ;
 */
static uSQL::SQLOrderBy *
sorting_section(pSQLParser ctx)
{
    uSQL::SQLOrderBy * sqlOrders;


    /* Initialize rule variables
     */


    		sqlOrders = new uSQL::SQLOrderBy();
    	
    {
        // SQL.g:186:2: ( ORDER BY sorting_item[sqlOrders] ( COMMA sorting_item[sqlOrders] )* )
        // SQL.g:186:4: ORDER BY sorting_item[sqlOrders] ( COMMA sorting_item[sqlOrders] )*
        {
             MATCHT(ORDER, &FOLLOW_ORDER_in_sorting_section468);
            if  (HASEXCEPTION())
            {
                goto rulesorting_sectionEx;
            }


             MATCHT(BY, &FOLLOW_BY_in_sorting_section470);
            if  (HASEXCEPTION())
            {
                goto rulesorting_sectionEx;
            }


            FOLLOWPUSH(FOLLOW_sorting_item_in_sorting_section472);
            sorting_item(ctx, sqlOrders);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesorting_sectionEx;
            }


            // SQL.g:186:37: ( COMMA sorting_item[sqlOrders] )*

            for (;;)
            {
                int alt16=2;
                switch ( LA(1) )
                {
                case COMMA:
                	{
                		alt16=1;
                	}
                    break;

                }

                switch (alt16)
                {
            	case 1:
            	    // SQL.g:186:38: COMMA sorting_item[sqlOrders]
            	    {
            	         MATCHT(COMMA, &FOLLOW_COMMA_in_sorting_section476);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesorting_sectionEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_sorting_item_in_sorting_section478);
            	        sorting_item(ctx, sqlOrders);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesorting_sectionEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop16;	/* break out of the loop */
            	    break;
                }
            }
            loop16: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulesorting_sectionEx; /* Prevent compiler warnings */
    rulesorting_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlOrders;
}
/* $ANTLR end sorting_section */

/**
 * $ANTLR start sorting_item
 * SQL.g:189:1: sorting_item[uSQL::SQLOrderBy *sqlOrders] : property ( sorting_specification )? ;
 */
static void
sorting_item(pSQLParser ctx, uSQL::SQLOrderBy *sqlOrders)
{
    SQLParser_property_return property2;
    #undef	RETURN_TYPE_property2
    #define	RETURN_TYPE_property2 SQLParser_property_return

    SQLParser_sorting_specification_return sorting_specification3;
    #undef	RETURN_TYPE_sorting_specification3
    #define	RETURN_TYPE_sorting_specification3 SQLParser_sorting_specification_return

    /* Initialize rule variables
     */

    {
        // SQL.g:190:2: ( property ( sorting_specification )? )
        // SQL.g:190:4: property ( sorting_specification )?
        {
            FOLLOWPUSH(FOLLOW_property_in_sorting_item496);
            property2=property(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesorting_itemEx;
            }


            // SQL.g:190:13: ( sorting_specification )?
            {
                int alt17=2;
                switch ( LA(1) )
                {
                    case ASC:
                    case DESC:
                    	{
                    		alt17=1;
                    	}
                        break;
                }

                switch (alt17)
                {
            	case 1:
            	    // SQL.g:190:14: sorting_specification
            	    {
            	        FOLLOWPUSH(FOLLOW_sorting_specification_in_sorting_item499);
            	        sorting_specification3=sorting_specification(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesorting_itemEx;
            	        }


            	    }
            	    break;

                }
            }

            {

                		uSQL::SQLOrder *sqlOrder = new uSQL::SQLOrder();
                		sqlOrder->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, property2.start, property2.stop))
                ));
                		if (sorting_specification)
                			sqlOrder->setOrder(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, sorting_specification3.start, sorting_specification3.stop))
                ));
                		sqlOrders->addChildNode(sqlOrder);
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulesorting_itemEx; /* Prevent compiler warnings */
    rulesorting_itemEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end sorting_item */

/**
 * $ANTLR start sorting_specification
 * SQL.g:199:1: sorting_specification : ( ASC | DESC );
 */
static SQLParser_sorting_specification_return
sorting_specification(pSQLParser ctx)
{
    SQLParser_sorting_specification_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // SQL.g:200:2: ( ASC | DESC )
        // SQL.g:
        {
            if ( LA(1) == ASC || LA(1) == DESC )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto rulesorting_specificationEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulesorting_specificationEx; /* Prevent compiler warnings */
    rulesorting_specificationEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end sorting_specification */

/**
 * $ANTLR start limit_section
 * SQL.g:204:1: limit_section returns [uSQL::SQLLimit *sqlLimit] : LIMIT (offsetExpr= expression_literal COMMA )? countExpr= expression_literal ;
 */
static uSQL::SQLLimit *
limit_section(pSQLParser ctx)
{
    uSQL::SQLLimit * sqlLimit;


    uSQL::SQLExpression * offsetExpr;
    #undef	RETURN_TYPE_offsetExpr
    #define	RETURN_TYPE_offsetExpr uSQL::SQLExpression *

    uSQL::SQLExpression * countExpr;
    #undef	RETURN_TYPE_countExpr
    #define	RETURN_TYPE_countExpr uSQL::SQLExpression *

    /* Initialize rule variables
     */


    		sqlLimit = new uSQL::SQLLimit();
    		offsetExpr = NULL;
    	
    {
        // SQL.g:209:2: ( LIMIT (offsetExpr= expression_literal COMMA )? countExpr= expression_literal )
        // SQL.g:209:4: LIMIT (offsetExpr= expression_literal COMMA )? countExpr= expression_literal
        {
             MATCHT(LIMIT, &FOLLOW_LIMIT_in_limit_section540);
            if  (HASEXCEPTION())
            {
                goto rulelimit_sectionEx;
            }


            // SQL.g:209:10: (offsetExpr= expression_literal COMMA )?
            {
                int alt18=2;
                switch ( LA(1) )
                {
                    case ID:
                    	{
                    		switch ( LA(2) )
                    		{
                    		    case COMMA:
                    		    	{
                    		    		alt18=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                    case NUMBER:
                    	{
                    		switch ( LA(2) )
                    		{
                    		    case COMMA:
                    		    	{
                    		    		alt18=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                    case FLOAT:
                    	{
                    		switch ( LA(2) )
                    		{
                    		    case COMMA:
                    		    	{
                    		    		alt18=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                    case STRING:
                    	{
                    		switch ( LA(2) )
                    		{
                    		    case COMMA:
                    		    	{
                    		    		alt18=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                    case T:
                    	{
                    		switch ( LA(2) )
                    		{
                    		    case R:
                    		    	{
                    		    		switch ( LA(3) )
                    		    		{
                    		    		    case U:
                    		    		    	{
                    		    		    		switch ( LA(4) )
                    		    		    		{
                    		    		    		    case E:
                    		    		    		    	{
                    		    		    		    		switch ( LA(5) )
                    		    		    		    		{
                    		    		    		    		    case COMMA:
                    		    		    		    		    	{
                    		    		    		    		    		alt18=1;
                    		    		    		    		    	}
                    		    		    		    		        break;
                    		    		    		    		}

                    		    		    		    	}
                    		    		    		        break;
                    		    		    		}

                    		    		    	}
                    		    		        break;
                    		    		}

                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                    case F:
                    	{
                    		switch ( LA(2) )
                    		{
                    		    case A:
                    		    	{
                    		    		switch ( LA(3) )
                    		    		{
                    		    		    case L:
                    		    		    	{
                    		    		    		switch ( LA(4) )
                    		    		    		{
                    		    		    		    case S:
                    		    		    		    	{
                    		    		    		    		switch ( LA(5) )
                    		    		    		    		{
                    		    		    		    		    case E:
                    		    		    		    		    	{
                    		    		    		    		    		switch ( LA(6) )
                    		    		    		    		    		{
                    		    		    		    		    		    case COMMA:
                    		    		    		    		    		    	{
                    		    		    		    		    		    		alt18=1;
                    		    		    		    		    		    	}
                    		    		    		    		    		        break;
                    		    		    		    		    		}

                    		    		    		    		    	}
                    		    		    		    		        break;
                    		    		    		    		}

                    		    		    		    	}
                    		    		    		        break;
                    		    		    		}

                    		    		    	}
                    		    		        break;
                    		    		}

                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                    case NIL:
                    	{
                    		switch ( LA(2) )
                    		{
                    		    case COMMA:
                    		    	{
                    		    		alt18=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                    case CURRENT_TIME:
                    	{
                    		switch ( LA(2) )
                    		{
                    		    case COMMA:
                    		    	{
                    		    		alt18=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                    case CURRENT_DATE:
                    	{
                    		switch ( LA(2) )
                    		{
                    		    case COMMA:
                    		    	{
                    		    		alt18=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                    case CURRENT_TIMESTAMP:
                    	{
                    		switch ( LA(2) )
                    		{
                    		    case COMMA:
                    		    	{
                    		    		alt18=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                }

                switch (alt18)
                {
            	case 1:
            	    // SQL.g:209:11: offsetExpr= expression_literal COMMA
            	    {
            	        FOLLOWPUSH(FOLLOW_expression_literal_in_limit_section545);
            	        offsetExpr=expression_literal(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelimit_sectionEx;
            	        }


            	         MATCHT(COMMA, &FOLLOW_COMMA_in_limit_section547);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelimit_sectionEx;
            	        }


            	    }
            	    break;

                }
            }

            FOLLOWPUSH(FOLLOW_expression_literal_in_limit_section553);
            countExpr=expression_literal(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulelimit_sectionEx;
            }


            {

                		if (offsetExpr)
                			sqlLimit->addChildNode(offsetExpr);
                		sqlLimit->addChildNode(countExpr);
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulelimit_sectionEx; /* Prevent compiler warnings */
    rulelimit_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlLimit;
}
/* $ANTLR end limit_section */

/**
 * $ANTLR start offset_section
 * SQL.g:216:1: offset_section returns [uSQL::SQLOffset *sqlOffset] : offsetExpr= expression_literal ;
 */
static uSQL::SQLOffset *
offset_section(pSQLParser ctx)
{
    uSQL::SQLOffset * sqlOffset;


    uSQL::SQLExpression * offsetExpr;
    #undef	RETURN_TYPE_offsetExpr
    #define	RETURN_TYPE_offsetExpr uSQL::SQLExpression *

    /* Initialize rule variables
     */


    		sqlOffset = new uSQL::SQLOffset();
    	
    {
        // SQL.g:220:2: (offsetExpr= expression_literal )
        // SQL.g:220:4: offsetExpr= expression_literal
        {
            FOLLOWPUSH(FOLLOW_expression_literal_in_offset_section578);
            offsetExpr=expression_literal(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleoffset_sectionEx;
            }


            {

                		sqlOffset->addChildNode(offsetExpr);
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleoffset_sectionEx; /* Prevent compiler warnings */
    ruleoffset_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlOffset;
}
/* $ANTLR end offset_section */

/**
 * $ANTLR start create_collection_stmt
 * SQL.g:231:1: create_collection_stmt[uSQL::SQLStatement *sqlStmt] : CREATE COLLECTION collectionNode= collection_section ( OPTIONS expression[sqlOpt] )? ;
 */
static void
create_collection_stmt(pSQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
    uSQL::SQLCollection * collectionNode;
    #undef	RETURN_TYPE_collectionNode
    #define	RETURN_TYPE_collectionNode uSQL::SQLCollection *

    /* Initialize rule variables
     */

    	
    		uSQL::SQLOption *sqlOpt = new uSQL::SQLOption();
    	
    {
        // SQL.g:235:2: ( CREATE COLLECTION collectionNode= collection_section ( OPTIONS expression[sqlOpt] )? )
        // SQL.g:235:4: CREATE COLLECTION collectionNode= collection_section ( OPTIONS expression[sqlOpt] )?
        {
             MATCHT(CREATE, &FOLLOW_CREATE_in_create_collection_stmt603);
            if  (HASEXCEPTION())
            {
                goto rulecreate_collection_stmtEx;
            }


             MATCHT(COLLECTION, &FOLLOW_COLLECTION_in_create_collection_stmt605);
            if  (HASEXCEPTION())
            {
                goto rulecreate_collection_stmtEx;
            }


            FOLLOWPUSH(FOLLOW_collection_section_in_create_collection_stmt609);
            collectionNode=collection_section(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecreate_collection_stmtEx;
            }


            // SQL.g:235:56: ( OPTIONS expression[sqlOpt] )?
            {
                int alt19=2;
                switch ( LA(1) )
                {
                    case OPTIONS:
                    	{
                    		alt19=1;
                    	}
                        break;
                }

                switch (alt19)
                {
            	case 1:
            	    // SQL.g:235:57: OPTIONS expression[sqlOpt]
            	    {
            	         MATCHT(OPTIONS, &FOLLOW_OPTIONS_in_create_collection_stmt612);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecreate_collection_stmtEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_expression_in_create_collection_stmt614);
            	        expression(ctx, sqlOpt);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecreate_collection_stmtEx;
            	        }


            	    }
            	    break;

                }
            }

            {

                		// CREATE
                		uSQL::SQLCreate *sqlCmd = new uSQL::SQLCreate();
                		sqlStmt->addChildNode(sqlCmd);
                		
                		// Collection
                		sqlCmd->addChildNode(collectionNode);

                		// Option 
                		if (sqlOpt->hasExpressions())
                			sqlCmd->addChildNode(sqlOpt);
                		else 
                			delete sqlOpt;
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulecreate_collection_stmtEx; /* Prevent compiler warnings */
    rulecreate_collection_stmtEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end create_collection_stmt */

/**
 * $ANTLR start drop_collection_stmt
 * SQL.g:257:1: drop_collection_stmt[uSQL::SQLStatement *sqlStmt] : DROP COLLECTION collectionNode= collection_section ;
 */
static void
drop_collection_stmt(pSQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
    uSQL::SQLCollection * collectionNode;
    #undef	RETURN_TYPE_collectionNode
    #define	RETURN_TYPE_collectionNode uSQL::SQLCollection *

    /* Initialize rule variables
     */

    	
    	
    {
        // SQL.g:260:2: ( DROP COLLECTION collectionNode= collection_section )
        // SQL.g:260:4: DROP COLLECTION collectionNode= collection_section
        {
             MATCHT(DROP, &FOLLOW_DROP_in_drop_collection_stmt641);
            if  (HASEXCEPTION())
            {
                goto ruledrop_collection_stmtEx;
            }


             MATCHT(COLLECTION, &FOLLOW_COLLECTION_in_drop_collection_stmt643);
            if  (HASEXCEPTION())
            {
                goto ruledrop_collection_stmtEx;
            }


            FOLLOWPUSH(FOLLOW_collection_section_in_drop_collection_stmt647);
            collectionNode=collection_section(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledrop_collection_stmtEx;
            }


            {

                		// DROP
                		uSQL::SQLDrop *sqlCmd = new uSQL::SQLDrop();
                		sqlStmt->addChildNode(sqlCmd);
                		
                		// Collection
                		sqlCmd->addChildNode(collectionNode);
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruledrop_collection_stmtEx; /* Prevent compiler warnings */
    ruledrop_collection_stmtEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end drop_collection_stmt */

/**
 * $ANTLR start create_index_stmt
 * SQL.g:277:1: create_index_stmt[uSQL::SQLStatement *sqlStmt] : CREATE COLLECTION_INDEX indexNode= index_section ;
 */
static void
create_index_stmt(pSQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
    uSQL::SQLIndex * indexNode;
    #undef	RETURN_TYPE_indexNode
    #define	RETURN_TYPE_indexNode uSQL::SQLIndex *

    /* Initialize rule variables
     */

    	
    	
    {
        // SQL.g:280:2: ( CREATE COLLECTION_INDEX indexNode= index_section )
        // SQL.g:280:4: CREATE COLLECTION_INDEX indexNode= index_section
        {
             MATCHT(CREATE, &FOLLOW_CREATE_in_create_index_stmt672);
            if  (HASEXCEPTION())
            {
                goto rulecreate_index_stmtEx;
            }


             MATCHT(COLLECTION_INDEX, &FOLLOW_COLLECTION_INDEX_in_create_index_stmt674);
            if  (HASEXCEPTION())
            {
                goto rulecreate_index_stmtEx;
            }


            FOLLOWPUSH(FOLLOW_index_section_in_create_index_stmt678);
            indexNode=index_section(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecreate_index_stmtEx;
            }


            {

                		// DROP
                		uSQL::SQLCreateIndex *sqlCmd = new uSQL::SQLCreateIndex();
                		sqlStmt->addChildNode(sqlCmd);
                		
                		// Collection
                		sqlCmd->addChildNode(indexNode);
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulecreate_index_stmtEx; /* Prevent compiler warnings */
    rulecreate_index_stmtEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end create_index_stmt */

/**
 * $ANTLR start drop_index_stmt
 * SQL.g:297:1: drop_index_stmt[uSQL::SQLStatement *sqlStmt] : DROP COLLECTION_INDEX indexNode= index_section ;
 */
static void
drop_index_stmt(pSQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
    uSQL::SQLIndex * indexNode;
    #undef	RETURN_TYPE_indexNode
    #define	RETURN_TYPE_indexNode uSQL::SQLIndex *

    /* Initialize rule variables
     */

    	
    	
    {
        // SQL.g:300:2: ( DROP COLLECTION_INDEX indexNode= index_section )
        // SQL.g:300:4: DROP COLLECTION_INDEX indexNode= index_section
        {
             MATCHT(DROP, &FOLLOW_DROP_in_drop_index_stmt703);
            if  (HASEXCEPTION())
            {
                goto ruledrop_index_stmtEx;
            }


             MATCHT(COLLECTION_INDEX, &FOLLOW_COLLECTION_INDEX_in_drop_index_stmt705);
            if  (HASEXCEPTION())
            {
                goto ruledrop_index_stmtEx;
            }


            FOLLOWPUSH(FOLLOW_index_section_in_drop_index_stmt709);
            indexNode=index_section(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledrop_index_stmtEx;
            }


            {

                		// DROP
                		uSQL::SQLDropIndex *sqlCmd = new uSQL::SQLDropIndex();
                		sqlStmt->addChildNode(sqlCmd);
                		
                		// Collection
                		sqlCmd->addChildNode(indexNode);
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruledrop_index_stmtEx; /* Prevent compiler warnings */
    ruledrop_index_stmtEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end drop_index_stmt */

/**
 * $ANTLR start insert_stmt
 * SQL.g:317:1: insert_stmt[uSQL::SQLStatement *sqlStmt] : (isAsync= sync_operator )? INSERT INTO collectionNode= collection_section VALUE expression[sqlValue] ;
 */
static void
insert_stmt(pSQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
    bool isAsync;
    #undef	RETURN_TYPE_isAsync
    #define	RETURN_TYPE_isAsync bool

    uSQL::SQLCollection * collectionNode;
    #undef	RETURN_TYPE_collectionNode
    #define	RETURN_TYPE_collectionNode uSQL::SQLCollection *

    /* Initialize rule variables
     */


    		uSQL::SQLValue *sqlValue = new uSQL::SQLValue();
    		isAsync = false;
    	
    {
        // SQL.g:322:2: ( (isAsync= sync_operator )? INSERT INTO collectionNode= collection_section VALUE expression[sqlValue] )
        // SQL.g:322:4: (isAsync= sync_operator )? INSERT INTO collectionNode= collection_section VALUE expression[sqlValue]
        {
            // SQL.g:322:4: (isAsync= sync_operator )?
            {
                int alt20=2;
                switch ( LA(1) )
                {
                    case ASYNC:
                    case SYNC:
                    	{
                    		alt20=1;
                    	}
                        break;
                }

                switch (alt20)
                {
            	case 1:
            	    // SQL.g:322:5: isAsync= sync_operator
            	    {
            	        FOLLOWPUSH(FOLLOW_sync_operator_in_insert_stmt737);
            	        isAsync=sync_operator(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleinsert_stmtEx;
            	        }


            	    }
            	    break;

                }
            }

             MATCHT(INSERT, &FOLLOW_INSERT_in_insert_stmt741);
            if  (HASEXCEPTION())
            {
                goto ruleinsert_stmtEx;
            }


             MATCHT(INTO, &FOLLOW_INTO_in_insert_stmt743);
            if  (HASEXCEPTION())
            {
                goto ruleinsert_stmtEx;
            }


            FOLLOWPUSH(FOLLOW_collection_section_in_insert_stmt747);
            collectionNode=collection_section(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinsert_stmtEx;
            }


             MATCHT(VALUE, &FOLLOW_VALUE_in_insert_stmt749);
            if  (HASEXCEPTION())
            {
                goto ruleinsert_stmtEx;
            }


            FOLLOWPUSH(FOLLOW_expression_in_insert_stmt751);
            expression(ctx, sqlValue);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinsert_stmtEx;
            }


            {

                		// INSERT
                		uSQL::SQLInsert *sqlCmd = new uSQL::SQLInsert();
                		sqlCmd->setAsyncEnabled(isAsync);
                		sqlStmt->addChildNode(sqlCmd);

                		// Collection
                		sqlCmd->addChildNode(collectionNode);
                		
                		// Value
                		sqlCmd->addChildNode(sqlValue);
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleinsert_stmtEx; /* Prevent compiler warnings */
    ruleinsert_stmtEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end insert_stmt */

/**
 * $ANTLR start update_stmt
 * SQL.g:343:1: update_stmt[uSQL::SQLStatement *sqlStmt] : (isAsync= sync_operator )? UPDATE collectionNode= collection_section SET property_section[sqlSet] ( COMMA property_section[sqlSet] )* (whereSection= where_section )? ;
 */
static void
update_stmt(pSQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
    bool isAsync;
    #undef	RETURN_TYPE_isAsync
    #define	RETURN_TYPE_isAsync bool

    uSQL::SQLCollection * collectionNode;
    #undef	RETURN_TYPE_collectionNode
    #define	RETURN_TYPE_collectionNode uSQL::SQLCollection *

    uSQL::SQLWhere * whereSection;
    #undef	RETURN_TYPE_whereSection
    #define	RETURN_TYPE_whereSection uSQL::SQLWhere *

    /* Initialize rule variables
     */


    		uSQL::SQLSet *sqlSet = new uSQL::SQLSet();
    		isAsync = false;
    		whereSection = NULL;
    	
    {
        // SQL.g:349:2: ( (isAsync= sync_operator )? UPDATE collectionNode= collection_section SET property_section[sqlSet] ( COMMA property_section[sqlSet] )* (whereSection= where_section )? )
        // SQL.g:349:4: (isAsync= sync_operator )? UPDATE collectionNode= collection_section SET property_section[sqlSet] ( COMMA property_section[sqlSet] )* (whereSection= where_section )?
        {
            // SQL.g:349:4: (isAsync= sync_operator )?
            {
                int alt21=2;
                switch ( LA(1) )
                {
                    case ASYNC:
                    case SYNC:
                    	{
                    		alt21=1;
                    	}
                        break;
                }

                switch (alt21)
                {
            	case 1:
            	    // SQL.g:349:5: isAsync= sync_operator
            	    {
            	        FOLLOWPUSH(FOLLOW_sync_operator_in_update_stmt780);
            	        isAsync=sync_operator(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleupdate_stmtEx;
            	        }


            	    }
            	    break;

                }
            }

             MATCHT(UPDATE, &FOLLOW_UPDATE_in_update_stmt784);
            if  (HASEXCEPTION())
            {
                goto ruleupdate_stmtEx;
            }


            FOLLOWPUSH(FOLLOW_collection_section_in_update_stmt788);
            collectionNode=collection_section(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleupdate_stmtEx;
            }


             MATCHT(SET, &FOLLOW_SET_in_update_stmt790);
            if  (HASEXCEPTION())
            {
                goto ruleupdate_stmtEx;
            }


            FOLLOWPUSH(FOLLOW_property_section_in_update_stmt792);
            property_section(ctx, sqlSet);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleupdate_stmtEx;
            }


            // SQL.g:349:99: ( COMMA property_section[sqlSet] )*

            for (;;)
            {
                int alt22=2;
                switch ( LA(1) )
                {
                case COMMA:
                	{
                		alt22=1;
                	}
                    break;

                }

                switch (alt22)
                {
            	case 1:
            	    // SQL.g:349:100: COMMA property_section[sqlSet]
            	    {
            	         MATCHT(COMMA, &FOLLOW_COMMA_in_update_stmt796);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleupdate_stmtEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_property_section_in_update_stmt798);
            	        property_section(ctx, sqlSet);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleupdate_stmtEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop22;	/* break out of the loop */
            	    break;
                }
            }
            loop22: ; /* Jump out to here if this rule does not match */


            // SQL.g:349:133: (whereSection= where_section )?
            {
                int alt23=2;
                switch ( LA(1) )
                {
                    case WHERE:
                    	{
                    		alt23=1;
                    	}
                        break;
                }

                switch (alt23)
                {
            	case 1:
            	    // SQL.g:349:134: whereSection= where_section
            	    {
            	        FOLLOWPUSH(FOLLOW_where_section_in_update_stmt808);
            	        whereSection=where_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleupdate_stmtEx;
            	        }


            	    }
            	    break;

                }
            }

            {

                		// INSERT
                		uSQL::SQLUpdate *sqlCmd = new uSQL::SQLUpdate();
                		sqlCmd->setAsyncEnabled(isAsync);
                		sqlStmt->addChildNode(sqlCmd);

                		// Collection
                		sqlCmd->addChildNode(collectionNode);
                		
                		// Set
                		sqlCmd->addChildNode(sqlSet);

                		// WHERE
                		if (whereSection)		
                			sqlStmt->addChildNode(whereSection);
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleupdate_stmtEx; /* Prevent compiler warnings */
    ruleupdate_stmtEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end update_stmt */

/**
 * $ANTLR start property_section
 * SQL.g:369:1: property_section[uSQL::SQLSet *sqlSet] : property SINGLE_EQ exprRight= expression_literal ;
 */
static void
property_section(pSQLParser ctx, uSQL::SQLSet *sqlSet)
{
    uSQL::SQLExpression * exprRight;
    #undef	RETURN_TYPE_exprRight
    #define	RETURN_TYPE_exprRight uSQL::SQLExpression *

    SQLParser_property_return property4;
    #undef	RETURN_TYPE_property4
    #define	RETURN_TYPE_property4 SQLParser_property_return

    /* Initialize rule variables
     */


    		
    	
    {
        // SQL.g:373:2: ( property SINGLE_EQ exprRight= expression_literal )
        // SQL.g:373:4: property SINGLE_EQ exprRight= expression_literal
        {
            FOLLOWPUSH(FOLLOW_property_in_property_section833);
            property4=property(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleproperty_sectionEx;
            }


             MATCHT(SINGLE_EQ, &FOLLOW_SINGLE_EQ_in_property_section835);
            if  (HASEXCEPTION())
            {
                goto ruleproperty_sectionEx;
            }


            FOLLOWPUSH(FOLLOW_expression_literal_in_property_section839);
            exprRight=expression_literal(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleproperty_sectionEx;
            }


            {

                		uSQL::SQLOperator *sqlOper = new uSQL::SQLOperator();
                		sqlOper->setLiteralType(uSQL::SQLExpression::OPERATOR);
                		sqlOper->setValue(1/*uSQL::SQLOperator::SEQ*/);
                		sqlSet->addChildNode(sqlOper);
                		
                		uSQL::SQLExpression *exprLeft = new uSQL::SQLExpression();
                		exprLeft->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, property4.start, property4.stop))
                ));
                		sqlOper->addExpression(exprLeft);
                		
                		sqlOper->addExpression(exprRight);
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleproperty_sectionEx; /* Prevent compiler warnings */
    ruleproperty_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end property_section */

/**
 * $ANTLR start delete_stmt
 * SQL.g:395:1: delete_stmt[uSQL::SQLStatement *sqlStmt] : (isAsync= sync_operator )? DELETE FROM collectionNode= collection_section (whereSection= where_section )? ;
 */
static void
delete_stmt(pSQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
    bool isAsync;
    #undef	RETURN_TYPE_isAsync
    #define	RETURN_TYPE_isAsync bool

    uSQL::SQLCollection * collectionNode;
    #undef	RETURN_TYPE_collectionNode
    #define	RETURN_TYPE_collectionNode uSQL::SQLCollection *

    uSQL::SQLWhere * whereSection;
    #undef	RETURN_TYPE_whereSection
    #define	RETURN_TYPE_whereSection uSQL::SQLWhere *

    /* Initialize rule variables
     */


    		isAsync = false;
    		whereSection = NULL;
    	
    {
        // SQL.g:400:2: ( (isAsync= sync_operator )? DELETE FROM collectionNode= collection_section (whereSection= where_section )? )
        // SQL.g:400:4: (isAsync= sync_operator )? DELETE FROM collectionNode= collection_section (whereSection= where_section )?
        {
            // SQL.g:400:4: (isAsync= sync_operator )?
            {
                int alt24=2;
                switch ( LA(1) )
                {
                    case ASYNC:
                    case SYNC:
                    	{
                    		alt24=1;
                    	}
                        break;
                }

                switch (alt24)
                {
            	case 1:
            	    // SQL.g:400:5: isAsync= sync_operator
            	    {
            	        FOLLOWPUSH(FOLLOW_sync_operator_in_delete_stmt868);
            	        isAsync=sync_operator(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledelete_stmtEx;
            	        }


            	    }
            	    break;

                }
            }

             MATCHT(DELETE, &FOLLOW_DELETE_in_delete_stmt872);
            if  (HASEXCEPTION())
            {
                goto ruledelete_stmtEx;
            }


             MATCHT(FROM, &FOLLOW_FROM_in_delete_stmt874);
            if  (HASEXCEPTION())
            {
                goto ruledelete_stmtEx;
            }


            FOLLOWPUSH(FOLLOW_collection_section_in_delete_stmt878);
            collectionNode=collection_section(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledelete_stmtEx;
            }


            // SQL.g:400:75: (whereSection= where_section )?
            {
                int alt25=2;
                switch ( LA(1) )
                {
                    case WHERE:
                    	{
                    		alt25=1;
                    	}
                        break;
                }

                switch (alt25)
                {
            	case 1:
            	    // SQL.g:400:76: whereSection= where_section
            	    {
            	        FOLLOWPUSH(FOLLOW_where_section_in_delete_stmt885);
            	        whereSection=where_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledelete_stmtEx;
            	        }


            	    }
            	    break;

                }
            }

            {

                		// DELETE
                		uSQL::SQLDelete *sqlCmd = new uSQL::SQLDelete();
                		sqlCmd->setAsyncEnabled(isAsync);
                		sqlStmt->addChildNode(sqlCmd);

                		// Collection
                		sqlCmd->addChildNode(collectionNode);
                		
                		// WHERE
                		if (whereSection)		
                			sqlStmt->addChildNode(whereSection);
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruledelete_stmtEx; /* Prevent compiler warnings */
    ruledelete_stmtEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end delete_stmt */

/**
 * $ANTLR start expression
 * SQL.g:423:1: expression[uSQL::SQLNode *parentNode] : expression_list[sqlNodeList] ;
 */
static void
expression(pSQLParser ctx, uSQL::SQLNode *parentNode)
{
    /* Initialize rule variables
     */


    		uSQL::SQLNodeList sqlNodeList;
    	
    {
        // SQL.g:427:3: ( expression_list[sqlNodeList] )
        // SQL.g:427:5: expression_list[sqlNodeList]
        {
            FOLLOWPUSH(FOLLOW_expression_list_in_expression914);
            expression_list(ctx, sqlNodeList);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionEx;
            }


            {

                 		CG_ANTLR3_SQLNODE_ADDNODES(parentNode, &sqlNodeList);
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end expression */

/**
 * $ANTLR start expression_list
 * SQL.g:432:1: expression_list[uSQL::SQLNodeList &sqlNodeList] : (sqlExpr= expression_literal |sqlFunc= expression_function | '{' ( expression_dictionary[sqlNodeList] ) ( COMMA expression_dictionary[sqlNodeList] )* '}' | '[' expression_array[sqlNodeList] ( COMMA expression_array[sqlNodeList] )* ']' );
 */
static void
expression_list(pSQLParser ctx, uSQL::SQLNodeList &sqlNodeList)
{
    uSQL::SQLExpression * sqlExpr;
    #undef	RETURN_TYPE_sqlExpr
    #define	RETURN_TYPE_sqlExpr uSQL::SQLExpression *

    uSQL::SQLFunction * sqlFunc;
    #undef	RETURN_TYPE_sqlFunc
    #define	RETURN_TYPE_sqlFunc uSQL::SQLFunction *

    /* Initialize rule variables
     */

    {
        {
            //  SQL.g:433:3: (sqlExpr= expression_literal |sqlFunc= expression_function | '{' ( expression_dictionary[sqlNodeList] ) ( COMMA expression_dictionary[sqlNodeList] )* '}' | '[' expression_array[sqlNodeList] ( COMMA expression_array[sqlNodeList] )* ']' )

            ANTLR3_UINT32 alt28;

            alt28=4;

            switch ( LA(1) )
            {
            case ID:
            	{
            		switch ( LA(2) )
            		{
            		case 93:
            			{
            				alt28=2;
            			}
            		    break;
            		case EOF:
            		case AND:
            		case AS:
            		case COMMA:
            		case CURRENT_DATE:
            		case CURRENT_TIME:
            		case CURRENT_TIMESTAMP:
            		case DOUBLE_EQ:
            		case F:
            		case FLOAT:
            		case FROM:
            		case GE:
            		case GROUP:
            		case GT:
            		case HAVING:
            		case ID:
            		case LE:
            		case LIMIT:
            		case NIL:
            		case NOTEQ:
            		case NUMBER:
            		case OP_LT:
            		case OR:
            		case ORDER:
            		case SEMICOLON:
            		case SINGLE_EQ:
            		case STRING:
            		case T:
            		case WHERE:
            		case 94:
            			{
            				alt28=1;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 28;
            		    EXCEPTION->state        = 1;


            		    goto ruleexpression_listEx;

            		}

            	}
                break;
            case CURRENT_DATE:
            case CURRENT_TIME:
            case CURRENT_TIMESTAMP:
            case F:
            case FLOAT:
            case NIL:
            case NUMBER:
            case STRING:
            case T:
            	{
            		alt28=1;
            	}
                break;
            case 98:
            	{
            		alt28=3;
            	}
                break;
            case 96:
            	{
            		alt28=4;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 28;
                EXCEPTION->state        = 0;


                goto ruleexpression_listEx;

            }

            switch (alt28)
            {
        	case 1:
        	    // SQL.g:433:5: sqlExpr= expression_literal
        	    {
        	        FOLLOWPUSH(FOLLOW_expression_literal_in_expression_list933);
        	        sqlExpr=expression_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpression_listEx;
        	        }


        	        {

        	            		sqlNodeList.push_back(sqlExpr);
        	            	  
        	        }


        	    }
        	    break;
        	case 2:
        	    // SQL.g:436:4: sqlFunc= expression_function
        	    {
        	        FOLLOWPUSH(FOLLOW_expression_function_in_expression_list942);
        	        sqlFunc=expression_function(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpression_listEx;
        	        }


        	        {

        	            		sqlNodeList.push_back(sqlFunc);
        	            	  
        	        }


        	    }
        	    break;
        	case 3:
        	    // SQL.g:444:4: '{' ( expression_dictionary[sqlNodeList] ) ( COMMA expression_dictionary[sqlNodeList] )* '}'
        	    {
        	         MATCHT(98, &FOLLOW_98_in_expression_list954);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpression_listEx;
        	        }


        	        // SQL.g:444:8: ( expression_dictionary[sqlNodeList] )
        	        // SQL.g:444:9: expression_dictionary[sqlNodeList]
        	        {
        	            FOLLOWPUSH(FOLLOW_expression_dictionary_in_expression_list957);
        	            expression_dictionary(ctx, sqlNodeList);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleexpression_listEx;
        	            }


        	        }


        	        // SQL.g:444:45: ( COMMA expression_dictionary[sqlNodeList] )*

        	        for (;;)
        	        {
        	            int alt26=2;
        	            switch ( LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt26=1;
        	            	}
        	                break;

        	            }

        	            switch (alt26)
        	            {
        	        	case 1:
        	        	    // SQL.g:444:46: COMMA expression_dictionary[sqlNodeList]
        	        	    {
        	        	         MATCHT(COMMA, &FOLLOW_COMMA_in_expression_list962);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexpression_listEx;
        	        	        }


        	        	        FOLLOWPUSH(FOLLOW_expression_dictionary_in_expression_list964);
        	        	        expression_dictionary(ctx, sqlNodeList);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexpression_listEx;
        	        	        }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop26;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop26: ; /* Jump out to here if this rule does not match */


        	         MATCHT(99, &FOLLOW_99_in_expression_list969);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpression_listEx;
        	        }


        	    }
        	    break;
        	case 4:
        	    // SQL.g:445:4: '[' expression_array[sqlNodeList] ( COMMA expression_array[sqlNodeList] )* ']'
        	    {
        	         MATCHT(96, &FOLLOW_96_in_expression_list974);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpression_listEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_expression_array_in_expression_list976);
        	        expression_array(ctx, sqlNodeList);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpression_listEx;
        	        }


        	        // SQL.g:445:38: ( COMMA expression_array[sqlNodeList] )*

        	        for (;;)
        	        {
        	            int alt27=2;
        	            switch ( LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt27=1;
        	            	}
        	                break;

        	            }

        	            switch (alt27)
        	            {
        	        	case 1:
        	        	    // SQL.g:445:39: COMMA expression_array[sqlNodeList]
        	        	    {
        	        	         MATCHT(COMMA, &FOLLOW_COMMA_in_expression_list980);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexpression_listEx;
        	        	        }


        	        	        FOLLOWPUSH(FOLLOW_expression_array_in_expression_list982);
        	        	        expression_array(ctx, sqlNodeList);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexpression_listEx;
        	        	        }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop27;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop27: ; /* Jump out to here if this rule does not match */


        	         MATCHT(97, &FOLLOW_97_in_expression_list988);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpression_listEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleexpression_listEx; /* Prevent compiler warnings */
    ruleexpression_listEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end expression_list */

/**
 * $ANTLR start expression_literal
 * SQL.g:448:1: expression_literal returns [uSQL::SQLExpression *sqlExpr] : expression_literal_value[sqlExpr] ;
 */
static uSQL::SQLExpression *
expression_literal(pSQLParser ctx)
{
    uSQL::SQLExpression * sqlExpr;


    /* Initialize rule variables
     */


    		sqlExpr = new uSQL::SQLExpression();
    	
    {
        // SQL.g:452:3: ( expression_literal_value[sqlExpr] )
        // SQL.g:452:5: expression_literal_value[sqlExpr]
        {
            FOLLOWPUSH(FOLLOW_expression_literal_value_in_expression_literal1010);
            expression_literal_value(ctx, sqlExpr);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpression_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpression_literalEx; /* Prevent compiler warnings */
    ruleexpression_literalEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlExpr;
}
/* $ANTLR end expression_literal */

/**
 * $ANTLR start expression_literal_value
 * SQL.g:455:1: expression_literal_value[uSQL::SQLExpression *sqlExpr] : ( property_literal | integer_literal | real_literal | string_literal | true_literal | false_literal | NIL | CURRENT_TIME | CURRENT_DATE | CURRENT_TIMESTAMP );
 */
static void
expression_literal_value(pSQLParser ctx, uSQL::SQLExpression *sqlExpr)
{
    SQLParser_property_literal_return property_literal5;
    #undef	RETURN_TYPE_property_literal5
    #define	RETURN_TYPE_property_literal5 SQLParser_property_literal_return

    SQLParser_integer_literal_return integer_literal6;
    #undef	RETURN_TYPE_integer_literal6
    #define	RETURN_TYPE_integer_literal6 SQLParser_integer_literal_return

    SQLParser_real_literal_return real_literal7;
    #undef	RETURN_TYPE_real_literal7
    #define	RETURN_TYPE_real_literal7 SQLParser_real_literal_return

    SQLParser_string_literal_return string_literal8;
    #undef	RETURN_TYPE_string_literal8
    #define	RETURN_TYPE_string_literal8 SQLParser_string_literal_return

    SQLParser_true_literal_return true_literal9;
    #undef	RETURN_TYPE_true_literal9
    #define	RETURN_TYPE_true_literal9 SQLParser_true_literal_return

    SQLParser_false_literal_return false_literal10;
    #undef	RETURN_TYPE_false_literal10
    #define	RETURN_TYPE_false_literal10 SQLParser_false_literal_return

    /* Initialize rule variables
     */

    {
        {
            //  SQL.g:456:3: ( property_literal | integer_literal | real_literal | string_literal | true_literal | false_literal | NIL | CURRENT_TIME | CURRENT_DATE | CURRENT_TIMESTAMP )

            ANTLR3_UINT32 alt29;

            alt29=10;

            switch ( LA(1) )
            {
            case ID:
            	{
            		alt29=1;
            	}
                break;
            case NUMBER:
            	{
            		alt29=2;
            	}
                break;
            case FLOAT:
            	{
            		alt29=3;
            	}
                break;
            case STRING:
            	{
            		alt29=4;
            	}
                break;
            case T:
            	{
            		alt29=5;
            	}
                break;
            case F:
            	{
            		alt29=6;
            	}
                break;
            case NIL:
            	{
            		alt29=7;
            	}
                break;
            case CURRENT_TIME:
            	{
            		alt29=8;
            	}
                break;
            case CURRENT_DATE:
            	{
            		alt29=9;
            	}
                break;
            case CURRENT_TIMESTAMP:
            	{
            		alt29=10;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 29;
                EXCEPTION->state        = 0;


                goto ruleexpression_literal_valueEx;

            }

            switch (alt29)
            {
        	case 1:
        	    // SQL.g:456:5: property_literal
        	    {
        	        FOLLOWPUSH(FOLLOW_property_literal_in_expression_literal_value1026);
        	        property_literal5=property_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpression_literal_valueEx;
        	        }


        	        {

        	            		sqlExpr->setLiteralType(uSQL::SQLExpression::PROPERTY);
        	            		sqlExpr->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, property_literal5.start, property_literal5.stop))
        	            ));
        	            	  
        	        }


        	    }
        	    break;
        	case 2:
        	    // SQL.g:460:4: integer_literal
        	    {
        	        FOLLOWPUSH(FOLLOW_integer_literal_in_expression_literal_value1033);
        	        integer_literal6=integer_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpression_literal_valueEx;
        	        }


        	        {

        	            		sqlExpr->setLiteralType(uSQL::SQLExpression::INTEGER);
        	            		sqlExpr->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, integer_literal6.start, integer_literal6.stop))
        	            ));
        	            	  
        	        }


        	    }
        	    break;
        	case 3:
        	    // SQL.g:464:4: real_literal
        	    {
        	        FOLLOWPUSH(FOLLOW_real_literal_in_expression_literal_value1040);
        	        real_literal7=real_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpression_literal_valueEx;
        	        }


        	        {

        	            		sqlExpr->setLiteralType(uSQL::SQLExpression::REAL);
        	            		sqlExpr->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, real_literal7.start, real_literal7.stop))
        	            ));
        	            	  
        	        }


        	    }
        	    break;
        	case 4:
        	    // SQL.g:468:4: string_literal
        	    {
        	        FOLLOWPUSH(FOLLOW_string_literal_in_expression_literal_value1047);
        	        string_literal8=string_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpression_literal_valueEx;
        	        }


        	        {

        	            		sqlExpr->setLiteralType(1/*uSQL::SQLExpression::STRING*/);
        	            		sqlExpr->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, string_literal8.start, string_literal8.stop))
        	            ));
        	            	  
        	        }


        	    }
        	    break;
        	case 5:
        	    // SQL.g:472:4: true_literal
        	    {
        	        FOLLOWPUSH(FOLLOW_true_literal_in_expression_literal_value1054);
        	        true_literal9=true_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpression_literal_valueEx;
        	        }


        	        {

        	            		sqlExpr->setLiteralType(uSQL::SQLExpression::BOOLEAN);
        	            		sqlExpr->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, true_literal9.start, true_literal9.stop))
        	            ));
        	            	  
        	        }


        	    }
        	    break;
        	case 6:
        	    // SQL.g:476:4: false_literal
        	    {
        	        FOLLOWPUSH(FOLLOW_false_literal_in_expression_literal_value1061);
        	        false_literal10=false_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpression_literal_valueEx;
        	        }


        	        {

        	            		sqlExpr->setLiteralType(uSQL::SQLExpression::BOOLEAN);
        	            		sqlExpr->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, false_literal10.start, false_literal10.stop))
        	            ));
        	            	  
        	        }


        	    }
        	    break;
        	case 7:
        	    // SQL.g:480:4: NIL
        	    {
        	         MATCHT(NIL, &FOLLOW_NIL_in_expression_literal_value1068);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpression_literal_valueEx;
        	        }


        	        {

        	            		sqlExpr->setLiteralType(10/*uSQL::SQLExpression::NIL*/);
        	            	  
        	        }


        	    }
        	    break;
        	case 8:
        	    // SQL.g:483:4: CURRENT_TIME
        	    {
        	         MATCHT(CURRENT_TIME, &FOLLOW_CURRENT_TIME_in_expression_literal_value1075);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpression_literal_valueEx;
        	        }


        	        {

        	            		sqlExpr->setLiteralType(11/*uSQL::SQLExpression::CURRENT_TIME*/);
        	            	  
        	        }


        	    }
        	    break;
        	case 9:
        	    // SQL.g:486:4: CURRENT_DATE
        	    {
        	         MATCHT(CURRENT_DATE, &FOLLOW_CURRENT_DATE_in_expression_literal_value1082);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpression_literal_valueEx;
        	        }


        	        {

        	            		sqlExpr->setLiteralType(12/*uSQL::SQLExpression::CURRENT_DATE*/);
        	            	  
        	        }


        	    }
        	    break;
        	case 10:
        	    // SQL.g:489:4: CURRENT_TIMESTAMP
        	    {
        	         MATCHT(CURRENT_TIMESTAMP, &FOLLOW_CURRENT_TIMESTAMP_in_expression_literal_value1089);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpression_literal_valueEx;
        	        }


        	        {

        	            		sqlExpr->setLiteralType(13/*uSQL::SQLExpression::CURRENT_TIMESTAMP*/);
        	            	  
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleexpression_literal_valueEx; /* Prevent compiler warnings */
    ruleexpression_literal_valueEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end expression_literal_value */

/**
 * $ANTLR start expression_dictionary
 * SQL.g:494:1: expression_dictionary[uSQL::SQLNodeList &sqlNodeList] : name ':' sqlExpr= expression_literal ;
 */
static void
expression_dictionary(pSQLParser ctx, uSQL::SQLNodeList &sqlNodeList)
{
    uSQL::SQLExpression * sqlExpr;
    #undef	RETURN_TYPE_sqlExpr
    #define	RETURN_TYPE_sqlExpr uSQL::SQLExpression *

    SQLParser_name_return name11;
    #undef	RETURN_TYPE_name11
    #define	RETURN_TYPE_name11 SQLParser_name_return

    /* Initialize rule variables
     */

    {
        // SQL.g:495:2: ( name ':' sqlExpr= expression_literal )
        // SQL.g:495:4: name ':' sqlExpr= expression_literal
        {
            FOLLOWPUSH(FOLLOW_name_in_expression_dictionary1104);
            name11=name(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpression_dictionaryEx;
            }


             MATCHT(95, &FOLLOW_95_in_expression_dictionary1106);
            if  (HASEXCEPTION())
            {
                goto ruleexpression_dictionaryEx;
            }


            FOLLOWPUSH(FOLLOW_expression_literal_in_expression_dictionary1110);
            sqlExpr=expression_literal(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpression_dictionaryEx;
            }


            {

                		sqlExpr->setName(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, name11.start, name11.stop))
                ));
                		sqlNodeList.push_back(sqlExpr);
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpression_dictionaryEx; /* Prevent compiler warnings */
    ruleexpression_dictionaryEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end expression_dictionary */

/**
 * $ANTLR start dictionary_literal
 * SQL.g:501:1: dictionary_literal[uSQL::SQLExpression *parentSqlExpr] : name ':' sqlExpr= expression_literal ;
 */
static void
dictionary_literal(pSQLParser ctx, uSQL::SQLExpression *parentSqlExpr)
{
    uSQL::SQLExpression * sqlExpr;
    #undef	RETURN_TYPE_sqlExpr
    #define	RETURN_TYPE_sqlExpr uSQL::SQLExpression *

    SQLParser_name_return name12;
    #undef	RETURN_TYPE_name12
    #define	RETURN_TYPE_name12 SQLParser_name_return

    /* Initialize rule variables
     */

    {
        // SQL.g:502:2: ( name ':' sqlExpr= expression_literal )
        // SQL.g:502:4: name ':' sqlExpr= expression_literal
        {
            FOLLOWPUSH(FOLLOW_name_in_dictionary_literal1125);
            name12=name(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledictionary_literalEx;
            }


             MATCHT(95, &FOLLOW_95_in_dictionary_literal1127);
            if  (HASEXCEPTION())
            {
                goto ruledictionary_literalEx;
            }


            FOLLOWPUSH(FOLLOW_expression_literal_in_dictionary_literal1131);
            sqlExpr=expression_literal(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledictionary_literalEx;
            }


            {

                		sqlExpr->setName(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, name12.start, name12.stop))
                ));
                		parentSqlExpr->addExpression(sqlExpr);
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruledictionary_literalEx; /* Prevent compiler warnings */
    ruledictionary_literalEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end dictionary_literal */

/**
 * $ANTLR start expression_array
 * SQL.g:508:1: expression_array[uSQL::SQLNodeList &sqlNodeList] : sqlExpr= expression_literal ;
 */
static void
expression_array(pSQLParser ctx, uSQL::SQLNodeList &sqlNodeList)
{
    uSQL::SQLExpression * sqlExpr;
    #undef	RETURN_TYPE_sqlExpr
    #define	RETURN_TYPE_sqlExpr uSQL::SQLExpression *

    /* Initialize rule variables
     */

    {
        // SQL.g:509:2: (sqlExpr= expression_literal )
        // SQL.g:509:4: sqlExpr= expression_literal
        {
            FOLLOWPUSH(FOLLOW_expression_literal_in_expression_array1148);
            sqlExpr=expression_literal(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpression_arrayEx;
            }


            {

                		sqlNodeList.push_back(sqlExpr);
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpression_arrayEx; /* Prevent compiler warnings */
    ruleexpression_arrayEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end expression_array */

/**
 * $ANTLR start array_literal
 * SQL.g:514:1: array_literal[uSQL::SQLExpression *parentSqlExpr] : sqlExpr= expression_literal ;
 */
static void
array_literal(pSQLParser ctx, uSQL::SQLExpression *parentSqlExpr)
{
    uSQL::SQLExpression * sqlExpr;
    #undef	RETURN_TYPE_sqlExpr
    #define	RETURN_TYPE_sqlExpr uSQL::SQLExpression *

    /* Initialize rule variables
     */

    {
        // SQL.g:515:2: (sqlExpr= expression_literal )
        // SQL.g:515:4: sqlExpr= expression_literal
        {
            FOLLOWPUSH(FOLLOW_expression_literal_in_array_literal1165);
            sqlExpr=expression_literal(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulearray_literalEx;
            }


            {

                		parentSqlExpr->addExpression(sqlExpr);
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulearray_literalEx; /* Prevent compiler warnings */
    rulearray_literalEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end array_literal */

/**
 * $ANTLR start expression_function
 * SQL.g:520:1: expression_function returns [uSQL::SQLFunction *sqlFunc] : ID '(' ( function_value[sqlFunc] )? ')' ;
 */
static uSQL::SQLFunction *
expression_function(pSQLParser ctx)
{
    uSQL::SQLFunction * sqlFunc;


    pANTLR3_COMMON_TOKEN    ID13;

    /* Initialize rule variables
     */


    		sqlFunc = new uSQL::SQLFunction();
    		sqlFunc->setLiteralType(uSQL::SQLExpression::FUNCTION);
    	
    ID13       = NULL;

    {
        // SQL.g:525:2: ( ID '(' ( function_value[sqlFunc] )? ')' )
        // SQL.g:525:4: ID '(' ( function_value[sqlFunc] )? ')'
        {
            ID13 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_expression_function1188);
            if  (HASEXCEPTION())
            {
                goto ruleexpression_functionEx;
            }


             MATCHT(93, &FOLLOW_93_in_expression_function1190);
            if  (HASEXCEPTION())
            {
                goto ruleexpression_functionEx;
            }


            // SQL.g:525:11: ( function_value[sqlFunc] )?
            {
                int alt30=2;
                switch ( LA(1) )
                {
                    case ASTERISK:
                    case CURRENT_DATE:
                    case CURRENT_TIME:
                    case CURRENT_TIMESTAMP:
                    case F:
                    case FLOAT:
                    case ID:
                    case NIL:
                    case NUMBER:
                    case STRING:
                    case T:
                    case 96:
                    case 98:
                    	{
                    		alt30=1;
                    	}
                        break;
                }

                switch (alt30)
                {
            	case 1:
            	    // SQL.g:525:12: function_value[sqlFunc]
            	    {
            	        FOLLOWPUSH(FOLLOW_function_value_in_expression_function1193);
            	        function_value(ctx, sqlFunc);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexpression_functionEx;
            	        }


            	    }
            	    break;

                }
            }

             MATCHT(94, &FOLLOW_94_in_expression_function1198);
            if  (HASEXCEPTION())
            {
                goto ruleexpression_functionEx;
            }


            {

                		sqlFunc->setValue(CG_ANTLR3_STRING_2_UTF8((ID13->getText(ID13))));
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpression_functionEx; /* Prevent compiler warnings */
    ruleexpression_functionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlFunc;
}
/* $ANTLR end expression_function */

/**
 * $ANTLR start function_name
 * SQL.g:530:1: function_name returns [uSQL::SQLFunction *sqlFunc] : ID ;
 */
static uSQL::SQLFunction *
function_name(pSQLParser ctx)
{
    uSQL::SQLFunction * sqlFunc;


    pANTLR3_COMMON_TOKEN    ID14;

    /* Initialize rule variables
     */


    		sqlFunc = new uSQL::SQLFunction();
    		sqlFunc->setLiteralType(uSQL::SQLExpression::FUNCTION);
    	
    ID14       = NULL;

    {
        // SQL.g:535:2: ( ID )
        // SQL.g:535:4: ID
        {
            ID14 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_function_name1221);
            if  (HASEXCEPTION())
            {
                goto rulefunction_nameEx;
            }


            {

                		sqlFunc->setValue(CG_ANTLR3_STRING_2_UTF8((ID14->getText(ID14))));
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulefunction_nameEx; /* Prevent compiler warnings */
    rulefunction_nameEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlFunc;
}
/* $ANTLR end function_name */

/**
 * $ANTLR start function_value
 * SQL.g:540:1: function_value[uSQL::SQLFunction *sqlFunc] : ( expression[sqlFunc] ( COMMA expression[sqlFunc] )* | ASTERISK );
 */
static void
function_value(pSQLParser ctx, uSQL::SQLFunction *sqlFunc)
{
    /* Initialize rule variables
     */

    {
        {
            //  SQL.g:541:2: ( expression[sqlFunc] ( COMMA expression[sqlFunc] )* | ASTERISK )

            ANTLR3_UINT32 alt32;

            alt32=2;

            switch ( LA(1) )
            {
            case CURRENT_DATE:
            case CURRENT_TIME:
            case CURRENT_TIMESTAMP:
            case F:
            case FLOAT:
            case ID:
            case NIL:
            case NUMBER:
            case STRING:
            case T:
            case 96:
            case 98:
            	{
            		alt32=1;
            	}
                break;
            case ASTERISK:
            	{
            		alt32=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 32;
                EXCEPTION->state        = 0;


                goto rulefunction_valueEx;

            }

            switch (alt32)
            {
        	case 1:
        	    // SQL.g:541:4: expression[sqlFunc] ( COMMA expression[sqlFunc] )*
        	    {
        	        FOLLOWPUSH(FOLLOW_expression_in_function_value1236);
        	        expression(ctx, sqlFunc);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunction_valueEx;
        	        }


        	        // SQL.g:541:24: ( COMMA expression[sqlFunc] )*

        	        for (;;)
        	        {
        	            int alt31=2;
        	            switch ( LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt31=1;
        	            	}
        	                break;

        	            }

        	            switch (alt31)
        	            {
        	        	case 1:
        	        	    // SQL.g:541:25: COMMA expression[sqlFunc]
        	        	    {
        	        	         MATCHT(COMMA, &FOLLOW_COMMA_in_function_value1240);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefunction_valueEx;
        	        	        }


        	        	        FOLLOWPUSH(FOLLOW_expression_in_function_value1242);
        	        	        expression(ctx, sqlFunc);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefunction_valueEx;
        	        	        }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop31;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop31: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 2:
        	    // SQL.g:542:4: ASTERISK
        	    {
        	         MATCHT(ASTERISK, &FOLLOW_ASTERISK_in_function_value1250);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunction_valueEx;
        	        }


        	        {

        	            		uSQL::SQLExpression *sqlExpr = new uSQL::SQLExpression();
        	            		sqlExpr->setLiteralType(1/*uSQL::SQLExpression::STRING*/);
        	            		sqlExpr->setValue("*");
        	            		sqlExpr->addExpression(sqlFunc);
        	            	
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulefunction_valueEx; /* Prevent compiler warnings */
    rulefunction_valueEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end function_value */

/**
 * $ANTLR start expression_operator
 * SQL.g:550:1: expression_operator returns [uSQL::SQLOperator *sqlOpeExpr] : expression_list[binOperExprs] sqlBinOpeExpr= binary_operator expression_list[binOperExprs] ;
 */
static uSQL::SQLOperator *
expression_operator(pSQLParser ctx)
{
    uSQL::SQLOperator * sqlOpeExpr;


    uSQL::SQLOperator * sqlBinOpeExpr;
    #undef	RETURN_TYPE_sqlBinOpeExpr
    #define	RETURN_TYPE_sqlBinOpeExpr uSQL::SQLOperator *

    /* Initialize rule variables
     */


    		uSQL::SQLNodeList binOperExprs;
    	
    {
        // SQL.g:554:2: ( expression_list[binOperExprs] sqlBinOpeExpr= binary_operator expression_list[binOperExprs] )
        // SQL.g:554:4: expression_list[binOperExprs] sqlBinOpeExpr= binary_operator expression_list[binOperExprs]
        {
            FOLLOWPUSH(FOLLOW_expression_list_in_expression_operator1273);
            expression_list(ctx, binOperExprs);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpression_operatorEx;
            }


            FOLLOWPUSH(FOLLOW_binary_operator_in_expression_operator1278);
            sqlBinOpeExpr=binary_operator(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpression_operatorEx;
            }


            FOLLOWPUSH(FOLLOW_expression_list_in_expression_operator1280);
            expression_list(ctx, binOperExprs);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpression_operatorEx;
            }


            {

                 		CG_ANTLR3_SQLNODE_ADDNODES(sqlBinOpeExpr, &binOperExprs);
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpression_operatorEx; /* Prevent compiler warnings */
    ruleexpression_operatorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlOpeExpr;
}
/* $ANTLR end expression_operator */

/**
 * $ANTLR start binary_operator
 * SQL.g:559:1: binary_operator returns [uSQL::SQLOperator *sqlOper] : ( SINGLE_EQ | DOUBLE_EQ | OP_LT | LE | GT | GE | NOTEQ | AND | OR );
 */
static uSQL::SQLOperator *
binary_operator(pSQLParser ctx)
{
    uSQL::SQLOperator * sqlOper;


    /* Initialize rule variables
     */


    		sqlOper = new uSQL::SQLOperator();
    		sqlOper->setLiteralType(uSQL::SQLExpression::OPERATOR);
    	
    {
        {
            //  SQL.g:564:2: ( SINGLE_EQ | DOUBLE_EQ | OP_LT | LE | GT | GE | NOTEQ | AND | OR )

            ANTLR3_UINT32 alt33;

            alt33=9;

            switch ( LA(1) )
            {
            case SINGLE_EQ:
            	{
            		alt33=1;
            	}
                break;
            case DOUBLE_EQ:
            	{
            		alt33=2;
            	}
                break;
            case OP_LT:
            	{
            		alt33=3;
            	}
                break;
            case LE:
            	{
            		alt33=4;
            	}
                break;
            case GT:
            	{
            		alt33=5;
            	}
                break;
            case GE:
            	{
            		alt33=6;
            	}
                break;
            case NOTEQ:
            	{
            		alt33=7;
            	}
                break;
            case AND:
            	{
            		alt33=8;
            	}
                break;
            case OR:
            	{
            		alt33=9;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 33;
                EXCEPTION->state        = 0;


                goto rulebinary_operatorEx;

            }

            switch (alt33)
            {
        	case 1:
        	    // SQL.g:564:4: SINGLE_EQ
        	    {
        	         MATCHT(SINGLE_EQ, &FOLLOW_SINGLE_EQ_in_binary_operator1304);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinary_operatorEx;
        	        }


        	        {

        	            		sqlOper->setValue(1/*uSQL::SQLOperator::SEQ*/);
        	            	  
        	        }


        	    }
        	    break;
        	case 2:
        	    // SQL.g:567:4: DOUBLE_EQ
        	    {
        	         MATCHT(DOUBLE_EQ, &FOLLOW_DOUBLE_EQ_in_binary_operator1311);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinary_operatorEx;
        	        }


        	        {

        	            		sqlOper->setValue(2/*uSQL::SQLOperator::DEQ*/);
        	            	  
        	        }


        	    }
        	    break;
        	case 3:
        	    // SQL.g:570:4: OP_LT
        	    {
        	         MATCHT(OP_LT, &FOLLOW_OP_LT_in_binary_operator1318);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinary_operatorEx;
        	        }


        	        {

        	            		sqlOper->setValue(3/*uSQL::SQLOperator::LT*/);
        	            	  
        	        }


        	    }
        	    break;
        	case 4:
        	    // SQL.g:573:4: LE
        	    {
        	         MATCHT(LE, &FOLLOW_LE_in_binary_operator1325);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinary_operatorEx;
        	        }


        	        {

        	            		sqlOper->setValue(4/*uSQL::SQLOperator::GT*/);
        	            	  
        	        }


        	    }
        	    break;
        	case 5:
        	    // SQL.g:576:4: GT
        	    {
        	         MATCHT(GT, &FOLLOW_GT_in_binary_operator1332);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinary_operatorEx;
        	        }


        	        {

        	            		sqlOper->setValue(5/*uSQL::SQLOperator::LE*/);
        	            	  
        	        }


        	    }
        	    break;
        	case 6:
        	    // SQL.g:579:4: GE
        	    {
        	         MATCHT(GE, &FOLLOW_GE_in_binary_operator1339);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinary_operatorEx;
        	        }


        	        {

        	            		sqlOper->setValue(6/*uSQL::SQLOperator::GE*/);
        	            	  
        	        }


        	    }
        	    break;
        	case 7:
        	    // SQL.g:582:4: NOTEQ
        	    {
        	         MATCHT(NOTEQ, &FOLLOW_NOTEQ_in_binary_operator1346);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinary_operatorEx;
        	        }


        	        {

        	            		sqlOper->setValue(7/*uSQL::SQLOperator::NOTEQ*/);
        	            	  
        	        }


        	    }
        	    break;
        	case 8:
        	    // SQL.g:585:4: AND
        	    {
        	         MATCHT(AND, &FOLLOW_AND_in_binary_operator1353);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinary_operatorEx;
        	        }


        	        {

        	            		sqlOper->setValue(8/*uSQL::SQLOperator::AND*/);
        	            	  
        	        }


        	    }
        	    break;
        	case 9:
        	    // SQL.g:588:4: OR
        	    {
        	         MATCHT(OR, &FOLLOW_OR_in_binary_operator1360);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinary_operatorEx;
        	        }


        	        {

        	            		sqlOper->setValue(9/*uSQL::SQLOperator::OR*/);
        	            	  
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulebinary_operatorEx; /* Prevent compiler warnings */
    rulebinary_operatorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlOper;
}
/* $ANTLR end binary_operator */

/**
 * $ANTLR start property_literal
 * SQL.g:593:1: property_literal : ID ;
 */
static SQLParser_property_literal_return
property_literal(pSQLParser ctx)
{
    SQLParser_property_literal_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // SQL.g:594:2: ( ID )
        // SQL.g:594:4: ID
        {
             MATCHT(ID, &FOLLOW_ID_in_property_literal1373);
            if  (HASEXCEPTION())
            {
                goto ruleproperty_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleproperty_literalEx; /* Prevent compiler warnings */
    ruleproperty_literalEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end property_literal */

/**
 * $ANTLR start integer_literal
 * SQL.g:597:1: integer_literal : NUMBER ;
 */
static SQLParser_integer_literal_return
integer_literal(pSQLParser ctx)
{
    SQLParser_integer_literal_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // SQL.g:598:2: ( NUMBER )
        // SQL.g:598:4: NUMBER
        {
             MATCHT(NUMBER, &FOLLOW_NUMBER_in_integer_literal1385);
            if  (HASEXCEPTION())
            {
                goto ruleinteger_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleinteger_literalEx; /* Prevent compiler warnings */
    ruleinteger_literalEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end integer_literal */

/**
 * $ANTLR start real_literal
 * SQL.g:601:1: real_literal : FLOAT ;
 */
static SQLParser_real_literal_return
real_literal(pSQLParser ctx)
{
    SQLParser_real_literal_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // SQL.g:602:2: ( FLOAT )
        // SQL.g:602:4: FLOAT
        {
             MATCHT(FLOAT, &FOLLOW_FLOAT_in_real_literal1396);
            if  (HASEXCEPTION())
            {
                goto rulereal_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulereal_literalEx; /* Prevent compiler warnings */
    rulereal_literalEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end real_literal */

/**
 * $ANTLR start string_literal
 * SQL.g:605:1: string_literal : STRING ;
 */
static SQLParser_string_literal_return
string_literal(pSQLParser ctx)
{
    SQLParser_string_literal_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // SQL.g:606:2: ( STRING )
        // SQL.g:606:4: STRING
        {
             MATCHT(STRING, &FOLLOW_STRING_in_string_literal1407);
            if  (HASEXCEPTION())
            {
                goto rulestring_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulestring_literalEx; /* Prevent compiler warnings */
    rulestring_literalEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end string_literal */

/**
 * $ANTLR start true_literal
 * SQL.g:609:1: true_literal : T R U E ;
 */
static SQLParser_true_literal_return
true_literal(pSQLParser ctx)
{
    SQLParser_true_literal_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // SQL.g:610:2: ( T R U E )
        // SQL.g:610:4: T R U E
        {
             MATCHT(T, &FOLLOW_T_in_true_literal1418);
            if  (HASEXCEPTION())
            {
                goto ruletrue_literalEx;
            }


             MATCHT(R, &FOLLOW_R_in_true_literal1420);
            if  (HASEXCEPTION())
            {
                goto ruletrue_literalEx;
            }


             MATCHT(U, &FOLLOW_U_in_true_literal1422);
            if  (HASEXCEPTION())
            {
                goto ruletrue_literalEx;
            }


             MATCHT(E, &FOLLOW_E_in_true_literal1424);
            if  (HASEXCEPTION())
            {
                goto ruletrue_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruletrue_literalEx; /* Prevent compiler warnings */
    ruletrue_literalEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end true_literal */

/**
 * $ANTLR start false_literal
 * SQL.g:613:1: false_literal : F A L S E ;
 */
static SQLParser_false_literal_return
false_literal(pSQLParser ctx)
{
    SQLParser_false_literal_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // SQL.g:614:2: ( F A L S E )
        // SQL.g:614:4: F A L S E
        {
             MATCHT(F, &FOLLOW_F_in_false_literal1436);
            if  (HASEXCEPTION())
            {
                goto rulefalse_literalEx;
            }


             MATCHT(A, &FOLLOW_A_in_false_literal1438);
            if  (HASEXCEPTION())
            {
                goto rulefalse_literalEx;
            }


             MATCHT(L, &FOLLOW_L_in_false_literal1440);
            if  (HASEXCEPTION())
            {
                goto rulefalse_literalEx;
            }


             MATCHT(S, &FOLLOW_S_in_false_literal1442);
            if  (HASEXCEPTION())
            {
                goto rulefalse_literalEx;
            }


             MATCHT(E, &FOLLOW_E_in_false_literal1444);
            if  (HASEXCEPTION())
            {
                goto rulefalse_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulefalse_literalEx; /* Prevent compiler warnings */
    rulefalse_literalEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end false_literal */

/**
 * $ANTLR start sync_operator
 * SQL.g:623:1: sync_operator returns [bool isAync] : ( SYNC | ASYNC );
 */
static bool
sync_operator(pSQLParser ctx)
{
    bool isAync;


    /* Initialize rule variables
     */

    {
        {
            //  SQL.g:624:2: ( SYNC | ASYNC )

            ANTLR3_UINT32 alt34;

            alt34=2;

            switch ( LA(1) )
            {
            case SYNC:
            	{
            		alt34=1;
            	}
                break;
            case ASYNC:
            	{
            		alt34=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 34;
                EXCEPTION->state        = 0;


                goto rulesync_operatorEx;

            }

            switch (alt34)
            {
        	case 1:
        	    // SQL.g:624:4: SYNC
        	    {
        	         MATCHT(SYNC, &FOLLOW_SYNC_in_sync_operator1462);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesync_operatorEx;
        	        }


        	        {

        	            		isAync = false;
        	            	  
        	        }


        	    }
        	    break;
        	case 2:
        	    // SQL.g:627:4: ASYNC
        	    {
        	         MATCHT(ASYNC, &FOLLOW_ASYNC_in_sync_operator1469);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesync_operatorEx;
        	        }


        	        {

        	            		isAync = true;
        	            	  
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulesync_operatorEx; /* Prevent compiler warnings */
    rulesync_operatorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return isAync;
}
/* $ANTLR end sync_operator */

/**
 * $ANTLR start compound_operator
 * SQL.g:632:1: compound_operator : ( UNION ( ALL )? | INTERSECT | EXCEPT );
 */
static void
compound_operator(pSQLParser ctx)
{
    /* Initialize rule variables
     */

    {
        {
            //  SQL.g:633:2: ( UNION ( ALL )? | INTERSECT | EXCEPT )

            ANTLR3_UINT32 alt36;

            alt36=3;

            switch ( LA(1) )
            {
            case UNION:
            	{
            		alt36=1;
            	}
                break;
            case INTERSECT:
            	{
            		alt36=2;
            	}
                break;
            case EXCEPT:
            	{
            		alt36=3;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 36;
                EXCEPTION->state        = 0;


                goto rulecompound_operatorEx;

            }

            switch (alt36)
            {
        	case 1:
        	    // SQL.g:633:4: UNION ( ALL )?
        	    {
        	         MATCHT(UNION, &FOLLOW_UNION_in_compound_operator1482);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecompound_operatorEx;
        	        }


        	        // SQL.g:633:10: ( ALL )?
        	        {
        	            int alt35=2;
        	            switch ( LA(1) )
        	            {
        	                case ALL:
        	                	{
        	                		alt35=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt35)
        	            {
        	        	case 1:
        	        	    // SQL.g:633:11: ALL
        	        	    {
        	        	         MATCHT(ALL, &FOLLOW_ALL_in_compound_operator1485);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecompound_operatorEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // SQL.g:634:4: INTERSECT
        	    {
        	         MATCHT(INTERSECT, &FOLLOW_INTERSECT_in_compound_operator1492);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecompound_operatorEx;
        	        }


        	    }
        	    break;
        	case 3:
        	    // SQL.g:635:4: EXCEPT
        	    {
        	         MATCHT(EXCEPT, &FOLLOW_EXCEPT_in_compound_operator1497);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecompound_operatorEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulecompound_operatorEx; /* Prevent compiler warnings */
    rulecompound_operatorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end compound_operator */

/**
 * $ANTLR start condition_operator
 * SQL.g:638:1: condition_operator : ( SINGLE_EQ | DOUBLE_EQ | OP_LT | LE | GT | GE | NOTEQ );
 */
static void
condition_operator(pSQLParser ctx)
{
    /* Initialize rule variables
     */

    {
        // SQL.g:639:2: ( SINGLE_EQ | DOUBLE_EQ | OP_LT | LE | GT | GE | NOTEQ )
        // SQL.g:
        {
            if ( LA(1) == DOUBLE_EQ || LA(1) == GE || LA(1) == GT || LA(1) == LE || LA(1) == NOTEQ || LA(1) == OP_LT || LA(1) == SINGLE_EQ )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto rulecondition_operatorEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulecondition_operatorEx; /* Prevent compiler warnings */
    rulecondition_operatorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end condition_operator */

/**
 * $ANTLR start property
 * SQL.g:648:1: property : ID ;
 */
static SQLParser_property_return
property(pSQLParser ctx)
{
    SQLParser_property_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // SQL.g:649:2: ( ID )
        // SQL.g:649:4: ID
        {
             MATCHT(ID, &FOLLOW_ID_in_property1549);
            if  (HASEXCEPTION())
            {
                goto rulepropertyEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulepropertyEx; /* Prevent compiler warnings */
    rulepropertyEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end property */

/**
 * $ANTLR start value
 * SQL.g:652:1: value : ID ;
 */
static void
value(pSQLParser ctx)
{
    /* Initialize rule variables
     */

    {
        // SQL.g:653:2: ( ID )
        // SQL.g:653:4: ID
        {
             MATCHT(ID, &FOLLOW_ID_in_value1563);
            if  (HASEXCEPTION())
            {
                goto rulevalueEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulevalueEx; /* Prevent compiler warnings */
    rulevalueEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end value */

/**
 * $ANTLR start name
 * SQL.g:656:1: name : ID ;
 */
static SQLParser_name_return
name(pSQLParser ctx)
{
    SQLParser_name_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // SQL.g:657:2: ( ID )
        // SQL.g:657:4: ID
        {
             MATCHT(ID, &FOLLOW_ID_in_name1575);
            if  (HASEXCEPTION())
            {
                goto rulenameEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulenameEx; /* Prevent compiler warnings */
    rulenameEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end name */

/**
 * $ANTLR start collection_section
 * SQL.g:660:1: collection_section returns [uSQL::SQLCollection *sqlCollection] : collection_name ;
 */
static uSQL::SQLCollection *
collection_section(pSQLParser ctx)
{
    uSQL::SQLCollection * sqlCollection;


    SQLParser_collection_name_return collection_name15;
    #undef	RETURN_TYPE_collection_name15
    #define	RETURN_TYPE_collection_name15 SQLParser_collection_name_return

    /* Initialize rule variables
     */


    		sqlCollection = new uSQL::SQLCollection();
    	
    {
        // SQL.g:664:2: ( collection_name )
        // SQL.g:664:4: collection_name
        {
            FOLLOWPUSH(FOLLOW_collection_name_in_collection_section1596);
            collection_name15=collection_name(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecollection_sectionEx;
            }


            {

                		sqlCollection->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, collection_name15.start, collection_name15.stop))
                ));
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulecollection_sectionEx; /* Prevent compiler warnings */
    rulecollection_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlCollection;
}
/* $ANTLR end collection_section */

/**
 * $ANTLR start collection_name
 * SQL.g:669:1: collection_name : ( ID | string_literal );
 */
static SQLParser_collection_name_return
collection_name(pSQLParser ctx)
{
    SQLParser_collection_name_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        {
            //  SQL.g:670:2: ( ID | string_literal )

            ANTLR3_UINT32 alt37;

            alt37=2;

            switch ( LA(1) )
            {
            case ID:
            	{
            		alt37=1;
            	}
                break;
            case STRING:
            	{
            		alt37=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 37;
                EXCEPTION->state        = 0;


                goto rulecollection_nameEx;

            }

            switch (alt37)
            {
        	case 1:
        	    // SQL.g:670:4: ID
        	    {
        	         MATCHT(ID, &FOLLOW_ID_in_collection_name1609);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecollection_nameEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // SQL.g:671:4: string_literal
        	    {
        	        FOLLOWPUSH(FOLLOW_string_literal_in_collection_name1614);
        	        string_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecollection_nameEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulecollection_nameEx; /* Prevent compiler warnings */
    rulecollection_nameEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end collection_name */

/**
 * $ANTLR start index_section
 * SQL.g:674:1: index_section returns [uSQL::SQLIndex *sqlIndex] : index_name ;
 */
static uSQL::SQLIndex *
index_section(pSQLParser ctx)
{
    uSQL::SQLIndex * sqlIndex;


    SQLParser_index_name_return index_name16;
    #undef	RETURN_TYPE_index_name16
    #define	RETURN_TYPE_index_name16 SQLParser_index_name_return

    /* Initialize rule variables
     */


    		sqlIndex = new uSQL::SQLIndex();
    	
    {
        // SQL.g:678:2: ( index_name )
        // SQL.g:678:4: index_name
        {
            FOLLOWPUSH(FOLLOW_index_name_in_index_section1636);
            index_name16=index_name(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleindex_sectionEx;
            }


            {

                		sqlIndex->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, index_name16.start, index_name16.stop))
                ));
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleindex_sectionEx; /* Prevent compiler warnings */
    ruleindex_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlIndex;
}
/* $ANTLR end index_section */

/**
 * $ANTLR start index_name
 * SQL.g:683:1: index_name : ( ID | string_literal );
 */
static SQLParser_index_name_return
index_name(pSQLParser ctx)
{
    SQLParser_index_name_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        {
            //  SQL.g:684:2: ( ID | string_literal )

            ANTLR3_UINT32 alt38;

            alt38=2;

            switch ( LA(1) )
            {
            case ID:
            	{
            		alt38=1;
            	}
                break;
            case STRING:
            	{
            		alt38=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 38;
                EXCEPTION->state        = 0;


                goto ruleindex_nameEx;

            }

            switch (alt38)
            {
        	case 1:
        	    // SQL.g:684:4: ID
        	    {
        	         MATCHT(ID, &FOLLOW_ID_in_index_name1649);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleindex_nameEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // SQL.g:685:4: string_literal
        	    {
        	        FOLLOWPUSH(FOLLOW_string_literal_in_index_name1654);
        	        string_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleindex_nameEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleindex_nameEx; /* Prevent compiler warnings */
    ruleindex_nameEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end index_name */

/**
 * $ANTLR start where_section
 * SQL.g:688:1: where_section returns [uSQL::SQLWhere *sqlWhere] : WHERE expression[sqlWhere] ;
 */
static uSQL::SQLWhere *
where_section(pSQLParser ctx)
{
    uSQL::SQLWhere * sqlWhere;


    /* Initialize rule variables
     */


    		sqlWhere = new uSQL::SQLWhere();
    	
    {
        // SQL.g:692:2: ( WHERE expression[sqlWhere] )
        // SQL.g:692:4: WHERE expression[sqlWhere]
        {
             MATCHT(WHERE, &FOLLOW_WHERE_in_where_section1675);
            if  (HASEXCEPTION())
            {
                goto rulewhere_sectionEx;
            }


            FOLLOWPUSH(FOLLOW_expression_in_where_section1677);
            expression(ctx, sqlWhere);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhere_sectionEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulewhere_sectionEx; /* Prevent compiler warnings */
    rulewhere_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlWhere;
}
/* $ANTLR end where_section */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */






/* End of code
 * =============================================================================
 */
