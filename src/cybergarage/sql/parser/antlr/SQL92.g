grammar SQL92;

/*
options 
{
    language	= C;
}

@lexer::header
{
#define ANTLR3_INLINE_INPUT_UTF8
}

@parser::includes
{
#include <iostream>
#include <string>
#include <vector>
}
*/

SQL_STATEMENTS
	: QUERY_SPECIFICATION
	;

ID  :	('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'0'..'9'|'_')*
	;

INT :	'0'..'9'+
	;

FLOAT
	:   ('0'..'9')+ '.' ('0'..'9')* EXPONENT?
	|   '.' ('0'..'9')+ EXPONENT?
	|   ('0'..'9')+ EXPONENT
	;

COMMENT
	:   '//' ~('\n'|'\r')* '\r'? '\n' {$channel=HIDDEN;}
	|   '/*' ( options {greedy=false;} : . )* '*/' {$channel=HIDDEN;}
	;

WS  :   ( ' '
		| '\t'
		| '\r'
		| '\n'
		) {$channel=HIDDEN;}
	;

STRING
	:  '\'' ( ESC_SEQ | ~('\\'|'\'') )* '\''
	;

CHAR:  '\'' ( ESC_SEQ | ~('\''|'\\') ) '\''
	;

fragment
EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+ ;

fragment
HEX_DIGIT : ('0'..'9'|'a'..'f'|'A'..'F') ;

fragment
ESC_SEQ
	:   '\\' ('b'|'t'|'n'|'f'|'r'|'\"'|'\''|'\\')
	|   UNICODE_ESC
	|   OCTAL_ESC
	;

fragment
OCTAL_ESC
	:   '\\' ('0'..'3') ('0'..'7') ('0'..'7')
	|   '\\' ('0'..'7') ('0'..'7')
	|   '\\' ('0'..'7')
	;

fragment
UNICODE_ESC
	:   '\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
	;
	
fragment 
A	: 'A'
	| 'a'
	;

fragment 
B	: 'B'
	| 'b'
	;

fragment 
C	: 'C'
	| 'c'
	;

fragment 
D	: 'D'
	| 'd'
	;

fragment 
E	: 'E'
	| 'e'
	;

fragment 
F	: 'F'
	| 'f'
	;

fragment 
G	: 'G'
	| 'g'
	;

fragment 
H	: 'H'
	| 'h'
	;

fragment 
I	: 'I'
	| 'i'
	;

fragment 
J	: 'J'
	| 'j'
	;

fragment 
K	: 'K'
	| 'k'
	;

fragment 
L	: 'L'
	| 'l'
	;

fragment 
M	: 'M'
	| 'm'
	;

fragment 
N	: 'N'
	| 'n'
	;

fragment 
O	: 'O'
	| 'o'
	;

fragment 
P	: 'P'
	| 'p'
	;

fragment 
Q	: 'Q'
	| 'q'
	;

fragment 
R	: 'R'
	| 'r'
	;

fragment 
S	: 'S'
	| 's'
	;

fragment 
T	: 'T'
	| 't'
	;

fragment 
U	: 'U'
	| 'u'
	;

fragment 
V	: 'V'
	| 'v'
	;

fragment 
W	: 'W'
	| 'w'
	;

fragment 
X	: 'X'
	| 'x'
	;

fragment 
Y	: 'Y'
	| 'y'
	;

fragment 
Z	: 'Z'
	| 'z'
	;

/*
SQL_TERMINAL_CHARACTER ::=
	  SQL_LANGUAGE_CHARACTER
	| SQL_EMBEDDED_LANGUAGE_CHARACTER

SQL_LANGUAGE_CHARACTER ::=
	  SIMPLE_LATIN_LETTER
	| DIGIT
	| SQL_SPECIAL_CHARACTER

SIMPLE_LATIN_LETTER ::=
	  SIMPLE_LATIN_UPPER_CASE_LETTER
	| SIMPLE_LATIN_LOWER_CASE_LETTER

SIMPLE_LATIN_UPPER_CASE_LETTER ::=
		  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O
	| P | Q | R | S | T | U | V | W | X | Y | Z

SIMPLE_LATIN_LOWER_CASE_LETTER ::=
		  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O
	| P | Q | R | S | T | U | V | W | X | Y | Z

DIGIT ::=
	0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

SQL_SPECIAL_CHARACTER ::=
	  SPACE
	| DOUBLE_QUOTE
	| PERCENT
	| AMPERSAND
	| QUOTE
	| LEFT_PAREN
	| RIGHT_PAREN
	| ASTERISK
	| PLUS_SIGN
	| COMMA
	| MINUS_SIGN
	| PERIOD
	| SOLIDUS
	| COLON
	| SEMICOLON
	| LESS_THAN_OPERATOR
	| EQUALS_OPERATOR
	| GREATER_THAN_OPERATOR
	| QUESTION_MARK
	| UNDERSCORE
	| VERTICAL_BAR

SPACE ::= !! EMPHASIS(SPACE CHARACTER IN CHARACTER SET IN USE)
*/

DOUBLE_QUOTE
	: '"'
	;

/*
PERCENT ::= %

AMPERSAND ::= &

*/
QUOTE
	: '\''
	;

LEFT_PAREN
	: '('
	;

RIGHT_PAREN
	: ')'
	;

ASTERISK
	: '*'
	;

PLUS_SIGN
	: '+'
	;

COMMA
	: ','
	;

MINUS_SIGN
	: '-'
	;

PERIOD
	: '.'
	;

SOLIDUS
	: '/'
	;

COLON
	: ':'
	;

/*
SEMICOLON ::= ;

LESS_THAN_OPERATOR ::= 

EQUALS_OPERATOR ::= =

GREATER_THAN_OPERATOR ::= 
*/

QUESTION_MARK
	: '?'
	;

UNDERSCORE
	: '_'
	;

/*
VERTICAL_BAR ::= |

SQL_EMBEDDED_LANGUAGE_CHARACTER ::=
	  LEFT_BRACKET
	| RIGHT_BRACKET

LEFT_BRACKET ::= [

RIGHT_BRACKET ::= )*

TOKEN ::=
	  NONDELIMITER_TOKEN
	| DELIMITER_TOKEN

NONDELIMITER_TOKEN ::=
	  REGULAR_IDENTIFIER
	| KEY_WORD
	| UNSIGNED_NUMERIC_LITERAL
	| NATIONAL_CHARACTER_STRING_LITERAL
	| BIT_STRING_LITERAL
	| HEX_STRING_LITERAL
*/

REGULAR_IDENTIFIER
	: IDENTIFIER_BODY
	;

IDENTIFIER_BODY
	: ID
/*
	: IDENTIFIER_START ( { UNDERSCORE | IDENTIFIER_PART }... )*
*/
	;

/*
IDENTIFIER_START ::= EMPHASIS(!! SEE THE SYNTAX RULES)

IDENTIFIER_PART ::=
	  IDENTIFIER_START
	| DIGIT

KEY_WORD ::=
	  RESERVED_WORD
	| NON-RESERVED_WORD

RESERVED_WORD ::=
	  ABSOLUTE | ACTION | ADD | 
*/
ALL
	: A L L
	;
/*
	| ALLOCATE | ALTER | AND
	| ANY | ARE
	| 
*/
AS	
	: A S
	;
/*
	| ASC
	| ASSERTION | AT
	| AUTHORIZATION | AVG
	| BEGIN | BETWEEN | BIT | BIT_LENGTH
	| BOTH | 
*/
BY
	: B Y
	;

/*
	| CASCADE | CASCADED | CASE | CAST
	| CATALOG
	| CHAR | CHARACTER | CHAR_LENGTH
	| CHARACTER_LENGTH | CHECK | CLOSE | COALESCE
	| 
*/
COLLATE	
	: 'COLLATE'
	;

/*
	| COLLATION
	| COLUMN | COMMIT
	| CONNECT
	| CONNECTION | CONSTRAINT
	| CONSTRAINTS | CONTINUE
	| CONVERT | 
*/

CORRESPONDING
	: C O R R E S P O N D I N G
	;

/*
 | COUNT | CREATE | CROSS
	| CURRENT
	| CURRENT_DATE | CURRENT_TIME
	| CURRENT_TIMESTAMP | CURRENT_USER | CURSOR
	| DATE | DAY | DEALLOCATE | DEC
	| DECIMAL | DECLARE | DEFAULT | DEFERRABLE
	| DEFERRED | DELETE | DESC | DESCRIBE | DESCRIPTOR
	| DIAGNOSTICS
	| DISCONNECT | 
*/
DISTINCT
	: D I S T I N C T
	;

/*
 | DOMAIN | DOUBLE | DROP
	| ELSE | END | END-EXEC | ESCAPE
	| EXCEPT | EXCEPTION
	| EXEC | EXECUTE | EXISTS
	| EXTERNAL | EXTRACT
	| FALSE | FETCH | FIRST | FLOAT | 
*/
FOR
	: F O R
	;

/*
	| FOREIGN | FOUND | 
*/
FROM
	: F R O M
	;
/*
 | FULL
	| GET | GLOBAL | GO | GOTO
	| GRANT | GROUP
	| HAVING | HOUR
	| IDENTITY | IMMEDIATE | 

*/

IN
	: I N
	;

INDICATOR
	: 'INDICATOR'
	;
/*

	| INITIALLY | INNER | INPUT
	| INSENSITIVE | INSERT | INT | INTEGER | 
*/

INTERSECT
	: I N T E R S E C T
	;

/*
	| INTERVAL | 
*/

INTO
	: I N T O
	;

/*
	 | IS
	| ISOLATION
	| JOIN
	| KEY
	| LANGUAGE | LAST | LEADING | LEFT
	| LEVEL | LIKE | LOCAL | LOWER
	| MATCH | MAX | MIN | MINUTE | 
*/

/*
MODULE
	: 'MODULE'
	;
*/

/*
	| MONTH
	| NAMES | NATIONAL | NATURAL | NCHAR | NEXT | NO
	| NOT | NULL
	| NULLIF | NUMERIC
	| OCTET_LENGTH | OF
	| ON | ONLY | OPEN | OPTION | OR
	| ORDER | OUTER
	| OUTPUT | OVERLAPS
	| PAD | PARTIAL | POSITION | PRECISION | PREPARE
	| PRESERVE | PRIMARY
	| PRIOR | PRIVILEGES | PROCEDURE | PUBLIC
	| READ | REAL | REFERENCES | RELATIVE | RESTRICT
	| REVOKE | RIGHT
	| ROLLBACK | ROWS
	| SCHEMA | SCROLL | SECOND | SECTION
*/
SELECT 
	: S E L E C T
	;
/*
	| SESSION | SESSION_USER | SET
	| SIZE | SMALLINT | SOME | SPACE | SQL | SQLCODE
	| SQLERROR | SQLSTATE
	| 
*/
SUBSTRING
	: 'SUBSTRING'
	;
/*
 | SUM | SYSTEM_USER
	| TABLE | TEMPORARY
	| THEN | TIME | TIMESTAMP
	| TIMEZONE_HOUR | TIMEZONE_MINUTE
	| TO | TRAILING | TRANSACTION
	| TRANSLATE | TRANSLATION | TRIM | TRUE
	| UNION | UNIQUE | UNKNOWN | UPDATE | UPPER | USAGE
	| USER | USING
	| 
*/
VALUE
	: V A L U E
	;

/*
 | VALUES | VARCHAR | VARYING | VIEW
	| WHEN | WHENEVER | WHERE | WITH | WORK | WRITE
	| YEAR
	| ZONE

NON-RESERVED_WORD ::=
	
	  ADA
	| C | CATALOG_NAME
	| CHARACTER_SET_CATALOG | CHARACTER_SET_NAME
	| CHARACTER_SET_SCHEMA | CLASS_ORIGIN | COBOL | COLLATION_CATALOG
	| COLLATION_NAME | COLLATION_SCHEMA | COLUMN_NAME | COMMAND_FUNCTION
	| COMMITTED
	| CONDITION_NUMBER | CONNECTION_NAME | CONSTRAINT_CATALOG | CONSTRAINT_NAME
	| CONSTRAINT_SCHEMA | CURSOR_NAME
	| DATA | DATETIME_INTERVAL_CODE
	| DATETIME_INTERVAL_PRECISION | DYNAMIC_FUNCTION
	| FORTRAN
	| LENGTH
	| MESSAGE_LENGTH | MESSAGE_OCTET_LENGTH | MESSAGE_TEXT | MORE | MUMPS
	| NAME | NULLABLE | NUMBER
	| PASCAL | PLI
	| REPEATABLE | RETURNED_LENGTH | RETURNED_OCTET_LENGTH | RETURNED_SQLSTATE
	| ROW_COUNT
	| SCALE | SCHEMA_NAME | SERIALIZABLE | SERVER_NAME | SUBCLASS_ORIGIN
	| TABLE_NAME | TYPE
	| UNCOMMITTED | UNNAMED

UNSIGNED_NUMERIC_LITERAL ::=
	  EXACT_NUMERIC_LITERAL
	| APPROXIMATE_NUMERIC_LITERAL

EXACT_NUMERIC_LITERAL ::=
	  UNSIGNED_INTEGER ( PERIOD ( UNSIGNED_INTEGER )* )*
	| PERIOD UNSIGNED_INTEGER

UNSIGNED_INTEGER ::= DIGIT...

APPROXIMATE_NUMERIC_LITERAL ::= MANTISSA E EXPONENT

MANTISSA ::= EXACT_NUMERIC_LITERAL

EXPONENT ::= SIGNED_INTEGER

SIGNED_INTEGER ::= ( SIGN )* UNSIGNED_INTEGER

*/

SIGN
	: PLUS_SIGN
	| MINUS_SIGN
	;

/*
NATIONAL_CHARACTER_STRING_LITERAL ::=
	N QUOTE ( CHARACTER_REPRESENTATION... )* QUOTE
	  ( { SEPARATOR... QUOTE ( CHARACTER_REPRESENTATION... )* QUOTE }... )*
*/

CHARACTER_REPRESENTATION
	: ID
/*
	: NONQUOTE_CHARACTER
	| QUOTE_SYMBOL
*/
	;

/*
NONQUOTE_CHARACTER ::= !! EMPHASIS(SEE THE SYNTAX RULES.)

QUOTE_SYMBOL ::= QUOTE

SEPARATOR ::= { COMMENT | SPACE | NEWLINE }...

COMMENT ::=
	COMMENT_INTRODUCER ( COMMENT_CHARACTER... )* NEWLINE

COMMENT_INTRODUCER ::= MINUS_SIGN[...]

COMMENT_CHARACTER ::=
	  NONQUOTE_CHARACTER
	| QUOTE

NEWLINE ::= !! EMPHASIS(IMPLEMENTATION-DEFINED END-OF-LINE INDICATOR)

BIT_STRING_LITERAL ::=
	B QUOTE ( BIT... )* QUOTE
	  ( { SEPARATOR... QUOTE ( BIT... )* QUOTE }... )*

BIT ::= 0 | 1

HEX_STRING_LITERAL ::=
	X QUOTE ( HEXIT... )* QUOTE
	  ( { SEPARATOR... QUOTE ( HEXIT... )* QUOTE }... )*

HEXIT ::= DIGIT | A | B | C | D | E | F | A | B | C | D | E | F

DELIMITER_TOKEN ::=
	  CHARACTER_STRING_LITERAL
	| DATE_STRING
	| TIME_STRING
	| TIMESTAMP_STRING
	| INTERVAL_STRING
	| DELIMITED_IDENTIFIER
	| SQL_SPECIAL_CHARACTER
	| NOT_EQUALS_OPERATOR
	| GREATER_THAN_OR_EQUALS_OPERATOR
	| LESS_THAN_OR_EQUALS_OPERATOR
	| CONCATENATION_OPERATOR
	| DOUBLE_PERIOD
	| LEFT_BRACKET
	| RIGHT_BRACKET
*/

CHARACTER_STRING_LITERAL
	: ( INTRODUCER )* QUOTE ( CHARACTER_REPRESENTATION )* QUOTE 
/*	
 ( { SEPARATOR... QUOTE ( CHARACTER_REPRESENTATION... )* QUOTE }... )*
*/
	;


INTRODUCER 
	: UNDERSCORE
	;

/*

CHARACTER_SET_SPECIFICATION ::=
	  STANDARD_CHARACTER_REPERTOIRE_NAME
	| IMPLEMENTATION-DEFINED_CHARACTER_REPERTOIRE_NAME
	| USER-DEFINED_CHARACTER_REPERTOIRE_NAME
	| STANDARD_UNIVERSAL_CHARACTER_FORM-OF-USE_NAME
	| IMPLEMENTATION-DEFINED_UNIVERSAL_CHARACTER_FORM-OF-USE_NAME

STANDARD_CHARACTER_REPERTOIRE_NAME ::= CHARACTER_SET_NAME

CHARACTER_SET_NAME ::= ( SCHEMA_NAME PERIOD )*
	  SQL_LANGUAGE_IDENTIFIER
*/

SCHEMA_NAME
	: ( CATALOG_NAME PERIOD )* UNQUALIFIED_SCHEMA_NAME
	;

CATALOG_NAME
	: IDENTIFIER
	;

IDENTIFIER
	: ( INTRODUCER )* ACTUAL_IDENTIFIER
	;

ACTUAL_IDENTIFIER
	: REGULAR_IDENTIFIER	
	| DELIMITED_IDENTIFIER
	;

DELIMITED_IDENTIFIER
	: DOUBLE_QUOTE DELIMITED_IDENTIFIER_BODY DOUBLE_QUOTE
	;

DELIMITED_IDENTIFIER_BODY
	: ID
/*	
	: DELIMITED_IDENTIFIER_PART...
*/
	;

/*
DELIMITED_IDENTIFIER_PART ::=
	  NONDOUBLEQUOTE_CHARACTER
	| DOUBLEQUOTE_SYMBOL

NONDOUBLEQUOTE_CHARACTER ::= EMPHASIS(!! SEE THE SYNTAX RULES)

DOUBLEQUOTE_SYMBOL ::= DOUBLE_QUOTE
*/

UNQUALIFIED_SCHEMA_NAME
	: IDENTIFIER
	;

/*
SQL_LANGUAGE_IDENTIFIER ::=
	SQL_LANGUAGE_IDENTIFIER_START
	   ( { UNDERSCORE | SQL_LANGUAGE_IDENTIFIER_PART }... )*

SQL_LANGUAGE_IDENTIFIER_START ::= SIMPLE_LATIN_LETTER

SQL_LANGUAGE_IDENTIFIER_PART ::=
	  SIMPLE_LATIN_LETTER
	| DIGIT

IMPLEMENTATION-DEFINED_CHARACTER_REPERTOIRE_NAME ::=
	CHARACTER_SET_NAME

USER-DEFINED_CHARACTER_REPERTOIRE_NAME ::= CHARACTER_SET_NAME

STANDARD_UNIVERSAL_CHARACTER_FORM-OF-USE_NAME ::=
	CHARACTER_SET_NAME

IMPLEMENTATION-DEFINED_UNIVERSAL_CHARACTER_FORM-OF-USE_NAME ::=
	CHARACTER_SET_NAME

DATE_STRING ::=
	QUOTE DATE_VALUE QUOTE

DATE_VALUE ::=
	YEARS_VALUE MINUS_SIGN MONTHS_VALUE
		MINUS_SIGN DAYS_VALUE

YEARS_VALUE ::= DATETIME_VALUE

DATETIME_VALUE ::= UNSIGNED_INTEGER

MONTHS_VALUE ::= DATETIME_VALUE

DAYS_VALUE ::= DATETIME_VALUE

TIME_STRING ::=
	QUOTE TIME_VALUE ( TIME_ZONE_INTERVAL )* QUOTE

TIME_VALUE ::=
	HOURS_VALUE COLON MINUTES_VALUE COLON SECONDS_VALUE

HOURS_VALUE ::= DATETIME_VALUE

MINUTES_VALUE ::= DATETIME_VALUE

SECONDS_VALUE ::=
	  SECONDS_INTEGER_VALUE ( PERIOD ( SECONDS_FRACTION )* )*

SECONDS_INTEGER_VALUE ::= UNSIGNED_INTEGER

SECONDS_FRACTION ::= UNSIGNED_INTEGER

TIME_ZONE_INTERVAL ::=
	SIGN HOURS_VALUE COLON MINUTES_VALUE

TIMESTAMP_STRING ::=
	QUOTE DATE_VALUE SPACE TIME_VALUE
		( TIME_ZONE_INTERVAL )* QUOTE

INTERVAL_STRING ::=
	QUOTE { YEAR-MONTH_LITERAL | DAY-TIME_LITERAL } QUOTE

YEAR-MONTH_LITERAL ::=
	  YEARS_VALUE
	| ( YEARS_VALUE MINUS_SIGN )* MONTHS_VALUE

DAY-TIME_LITERAL ::=
	  DAY-TIME_INTERVAL
	| TIME_INTERVAL

DAY-TIME_INTERVAL ::=
	DAYS_VALUE
	  ( SPACE HOURS_VALUE ( COLON MINUTES_VALUE
		( COLON SECONDS_VALUE )* )* )*

TIME_INTERVAL ::=
	  HOURS_VALUE ( COLON MINUTES_VALUE ( COLON SECONDS_VALUE )* )*
	| MINUTES_VALUE ( COLON SECONDS_VALUE )*
	| SECONDS_VALUE

NOT_EQUALS_OPERATOR ::= 

GREATER_THAN_OR_EQUALS_OPERATOR ::= =

LESS_THAN_OR_EQUALS_OPERATOR ::= =

*/

CONCATENATION_OPERATOR 
	: '||'
	;

/*
DOUBLE_PERIOD ::= ..

MODULE ::=
	MODULE_NAME_CLAUSE
	LANGUAGE_CLAUSE
	MODULE_AUTHORIZATION_CLAUSE
	( TEMPORARY_TABLE_DECLARATION... )*
	MODULE_CONTENTS...

MODULE_NAME_CLAUSE ::=
	MODULE ( MODULE_NAME )*
	  ( MODULE_CHARACTER_SET_SPECIFICATION )*

MODULE_NAME ::= IDENTIFIER

MODULE_CHARACTER_SET_SPECIFICATION ::=
	NAMES ARE CHARACTER_SET_SPECIFICATION

LANGUAGE_CLAUSE ::=
	LANGUAGE LANGUAGE_NAME

LANGUAGE_NAME ::=
	ADA | C | COBOL | FORTRAN | MUMPS | PASCAL | PLI

MODULE_AUTHORIZATION_CLAUSE ::=
	  SCHEMA SCHEMA_NAME
	| AUTHORIZATION MODULE_AUTHORIZATION_IDENTIFIER
	| SCHEMA SCHEMA_NAME
		  AUTHORIZATION MODULE_AUTHORIZATION_IDENTIFIER

MODULE_AUTHORIZATION_IDENTIFIER ::=
	AUTHORIZATION_IDENTIFIER

AUTHORIZATION_IDENTIFIER ::= IDENTIFIER

TEMPORARY_TABLE_DECLARATION ::=
	DECLARE LOCAL TEMPORARY TABLE
		QUALIFIED_LOCAL_TABLE_NAME
	  TABLE_ELEMENT_LIST
	  ( ON COMMIT { PRESERVE | DELETE } ROWS )*
*/
/*
QUALIFIED_LOCAL_TABLE_NAME
	: MODULE PERIOD LOCAL_TABLE_NAME
	;

LOCAL_TABLE_NAME
	: QUALIFIED_IDENTIFIER
	;

*/

QUALIFIED_IDENTIFIER
	: IDENTIFIER
	;

/*
TABLE_ELEMENT_LIST ::=
	  LEFT_PAREN TABLE_ELEMENT ( { COMMA TABLE_ELEMENT }... )* RIGHT_PAREN

TABLE_ELEMENT ::=
	  COLUMN_DEFINITION
	| TABLE_CONSTRAINT_DEFINITION

COLUMN_DEFINITION ::=
	COLUMN_NAME { DATA_TYPE | DOMAIN_NAME }
	( DEFAULT_CLAUSE )*
	( COLUMN_CONSTRAINT_DEFINITION... )*
	( COLLATE_CLAUSE )*
*/

COLUMN_NAME
	: IDENTIFIER
	;

/*
DATA_TYPE ::=
	  CHARACTER_STRING_TYPE
		   ( CHARACTER SET CHARACTER_SET_SPECIFICATION )*
	| NATIONAL_CHARACTER_STRING_TYPE
	| BIT_STRING_TYPE
	| NUMERIC_TYPE
	| DATETIME_TYPE
	| INTERVAL_TYPE

CHARACTER_STRING_TYPE ::=
	  CHARACTER ( LEFT_PAREN LENGTH RIGHT_PAREN )*
	| CHAR ( LEFT_PAREN LENGTH RIGHT_PAREN )*
	| CHARACTER VARYING LEFT_PAREN LENGTH RIGHT_PAREN
	| CHAR VARYING LEFT_PAREN LENGTH RIGHT_PAREN
	| VARCHAR LEFT_PAREN LENGTH RIGHT_PAREN

LENGTH ::= UNSIGNED_INTEGER

NATIONAL_CHARACTER_STRING_TYPE ::=
	  NATIONAL CHARACTER ( LEFT_PAREN LENGTH RIGHT_PAREN )*
	| NATIONAL CHAR ( LEFT_PAREN LENGTH RIGHT_PAREN )*
	| NCHAR ( LEFT_PAREN LENGTH RIGHT_PAREN )*
	| NATIONAL CHARACTER VARYING LEFT_PAREN LENGTH RIGHT_PAREN
	| NATIONAL CHAR VARYING LEFT_PAREN LENGTH RIGHT_PAREN
	| NCHAR VARYING LEFT_PAREN LENGTH RIGHT_PAREN

BIT_STRING_TYPE ::=
	  BIT ( LEFT_PAREN LENGTH RIGHT_PAREN )*
	| BIT VARYING LEFT_PAREN LENGTH RIGHT_PAREN

NUMERIC_TYPE ::=
	  EXACT_NUMERIC_TYPE
	| APPROXIMATE_NUMERIC_TYPE

EXACT_NUMERIC_TYPE ::=
	  NUMERIC ( LEFT_PAREN PRECISION ( COMMA SCALE )* RIGHT_PAREN )*
	| DECIMAL ( LEFT_PAREN PRECISION ( COMMA SCALE )* RIGHT_PAREN )*
	| DEC ( LEFT_PAREN PRECISION ( COMMA SCALE )* RIGHT_PAREN )*
	| INTEGER
	| INT
	| SMALLINT

PRECISION ::= UNSIGNED_INTEGER

SCALE ::= UNSIGNED_INTEGER

APPROXIMATE_NUMERIC_TYPE ::=
	  FLOAT ( LEFT_PAREN PRECISION RIGHT_PAREN )*
	| REAL
	| DOUBLE PRECISION

DATETIME_TYPE ::=
	  DATE
	| TIME ( LEFT_PAREN TIME_PRECISION RIGHT_PAREN )*
		  ( WITH TIME ZONE )*
	| TIMESTAMP ( LEFT_PAREN TIMESTAMP_PRECISION RIGHT_PAREN )*
		  ( WITH TIME ZONE )*

TIME_PRECISION ::= TIME_FRACTIONAL_SECONDS_PRECISION

TIME_FRACTIONAL_SECONDS_PRECISION ::= UNSIGNED_INTEGER

TIMESTAMP_PRECISION ::= TIME_FRACTIONAL_SECONDS_PRECISION

INTERVAL_TYPE ::= INTERVAL INTERVAL_QUALIFIER

INTERVAL_QUALIFIER ::=
	  START_FIELD TO END_FIELD
	| SINGLE_DATETIME_FIELD

START_FIELD ::=
	NON-SECOND_DATETIME_FIELD
		( LEFT_PAREN INTERVAL_LEADING_FIELD_PRECISION RIGHT_PAREN )*

NON-SECOND_DATETIME_FIELD ::= YEAR | MONTH | DAY | HOUR
	| MINUTE

INTERVAL_LEADING_FIELD_PRECISION ::= UNSIGNED_INTEGER

END_FIELD ::=
	  NON-SECOND_DATETIME_FIELD
	| SECOND ( LEFT_PAREN INTERVAL_FRACTIONAL_SECONDS_PRECISION RIGHT_PAREN )*

INTERVAL_FRACTIONAL_SECONDS_PRECISION ::= UNSIGNED_INTEGER

SINGLE_DATETIME_FIELD ::=
	  NON-SECOND_DATETIME_FIELD
		  ( LEFT_PAREN INTERVAL_LEADING_FIELD_PRECISION RIGHT_PAREN )*
	| SECOND ( LEFT_PAREN INTERVAL_LEADING_FIELD_PRECISION
		  ( COMMA INTERVAL_FRACTIONAL_SECONDS_PRECISION )* RIGHT_PAREN )*

DOMAIN_NAME ::= QUALIFIED_NAME
*/

QUALIFIED_NAME
	: ( SCHEMA_NAME PERIOD )* QUALIFIED_IDENTIFIER
	;

/*
DEFAULT_CLAUSE ::=
	  DEFAULT DEFAULT_OPTION

DEFAULT_OPTION ::=
	  LITERAL
	| DATETIME_VALUE_FUNCTION
	| USER
	| CURRENT_USER
	| SESSION_USER
	| SYSTEM_USER
	| NULL
*/

LITERAL
/*
	: SIGNED_NUMERIC_LITERAL
*/
	: GENERAL_LITERAL
	;

/*
SIGNED_NUMERIC_LITERAL ::=
	( SIGN )* UNSIGNED_NUMERIC_LITERAL
*/

GENERAL_LITERAL
	: CHARACTER_STRING_LITERAL
	/*
	| NATIONAL_CHARACTER_STRING_LITERAL
	| BIT_STRING_LITERAL
	| HEX_STRING_LITERAL
	| DATETIME_LITERAL
	| INTERVAL_LITERAL
	*/
	;

/*
DATETIME_LITERAL ::=
	  DATE_LITERAL
	| TIME_LITERAL
	| TIMESTAMP_LITERAL

DATE_LITERAL ::=
	DATE DATE_STRING

TIME_LITERAL ::=
	TIME TIME_STRING

TIMESTAMP_LITERAL ::=
	TIMESTAMP TIMESTAMP_STRING

INTERVAL_LITERAL ::=
	INTERVAL ( SIGN )* INTERVAL_STRING INTERVAL_QUALIFIER

DATETIME_VALUE_FUNCTION ::=
	  CURRENT_DATE_VALUE_FUNCTION
	| CURRENT_TIME_VALUE_FUNCTION
	| CURRENT_TIMESTAMP_VALUE_FUNCTION

CURRENT_DATE_VALUE_FUNCTION ::= CURRENT_DATE

CURRENT_TIME_VALUE_FUNCTION ::=
	  CURRENT_TIME ( LEFT_PAREN TIME_PRECISION RIGHT_PAREN )*

CURRENT_TIMESTAMP_VALUE_FUNCTION ::=
	  CURRENT_TIMESTAMP ( LEFT_PAREN TIMESTAMP_PRECISION RIGHT_PAREN )*

COLUMN_CONSTRAINT_DEFINITION ::=
	( CONSTRAINT_NAME_DEFINITION )*
	COLUMN_CONSTRAINT
	  ( CONSTRAINT_ATTRIBUTES )*

CONSTRAINT_NAME_DEFINITION ::= CONSTRAINT CONSTRAINT_NAME

CONSTRAINT_NAME ::= QUALIFIED_NAME

COLUMN_CONSTRAINT ::=
	  NOT NULL
	| UNIQUE_SPECIFICATION
	| REFERENCES_SPECIFICATION
	| CHECK_CONSTRAINT_DEFINITION

UNIQUE_SPECIFICATION ::=
	UNIQUE | PRIMARY KEY

REFERENCES_SPECIFICATION ::=
	REFERENCES REFERENCED_TABLE_AND_COLUMNS
	  ( MATCH MATCH_TYPE )*
	  ( REFERENTIAL_TRIGGERED_ACTION )*

REFERENCED_TABLE_AND_COLUMNS ::=
	 TABLE_NAME ( LEFT_PAREN REFERENCE_COLUMN_LIST RIGHT_PAREN )*
*/

TABLE_NAME
	: QUALIFIED_NAME
/*
	| QUALIFIED_LOCAL_TABLE_NAME
*/
	;

/*
REFERENCE_COLUMN_LIST ::= COLUMN_NAME_LIST
*/

COLUMN_NAME_LIST
	: COLUMN_NAME ( COMMA COLUMN_NAME )*
	;

/*
MATCH_TYPE ::=
	  FULL
	| PARTIAL

REFERENTIAL_TRIGGERED_ACTION ::=
	  UPDATE_RULE ( DELETE_RULE )*
	| DELETE_RULE ( UPDATE_RULE )*

UPDATE_RULE ::= ON UPDATE REFERENTIAL_ACTION

REFERENTIAL_ACTION ::=
	  CASCADE
	| SET NULL
	| SET DEFAULT
	| NO ACTION

DELETE_RULE ::= ON DELETE REFERENTIAL_ACTION

CHECK_CONSTRAINT_DEFINITION ::=
	CHECK
		LEFT_PAREN SEARCH_CONDITION RIGHT_PAREN

SEARCH_CONDITION ::=
	  BOOLEAN_TERM
	| SEARCH_CONDITION OR BOOLEAN_TERM

BOOLEAN_TERM ::=
	  BOOLEAN_FACTOR
	| BOOLEAN_TERM AND BOOLEAN_FACTOR

BOOLEAN_FACTOR ::=
	( NOT )* BOOLEAN_TEST

BOOLEAN_TEST ::=
	BOOLEAN_PRIMARY ( IS ( NOT )*
		  TRUTH_VALUE )*

BOOLEAN_PRIMARY ::=
	  PREDICATE
	| LEFT_PAREN SEARCH_CONDITION RIGHT_PAREN

PREDICATE ::=
	  COMPARISON_PREDICATE
	| BETWEEN_PREDICATE
	| IN_PREDICATE
	| LIKE_PREDICATE
	| NULL_PREDICATE
	| QUANTIFIED_COMPARISON_PREDICATE
	| EXISTS_PREDICATE
	| UNIQUE_PREDICATE
	| MATCH_PREDICATE
	| OVERLAPS_PREDICATE

COMPARISON_PREDICATE ::=
	ROW_VALUE_CONSTRUCTOR COMP_OP
		ROW_VALUE_CONSTRUCTOR

ROW_VALUE_CONSTRUCTOR ::=
	   ROW_VALUE_CONSTRUCTOR_ELEMENT
	| LEFT_PAREN ROW_VALUE_CONSTRUCTOR_LIST RIGHT_PAREN
	| ROW_SUBQUERY

ROW_VALUE_CONSTRUCTOR_ELEMENT ::=
	  VALUE_EXPRESSION
	| NULL_SPECIFICATION
	| DEFAULT_SPECIFICATION
*/

VALUE_EXPRESSION
/*
	: NUMERIC_VALUE_EXPRESSION
*/
	: STRING_VALUE_EXPRESSION
/*
	| DATETIME_VALUE_EXPRESSION
	| INTERVAL_VALUE_EXPRESSION
*/
	;

NUMERIC_VALUE_EXPRESSION
	: TERM
/*
	| NUMERIC_VALUE_EXPRESSION PLUS_SIGN TERM
	| NUMERIC_VALUE_EXPRESSION MINUS_SIGN TERM
*/
	;

TERM
	: FACTOR
/*
	| TERM ASTERISK FACTOR
	| TERM SOLIDUS FACTOR
*/
	;

FACTOR
	: ( SIGN )* NUMERIC_PRIMARY
	;

NUMERIC_PRIMARY
	: VALUE_EXPRESSION_PRIMARY
/*
	| NUMERIC_VALUE_FUNCTION
*/
	;

VALUE_EXPRESSION_PRIMARY
	: UNSIGNED_VALUE_SPECIFICATION
	| COLUMN_REFERENCE
/*
	| SET_FUNCTION_SPECIFICATION
	| SCALAR_SUBQUERY
	| CASE_EXPRESSION
	| LEFT_PAREN VALUE_EXPRESSION RIGHT_PAREN
	| CAST_SPECIFICATION
*/
	;

UNSIGNED_VALUE_SPECIFICATION
	: UNSIGNED_LITERAL
	| GENERAL_VALUE_SPECIFICATION
	;

UNSIGNED_LITERAL
/*
	: UNSIGNED_NUMERIC_LITERAL
*/
	: GENERAL_LITERAL
	;

GENERAL_VALUE_SPECIFICATION
	: PARAMETER_SPECIFICATION
	| DYNAMIC_PARAMETER_SPECIFICATION
	| VARIABLE_SPECIFICATION
/*
	| USER
	| CURRENT_USER
	| SESSION_USER
	| SYSTEM_USER
*/
	| VALUE
	;

PARAMETER_SPECIFICATION
	: PARAMETER_NAME ( INDICATOR_PARAMETER )*
	;

PARAMETER_NAME
	: COLON IDENTIFIER
	;

INDICATOR_PARAMETER
	: ( INDICATOR )* PARAMETER_NAME
	;

DYNAMIC_PARAMETER_SPECIFICATION
	: QUESTION_MARK
	;

VARIABLE_SPECIFICATION
	: EMBEDDED_VARIABLE_NAME ( INDICATOR_VARIABLE )*
	;

EMBEDDED_VARIABLE_NAME
	: COLON
	;
/*
HOST_IDENTIFIER ::=
	  ADA_HOST_IDENTIFIER
	| C_HOST_IDENTIFIER
	| COBOL_HOST_IDENTIFIER
	| FORTRAN_HOST_IDENTIFIER
	| MUMPS_HOST_IDENTIFIER
	| PASCAL_HOST_IDENTIFIER
	| PL/I_HOST_IDENTIFIER

ADA_HOST_IDENTIFIER ::= !! EMPHASIS(SEE THE SYNTAX RULES.)

C_HOST_IDENTIFIER ::=
	!! EMPHASIS(SEE THE SYNTAX RULES.)

COBOL_HOST_IDENTIFIER ::= !! EMPHASIS(SEE THE SYNTAX RULES.)

FORTRAN_HOST_IDENTIFIER ::= !! EMPHASIS(SEE THE SYNTAX RULES.)

MUMPS_HOST_IDENTIFIER ::= !! EMPHASIS(SEE THE SYNTAX RULES.)

PASCAL_HOST_IDENTIFIER ::= !! EMPHASIS(SEE THE SYNTAX RULES.)

PL/I_HOST_IDENTIFIER ::= !! EMPHASIS(SEE THE SYNTAX RULES.)

*/

INDICATOR_VARIABLE
	: ( INDICATOR )* EMBEDDED_VARIABLE_NAME
	;

COLUMN_REFERENCE
	: ( QUALIFIER PERIOD )* COLUMN_NAME
	;

QUALIFIER
	: TABLE_NAME
	| CORRELATION_NAME
	;

CORRELATION_NAME
	: IDENTIFIER
	;

/*
SET_FUNCTION_SPECIFICATION ::=
	  COUNT LEFT_PAREN ASTERISK RIGHT_PAREN
	| GENERAL_SET_FUNCTION

GENERAL_SET_FUNCTION ::=
	  SET_FUNCTION_TYPE
		  LEFT_PAREN ( SET_QUANTIFIER )* VALUE_EXPRESSION RIGHT_PAREN

SET_FUNCTION_TYPE ::=
	AVG | MAX | MIN | SUM | COUNT
*/

SET_QUANTIFIER
	: DISTINCT
	| ALL
	;

SCALAR_SUBQUERY
	: SUBQUERY
	;

SUBQUERY
	: LEFT_PAREN QUERY_EXPRESSION RIGHT_PAREN
	;

QUERY_EXPRESSION
	: NON_JOIN_QUERY_EXPRESSION
/*
	| JOINED_TABLE
*/
	;

NON_JOIN_QUERY_EXPRESSION
	: NON_JOIN_QUERY_TERM
/*
	| QUERY_EXPRESSION UNION  ( ALL )* ( CORRESPONDING_SPEC )* QUERY_TERM
	| QUERY_EXPRESSION EXCEPT ( ALL )* ( CORRESPONDING_SPEC )* QUERY_TERM
*/
	;

NON_JOIN_QUERY_TERM
	: NON_JOIN_QUERY_PRIMARY
	| QUERY_TERM INTERSECT ( ALL )*
		  ( CORRESPONDING_SPEC )* QUERY_PRIMARY
	;

NON_JOIN_QUERY_PRIMARY
	: SIMPLE_TABLE
	| LEFT_PAREN NON_JOIN_QUERY_EXPRESSION RIGHT_PAREN
	;

SIMPLE_TABLE
	: QUERY_SPECIFICATION
/*
	| TABLE_VALUE_CONSTRUCTOR
	| EXPLICIT_TABLE
*/
	;

QUERY_SPECIFICATION
	: SELECT ( SET_QUANTIFIER )* SELECT_LIST TABLE_EXPRESSION
	;

SELECT_LIST
	: ASTERISK
	| SELECT_SUBLIST (COMMA SELECT_SUBLIST )*
	;

SELECT_SUBLIST
	: DERIVED_COLUMN
	| QUALIFIER PERIOD ASTERISK
	;

DERIVED_COLUMN 
	: VALUE_EXPRESSION ( AS_CLAUSE )*
	;

AS_CLAUSE 
	: ( AS )* COLUMN_NAME
	;

TABLE_EXPRESSION
	: FROM_CLAUSE
/*
	( WHERE_CLAUSE )*
	( GROUP_BY_CLAUSE )*
	( HAVING_CLAUSE )*
*/
	;

FROM_CLAUSE
	: FROM TABLE_REFERENCE ( COMMA TABLE_REFERENCE )*
	;

TABLE_REFERENCE
	: TABLE_NAME ( ( AS )* CORRELATION_NAME ( LEFT_PAREN DERIVED_COLUMN_LIST RIGHT_PAREN )* )*
/*
	| DERIVED_TABLE ( AS )* CORRELATION_NAME ( LEFT_PAREN DERIVED_COLUMN_LIST RIGHT_PAREN )*
	| JOINED_TABLE
*/
	;

DERIVED_COLUMN_LIST
	: COLUMN_NAME_LIST
	;
/*
DERIVED_TABLE
	: TABLE_SUBQUERY
	;

TABLE_SUBQUERY
	: SUBQUERY
	;

JOINED_TABLE ::=
	  CROSS_JOIN
	| QUALIFIED_JOIN
	| LEFT_PAREN JOINED_TABLE RIGHT_PAREN

CROSS_JOIN ::=
	TABLE_REFERENCE CROSS JOIN TABLE_REFERENCE

QUALIFIED_JOIN ::=
	TABLE_REFERENCE ( NATURAL )* ( JOIN_TYPE )* JOIN
	  TABLE_REFERENCE ( JOIN_SPECIFICATION )*

JOIN_TYPE ::=
	  INNER
	| OUTER_JOIN_TYPE ( OUTER )*
	| UNION

OUTER_JOIN_TYPE ::=
	  LEFT
	| RIGHT
	| FULL

JOIN_SPECIFICATION ::=
	  JOIN_CONDITION
	| NAMED_COLUMNS_JOIN

JOIN_CONDITION ::= ON SEARCH_CONDITION

NAMED_COLUMNS_JOIN ::=
	USING LEFT_PAREN JOIN_COLUMN_LIST RIGHT_PAREN

JOIN_COLUMN_LIST ::= COLUMN_NAME_LIST

WHERE_CLAUSE ::= WHERE SEARCH_CONDITION

GROUP_BY_CLAUSE ::=
	GROUP BY GROUPING_COLUMN_REFERENCE_LIST

GROUPING_COLUMN_REFERENCE_LIST ::=
	GROUPING_COLUMN_REFERENCE
		( { COMMA GROUPING_COLUMN_REFERENCE }... )*

GROUPING_COLUMN_REFERENCE ::=
	COLUMN_REFERENCE ( COLLATE_CLAUSE )*
*/

COLLATE_CLAUSE
	: COLLATE COLLATION_NAME
	;

COLLATION_NAME
	: QUALIFIED_NAME
	;

/*
HAVING_CLAUSE ::= HAVING SEARCH_CONDITION

TABLE_VALUE_CONSTRUCTOR ::=
	VALUES TABLE_VALUE_CONSTRUCTOR_LIST

TABLE_VALUE_CONSTRUCTOR_LIST ::=
	ROW_VALUE_CONSTRUCTOR ( { COMMA ROW_VALUE_CONSTRUCTOR }... )*

EXPLICIT_TABLE ::= TABLE TABLE_NAME
*/

QUERY_TERM
	: NON_JOIN_QUERY_TERM
/*
	| JOINED_TABLE
*/
	;

CORRESPONDING_SPEC
	: CORRESPONDING ( BY LEFT_PAREN CORRESPONDING_COLUMN_LIST RIGHT_PAREN )*
	;

CORRESPONDING_COLUMN_LIST
	: COLUMN_NAME_LIST
	;

QUERY_PRIMARY
	: NON_JOIN_QUERY_PRIMARY
/*
	| JOINED_TABLE
*/
	;

/*
CASE_EXPRESSION ::=
	  CASE_ABBREVIATION
	| CASE_SPECIFICATION

CASE_ABBREVIATION ::=
	  NULLIF LEFT_PAREN VALUE_EXPRESSION COMMA
			VALUE_EXPRESSION RIGHT_PAREN
	| COALESCE LEFT_PAREN VALUE_EXPRESSION
			{ COMMA VALUE_EXPRESSION }... RIGHT_PAREN

CASE_SPECIFICATION ::=
	  SIMPLE_CASE
	| SEARCHED_CASE

SIMPLE_CASE ::=
	CASE CASE_OPERAND
	  SIMPLE_WHEN_CLAUSE...
	  ( ELSE_CLAUSE )*
	END

CASE_OPERAND ::= VALUE_EXPRESSION

SIMPLE_WHEN_CLAUSE ::= WHEN WHEN_OPERAND THEN RESULT

WHEN_OPERAND ::= VALUE_EXPRESSION

RESULT ::= RESULT_EXPRESSION | NULL

RESULT_EXPRESSION ::= VALUE_EXPRESSION

ELSE_CLAUSE ::= ELSE RESULT

SEARCHED_CASE ::=
	CASE
	  SEARCHED_WHEN_CLAUSE...
	  ( ELSE_CLAUSE )*
	END

SEARCHED_WHEN_CLAUSE ::= WHEN SEARCH_CONDITION THEN RESULT

CAST_SPECIFICATION ::=
	CAST LEFT_PAREN CAST_OPERAND AS
		CAST_TARGET RIGHT_PAREN

CAST_OPERAND ::=
	  VALUE_EXPRESSION
	| NULL

CAST_TARGET ::=
	  DOMAIN_NAME
	| DATA_TYPE
*/

/*
NUMERIC_VALUE_FUNCTION
	: POSITION_EXPRESSION
	| EXTRACT_EXPRESSION
	| LENGTH_EXPRESSION
	;

POSITION_EXPRESSION
	: POSITION LEFT_PAREN CHARACTER_VALUE_EXPRESSION IN CHARACTER_VALUE_EXPRESSION RIGHT_PAREN
	;
*/

CHARACTER_VALUE_EXPRESSION
	: CONCATENATION
	| CHARACTER_FACTOR
	;

CONCATENATION
	: CHARACTER_VALUE_EXPRESSION CONCATENATION_OPERATOR CHARACTER_FACTOR
	;

CHARACTER_FACTOR
	: CHARACTER_PRIMARY ( COLLATE_CLAUSE )*
	;

CHARACTER_PRIMARY
	: VALUE_EXPRESSION_PRIMARY
	| STRING_VALUE_FUNCTION
	;

STRING_VALUE_FUNCTION
	: CHARACTER_VALUE_FUNCTION
/*
	| BIT_VALUE_FUNCTION
*/
	;

CHARACTER_VALUE_FUNCTION
	: CHARACTER_SUBSTRING_FUNCTION
/*
	| FOLD
	| FORM-OF-USE_CONVERSION
	| CHARACTER_TRANSLATION
	| TRIM_FUNCTION
*/
	;

CHARACTER_SUBSTRING_FUNCTION
	: SUBSTRING LEFT_PAREN CHARACTER_VALUE_EXPRESSION FROM START_POSITION ( FOR STRING_LENGTH )* RIGHT_PAREN
	;

START_POSITION
	: NUMERIC_VALUE_EXPRESSION
	;

STRING_LENGTH
	: NUMERIC_VALUE_EXPRESSION
	;

/*
FOLD ::= { UPPER | LOWER }
	 LEFT_PAREN CHARACTER_VALUE_EXPRESSION RIGHT_PAREN

FORM-OF-USE_CONVERSION ::=
	CONVERT LEFT_PAREN CHARACTER_VALUE_EXPRESSION
		USING FORM-OF-USE_CONVERSION_NAME RIGHT_PAREN

FORM-OF-USE_CONVERSION_NAME ::= QUALIFIED_NAME

CHARACTER_TRANSLATION ::=
	TRANSLATE LEFT_PAREN CHARACTER_VALUE_EXPRESSION
		USING TRANSLATION_NAME RIGHT_PAREN

TRANSLATION_NAME ::= QUALIFIED_NAME

TRIM_FUNCTION ::=
	TRIM LEFT_PAREN TRIM_OPERANDS RIGHT_PAREN

TRIM_OPERANDS ::=
	( ( TRIM_SPECIFICATION )* ( TRIM_CHARACTER )* FROM )* TRIM_SOURCE

TRIM_SPECIFICATION ::=
	  LEADING
	| TRAILING
	| BOTH

TRIM_CHARACTER ::= CHARACTER_VALUE_EXPRESSION

TRIM_SOURCE ::= CHARACTER_VALUE_EXPRESSION

BIT_VALUE_FUNCTION ::=
	BIT_SUBSTRING_FUNCTION

BIT_SUBSTRING_FUNCTION ::=
	SUBSTRING LEFT_PAREN BIT_VALUE_EXPRESSION FROM START_POSITION
		( FOR STRING_LENGTH )* RIGHT_PAREN

BIT_VALUE_EXPRESSION ::=
	  BIT_CONCATENATION
	| BIT_FACTOR

BIT_CONCATENATION ::=
	BIT_VALUE_EXPRESSION CONCATENATION_OPERATOR BIT_FACTOR

BIT_FACTOR ::= BIT_PRIMARY

BIT_PRIMARY ::=
	  VALUE_EXPRESSION_PRIMARY
	| STRING_VALUE_FUNCTION

EXTRACT_EXPRESSION ::=
	EXTRACT LEFT_PAREN EXTRACT_FIELD
		FROM EXTRACT_SOURCE RIGHT_PAREN

EXTRACT_FIELD ::=
	  DATETIME_FIELD
	| TIME_ZONE_FIELD

DATETIME_FIELD ::=
	  NON-SECOND_DATETIME_FIELD
	| SECOND

TIME_ZONE_FIELD ::=
	  TIMEZONE_HOUR
	| TIMEZONE_MINUTE

EXTRACT_SOURCE ::=
	  DATETIME_VALUE_EXPRESSION
	| INTERVAL_VALUE_EXPRESSION

DATETIME_VALUE_EXPRESSION ::=
	  DATETIME_TERM
	| INTERVAL_VALUE_EXPRESSION PLUS_SIGN DATETIME_TERM
	| DATETIME_VALUE_EXPRESSION PLUS_SIGN INTERVAL_TERM
	| DATETIME_VALUE_EXPRESSION MINUS_SIGN INTERVAL_TERM

INTERVAL_TERM ::=
	  INTERVAL_FACTOR
	| INTERVAL_TERM_2 ASTERISK FACTOR
	| INTERVAL_TERM_2 SOLIDUS FACTOR
	| TERM ASTERISK INTERVAL_FACTOR

INTERVAL_FACTOR ::=
	( SIGN )* INTERVAL_PRIMARY

INTERVAL_PRIMARY ::=
	  VALUE_EXPRESSION_PRIMARY ( INTERVAL_QUALIFIER )*

INTERVAL_TERM_2 ::= INTERVAL_TERM

INTERVAL_VALUE_EXPRESSION ::=
	  INTERVAL_TERM
	| INTERVAL_VALUE_EXPRESSION_1 PLUS_SIGN INTERVAL_TERM_1
	| INTERVAL_VALUE_EXPRESSION_1 MINUS_SIGN INTERVAL_TERM_1
	| LEFT_PAREN DATETIME_VALUE_EXPRESSION MINUS_SIGN
		  DATETIME_TERM RIGHT_PAREN INTERVAL_QUALIFIER

INTERVAL_VALUE_EXPRESSION_1 ::= INTERVAL_VALUE_EXPRESSION

INTERVAL_TERM_1 ::= INTERVAL_TERM

DATETIME_TERM ::=
	  DATETIME_FACTOR

DATETIME_FACTOR ::=
	  DATETIME_PRIMARY ( TIME_ZONE )*

DATETIME_PRIMARY ::=
	  VALUE_EXPRESSION_PRIMARY
	| DATETIME_VALUE_FUNCTION

TIME_ZONE ::=
	AT TIME_ZONE_SPECIFIER

TIME_ZONE_SPECIFIER ::=
	  LOCAL
	| TIME ZONE INTERVAL_VALUE_EXPRESSION

LENGTH_EXPRESSION ::=
	  CHAR_LENGTH_EXPRESSION
	| OCTET_LENGTH_EXPRESSION
	| BIT_LENGTH_EXPRESSION

CHAR_LENGTH_EXPRESSION ::=
	{ CHAR_LENGTH | CHARACTER_LENGTH }
		LEFT_PAREN STRING_VALUE_EXPRESSION RIGHT_PAREN
*/

STRING_VALUE_EXPRESSION
	: CHARACTER_VALUE_EXPRESSION
/*
	| BIT_VALUE_EXPRESSION
*/
	;

/*
OCTET_LENGTH_EXPRESSION ::=
	OCTET_LENGTH LEFT_PAREN STRING_VALUE_EXPRESSION RIGHT_PAREN

BIT_LENGTH_EXPRESSION ::=
	BIT_LENGTH LEFT_PAREN STRING_VALUE_EXPRESSION RIGHT_PAREN

NULL_SPECIFICATION ::=
	NULL

DEFAULT_SPECIFICATION ::=
	DEFAULT

ROW_VALUE_CONSTRUCTOR_LIST ::=
	ROW_VALUE_CONSTRUCTOR_ELEMENT
		( { COMMA ROW_VALUE_CONSTRUCTOR_ELEMENT }... )*

ROW_SUBQUERY ::= SUBQUERY

COMP_OP ::=
	  EQUALS_OPERATOR
	| NOT_EQUALS_OPERATOR
	| LESS_THAN_OPERATOR
	| GREATER_THAN_OPERATOR
	| LESS_THAN_OR_EQUALS_OPERATOR
	| GREATER_THAN_OR_EQUALS_OPERATOR

BETWEEN_PREDICATE ::=
	ROW_VALUE_CONSTRUCTOR ( NOT )* BETWEEN
	  ROW_VALUE_CONSTRUCTOR AND ROW_VALUE_CONSTRUCTOR

IN_PREDICATE ::=
	ROW_VALUE_CONSTRUCTOR
	  ( NOT )* IN IN_PREDICATE_VALUE

IN_PREDICATE_VALUE ::=
	  TABLE_SUBQUERY
	| LEFT_PAREN IN_VALUE_LIST RIGHT_PAREN

IN_VALUE_LIST ::=
	VALUE_EXPRESSION { COMMA VALUE_EXPRESSION }...

LIKE_PREDICATE ::=
	MATCH_VALUE ( NOT )* LIKE PATTERN
	  ( ESCAPE ESCAPE_CHARACTER )*

MATCH_VALUE ::= CHARACTER_VALUE_EXPRESSION

PATTERN ::= CHARACTER_VALUE_EXPRESSION

ESCAPE_CHARACTER ::= CHARACTER_VALUE_EXPRESSION

NULL_PREDICATE ::= ROW_VALUE_CONSTRUCTOR
	IS ( NOT )* NULL

QUANTIFIED_COMPARISON_PREDICATE ::=
	ROW_VALUE_CONSTRUCTOR COMP_OP QUANTIFIER TABLE_SUBQUERY

QUANTIFIER ::= ALL | SOME

ALL ::= ALL

SOME ::= SOME | ANY

EXISTS_PREDICATE ::= EXISTS TABLE_SUBQUERY

UNIQUE_PREDICATE ::= UNIQUE TABLE_SUBQUERY

MATCH_PREDICATE ::=
	ROW_VALUE_CONSTRUCTOR MATCH ( UNIQUE )*
		( PARTIAL | FULL )* TABLE_SUBQUERY

OVERLAPS_PREDICATE ::=
	ROW_VALUE_CONSTRUCTOR_1 OVERLAPS ROW_VALUE_CONSTRUCTOR_2

ROW_VALUE_CONSTRUCTOR_1 ::= ROW_VALUE_CONSTRUCTOR

ROW_VALUE_CONSTRUCTOR_2 ::= ROW_VALUE_CONSTRUCTOR

TRUTH_VALUE ::=
	  TRUE
	| FALSE
	| UNKNOWN

CONSTRAINT_ATTRIBUTES ::=
	  CONSTRAINT_CHECK_TIME ( ( NOT )* DEFERRABLE )*
	| ( NOT )* DEFERRABLE ( CONSTRAINT_CHECK_TIME )*

CONSTRAINT_CHECK_TIME ::=
	  INITIALLY DEFERRED
	| INITIALLY IMMEDIATE

TABLE_CONSTRAINT_DEFINITION ::=
	( CONSTRAINT_NAME_DEFINITION )*
	TABLE_CONSTRAINT ( CONSTRAINT_ATTRIBUTES )*

TABLE_CONSTRAINT ::=
	  UNIQUE_CONSTRAINT_DEFINITION
	| REFERENTIAL_CONSTRAINT_DEFINITION
	| CHECK_CONSTRAINT_DEFINITION

UNIQUE_CONSTRAINT_DEFINITION ::=
			UNIQUE_SPECIFICATION EVEN IN SQL3)
	UNIQUE_SPECIFICATION
	  LEFT_PAREN UNIQUE_COLUMN_LIST RIGHT_PAREN

UNIQUE_COLUMN_LIST ::= COLUMN_NAME_LIST

REFERENTIAL_CONSTRAINT_DEFINITION ::=
	FOREIGN KEY
		LEFT_PAREN REFERENCING_COLUMNS RIGHT_PAREN
	  REFERENCES_SPECIFICATION

REFERENCING_COLUMNS ::=
	REFERENCE_COLUMN_LIST

MODULE_CONTENTS ::=
	  DECLARE_CURSOR
	| DYNAMIC_DECLARE_CURSOR
	| PROCEDURE

DECLARE_CURSOR ::=
	DECLARE CURSOR_NAME ( INSENSITIVE )* ( SCROLL )* CURSOR
	  FOR CURSOR_SPECIFICATION

CURSOR_NAME ::= IDENTIFIER

CURSOR_SPECIFICATION ::=
	QUERY_EXPRESSION ( ORDER_BY_CLAUSE )*
	  ( UPDATABILITY_CLAUSE )*

ORDER_BY_CLAUSE ::=
	ORDER BY SORT_SPECIFICATION_LIST

SORT_SPECIFICATION_LIST ::=
	SORT_SPECIFICATION ( { COMMA SORT_SPECIFICATION }... )*

SORT_SPECIFICATION ::=
	SORT_KEY ( COLLATE_CLAUSE )* ( ORDERING_SPECIFICATION )*

SORT_KEY ::=
	  COLUMN_NAME
	| UNSIGNED_INTEGER

ORDERING_SPECIFICATION ::= ASC | DESC

UPDATABILITY_CLAUSE ::=
	FOR
		{ READ ONLY |
		  UPDATE ( OF COLUMN_NAME_LIST )* }

DYNAMIC_DECLARE_CURSOR ::=
	DECLARE CURSOR_NAME ( INSENSITIVE )* ( SCROLL )* CURSOR
		FOR STATEMENT_NAME

STATEMENT_NAME ::= IDENTIFIER

PROCEDURE ::=
	PROCEDURE PROCEDURE_NAME
		PARAMETER_DECLARATION_LIST SEMICOLON
	  SQL_PROCEDURE_STATEMENT SEMICOLON

PROCEDURE_NAME ::= IDENTIFIER

PARAMETER_DECLARATION_LIST ::=
	  LEFT_PAREN PARAMETER_DECLARATION
		  ( { COMMA PARAMETER_DECLARATION }... )* RIGHT_PAREN
	| PARAMETER_DECLARATION...

PARAMETER_DECLARATION ::=
	  PARAMETER_NAME DATA_TYPE
	| STATUS_PARAMETER

STATUS_PARAMETER ::=
	SQLCODE | SQLSTATE
*/

SQL_PROCEDURE_STATEMENT
/*
	  SQL_SCHEMA_STATEMENT
*/
	: SQL_DATA_STATEMENT
/*
	| SQL_TRANSACTION_STATEMENT
	| SQL_CONNECTION_STATEMENT
	| SQL_SESSION_STATEMENT
	| SQL_DYNAMIC_STATEMENT
	| SQL_DIAGNOSTICS_STATEMENT
*/
	;

/*
SQL_SCHEMA_STATEMENT ::=
	  SQL_SCHEMA_DEFINITION_STATEMENT
	| SQL_SCHEMA_MANIPULATION_STATEMENT

SQL_SCHEMA_DEFINITION_STATEMENT ::=
	  SCHEMA_DEFINITION
	| TABLE_DEFINITION
	| VIEW_DEFINITION
	| GRANT_STATEMENT
	| DOMAIN_DEFINITION
	| CHARACTER_SET_DEFINITION
	| COLLATION_DEFINITION
	| TRANSLATION_DEFINITION
	| ASSERTION_DEFINITION

SCHEMA_DEFINITION ::=
	CREATE SCHEMA SCHEMA_NAME_CLAUSE
	  ( SCHEMA_CHARACTER_SET_SPECIFICATION )*
	  ( SCHEMA_ELEMENT... )*

SCHEMA_NAME_CLAUSE ::=
	  SCHEMA_NAME
	| AUTHORIZATION SCHEMA_AUTHORIZATION_IDENTIFIER
	| SCHEMA_NAME AUTHORIZATION
		  SCHEMA_AUTHORIZATION_IDENTIFIER

SCHEMA_AUTHORIZATION_IDENTIFIER ::=
	AUTHORIZATION_IDENTIFIER

SCHEMA_CHARACTER_SET_SPECIFICATION ::=
	DEFAULT CHARACTER
		SET CHARACTER_SET_SPECIFICATION

SCHEMA_ELEMENT ::=
	  DOMAIN_DEFINITION
	| TABLE_DEFINITION
	| VIEW_DEFINITION
	| GRANT_STATEMENT
	| ASSERTION_DEFINITION
	| CHARACTER_SET_DEFINITION
	| COLLATION_DEFINITION
	| TRANSLATION_DEFINITION

DOMAIN_DEFINITION ::=
	CREATE DOMAIN DOMAIN_NAME
		( AS )* DATA_TYPE
	  ( DEFAULT_CLAUSE )*
	  ( DOMAIN_CONSTRAINT... )*
	  ( COLLATE_CLAUSE )*

DOMAIN_CONSTRAINT ::=
	( CONSTRAINT_NAME_DEFINITION )*
	CHECK_CONSTRAINT_DEFINITION ( CONSTRAINT_ATTRIBUTES )*

TABLE_DEFINITION ::=
	CREATE ( { GLOBAL | LOCAL } TEMPORARY )* TABLE
		TABLE_NAME
	  TABLE_ELEMENT_LIST
	  ( ON COMMIT { DELETE | PRESERVE } ROWS )*

VIEW_DEFINITION ::=
	CREATE VIEW TABLE_NAME ( LEFT_PAREN VIEW_COLUMN_LIST
								  RIGHT_PAREN )*
	  AS QUERY_EXPRESSION
	  ( WITH ( LEVELS_CLAUSE )* CHECK OPTION )*

VIEW_COLUMN_LIST ::= COLUMN_NAME_LIST

LEVELS_CLAUSE ::=
	CASCADED | LOCAL

GRANT_STATEMENT ::=
   GRANT PRIVILEGES ON OBJECT_NAME
	 TO GRANTEE ( { COMMA GRANTEE }... )*
	   ( WITH GRANT OPTION )*

PRIVILEGES ::=
	  ALL PRIVILEGES
	| ACTION_LIST

ACTION_LIST ::= ACTION ( { COMMA ACTION }... )*

ACTION ::=
	  SELECT
	| DELETE
	| INSERT ( LEFT_PAREN PRIVILEGE_COLUMN_LIST RIGHT_PAREN )*
	| UPDATE ( LEFT_PAREN PRIVILEGE_COLUMN_LIST RIGHT_PAREN )*
	| REFERENCES ( LEFT_PAREN PRIVILEGE_COLUMN_LIST RIGHT_PAREN )*
	| USAGE

PRIVILEGE_COLUMN_LIST ::= COLUMN_NAME_LIST

OBJECT_NAME ::=
	  ( TABLE )* TABLE_NAME
	| DOMAIN DOMAIN_NAME
	| COLLATION COLLATION_NAME
	| CHARACTER SET CHARACTER_SET_NAME
	| TRANSLATION TRANSLATION_NAME

GRANTEE ::=
	  PUBLIC
	| AUTHORIZATION_IDENTIFIER

ASSERTION_DEFINITION ::=
	CREATE ASSERTION CONSTRAINT_NAME ASSERTION_CHECK
	  ( CONSTRAINT_ATTRIBUTES )*

ASSERTION_CHECK ::=
	CHECK
		LEFT_PAREN SEARCH_CONDITION RIGHT_PAREN

CHARACTER_SET_DEFINITION ::=
	CREATE CHARACTER SET CHARACTER_SET_NAME
		( AS )*
	  CHARACTER_SET_SOURCE
	  ( COLLATE_CLAUSE | LIMITED_COLLATION_DEFINITION )*

CHARACTER_SET_SOURCE ::=
	  GET EXISTING_CHARACTER_SET_NAME

EXISTING_CHARACTER_SET_NAME ::=
	  STANDARD_CHARACTER_REPERTOIRE_NAME
	| IMPLEMENTATION-DEFINED_CHARACTER_REPERTOIRE_NAME
	| SCHEMA_CHARACTER_SET_NAME

SCHEMA_CHARACTER_SET_NAME ::= CHARACTER_SET_NAME

LIMITED_COLLATION_DEFINITION ::=
	COLLATION FROM COLLATION_SOURCE

COLLATION_SOURCE ::=
	  COLLATING_SEQUENCE_DEFINITION
	| TRANSLATION_COLLATION

COLLATING_SEQUENCE_DEFINITION ::=
	  EXTERNAL_COLLATION
	| SCHEMA_COLLATION_NAME
	| DESC LEFT_PAREN COLLATION_NAME RIGHT_PAREN
	| DEFAULT

EXTERNAL_COLLATION ::=
	EXTERNAL LEFT_PAREN QUOTE EXTERNAL_COLLATION_NAME QUOTE RIGHT_PAREN

EXTERNAL_COLLATION_NAME ::=
	  STANDARD_COLLATION_NAME
	| IMPLEMENTATION-DEFINED_COLLATION_NAME

STANDARD_COLLATION_NAME ::= COLLATION_NAME

IMPLEMENTATION-DEFINED_COLLATION_NAME ::= COLLATION_NAME

SCHEMA_COLLATION_NAME ::= COLLATION_NAME

TRANSLATION_COLLATION ::=
	TRANSLATION TRANSLATION_NAME
		( THEN COLLATION COLLATION_NAME )*

COLLATION_DEFINITION ::=
	CREATE COLLATION COLLATION_NAME FOR
		CHARACTER_SET_SPECIFICATION
	  FROM COLLATION_SOURCE
		( PAD_ATTRIBUTE )*

PAD_ATTRIBUTE ::=
	  NO PAD
	| PAD SPACE

TRANSLATION_DEFINITION ::=
	CREATE TRANSLATION TRANSLATION_NAME
	  FOR SOURCE_CHARACTER_SET_SPECIFICATION
		TO TARGET_CHARACTER_SET_SPECIFICATION
	  FROM TRANSLATION_SOURCE

SOURCE_CHARACTER_SET_SPECIFICATION ::= CHARACTER_SET_SPECIFICATION

TARGET_CHARACTER_SET_SPECIFICATION ::= CHARACTER_SET_SPECIFICATION

TRANSLATION_SOURCE ::=
	  TRANSLATION_SPECIFICATION

TRANSLATION_SPECIFICATION ::=
	  EXTERNAL_TRANSLATION
	| IDENTITY
	| SCHEMA_TRANSLATION_NAME

EXTERNAL_TRANSLATION ::=
	EXTERNAL LEFT_PAREN QUOTE EXTERNAL_TRANSLATION_NAME QUOTE RIGHT_PAREN

EXTERNAL_TRANSLATION_NAME ::=
	  STANDARD_TRANSLATION_NAME
	| IMPLEMENTATION-DEFINED_TRANSLATION_NAME

STANDARD_TRANSLATION_NAME ::= TRANSLATION_NAME

IMPLEMENTATION-DEFINED_TRANSLATION_NAME ::= TRANSLATION_NAME

SCHEMA_TRANSLATION_NAME ::= TRANSLATION_NAME

SQL_SCHEMA_MANIPULATION_STATEMENT ::=
	  DROP_SCHEMA_STATEMENT
	| ALTER_TABLE_STATEMENT
	| DROP_TABLE_STATEMENT
	| DROP_VIEW_STATEMENT
	| REVOKE_STATEMENT
	| ALTER_DOMAIN_STATEMENT
	| DROP_DOMAIN_STATEMENT
	| DROP_CHARACTER_SET_STATEMENT
	| DROP_COLLATION_STATEMENT
	| DROP_TRANSLATION_STATEMENT
	| DROP_ASSERTION_STATEMENT

DROP_SCHEMA_STATEMENT ::=
	DROP SCHEMA SCHEMA_NAME DROP_BEHAVIOR

DROP_BEHAVIOR ::= CASCADE | RESTRICT

ALTER_TABLE_STATEMENT ::=
	ALTER TABLE TABLE_NAME ALTER_TABLE_ACTION

ALTER_TABLE_ACTION ::=
	  ADD_COLUMN_DEFINITION
	| ALTER_COLUMN_DEFINITION
	| DROP_COLUMN_DEFINITION
	| ADD_TABLE_CONSTRAINT_DEFINITION
	| DROP_TABLE_CONSTRAINT_DEFINITION

ADD_COLUMN_DEFINITION ::=
	ADD ( COLUMN )* COLUMN_DEFINITION

ALTER_COLUMN_DEFINITION ::=
	ALTER ( COLUMN )* COLUMN_NAME ALTER_COLUMN_ACTION

ALTER_COLUMN_ACTION ::=
	  SET_COLUMN_DEFAULT_CLAUSE
	| DROP_COLUMN_DEFAULT_CLAUSE

SET_COLUMN_DEFAULT_CLAUSE ::=
	SET DEFAULT_CLAUSE

DROP_COLUMN_DEFAULT_CLAUSE ::=
	DROP DEFAULT

DROP_COLUMN_DEFINITION ::=
	DROP ( COLUMN )* COLUMN_NAME DROP_BEHAVIOR

ADD_TABLE_CONSTRAINT_DEFINITION ::=
	ADD TABLE_CONSTRAINT_DEFINITION

DROP_TABLE_CONSTRAINT_DEFINITION ::=
	DROP CONSTRAINT CONSTRAINT_NAME DROP_BEHAVIOR

DROP_TABLE_STATEMENT ::=
	DROP TABLE TABLE_NAME DROP_BEHAVIOR

DROP_VIEW_STATEMENT ::=
	DROP VIEW TABLE_NAME DROP_BEHAVIOR

REVOKE_STATEMENT ::=
	REVOKE ( GRANT OPTION FOR )*
		PRIVILEGES
		ON OBJECT_NAME
	  FROM GRANTEE ( { COMMA GRANTEE }... )* DROP_BEHAVIOR

ALTER_DOMAIN_STATEMENT ::=
	ALTER DOMAIN DOMAIN_NAME ALTER_DOMAIN_ACTION

ALTER_DOMAIN_ACTION ::=
	  SET_DOMAIN_DEFAULT_CLAUSE
	| DROP_DOMAIN_DEFAULT_CLAUSE
	| ADD_DOMAIN_CONSTRAINT_DEFINITION
	| DROP_DOMAIN_CONSTRAINT_DEFINITION

SET_DOMAIN_DEFAULT_CLAUSE ::= SET DEFAULT_CLAUSE

DROP_DOMAIN_DEFAULT_CLAUSE ::= DROP DEFAULT

ADD_DOMAIN_CONSTRAINT_DEFINITION ::=
	ADD DOMAIN_CONSTRAINT

DROP_DOMAIN_CONSTRAINT_DEFINITION ::=
	DROP CONSTRAINT CONSTRAINT_NAME

DROP_DOMAIN_STATEMENT ::=
	DROP DOMAIN DOMAIN_NAME DROP_BEHAVIOR

DROP_CHARACTER_SET_STATEMENT ::=
	DROP CHARACTER SET CHARACTER_SET_NAME

DROP_COLLATION_STATEMENT ::=
	DROP COLLATION COLLATION_NAME

DROP_TRANSLATION_STATEMENT ::=
	DROP TRANSLATION TRANSLATION_NAME

DROP_ASSERTION_STATEMENT ::=
	DROP ASSERTION CONSTRAINT_NAME
*/

SQL_DATA_STATEMENT 
/*
	: OPEN_STATEMENT
	| FETCH_STATEMENT
	| CLOSE_STATEMENT
*/
	: SELECT_STATEMENT_SINGLE_ROW
/*
	| SQL_DATA_CHANGE_STATEMENT
*/
	;

/*
OPEN_STATEMENT ::=
	OPEN CURSOR_NAME

FETCH_STATEMENT ::=
	FETCH ( ( FETCH_ORIENTATION )* FROM )*
	  CURSOR_NAME INTO FETCH_TARGET_LIST

FETCH_ORIENTATION ::=
	  NEXT
	| PRIOR
	| FIRST
	| LAST
	| { ABSOLUTE | RELATIVE } SIMPLE_VALUE_SPECIFICATION

SIMPLE_VALUE_SPECIFICATION ::=
	  PARAMETER_NAME
	| EMBEDDED_VARIABLE_NAME
	| LITERAL

FETCH_TARGET_LIST ::=
	TARGET_SPECIFICATION ( { COMMA TARGET_SPECIFICATION }... )*
*/

TARGET_SPECIFICATION
	: PARAMETER_SPECIFICATION
	| VARIABLE_SPECIFICATION
	;

/*
CLOSE_STATEMENT ::=
	CLOSE CURSOR_NAME
*/

SELECT_STATEMENT_SINGLE_ROW
	: SELECT ( SET_QUANTIFIER )* SELECT_LIST INTO SELECT_TARGET_LIST TABLE_EXPRESSION
	;

SELECT_TARGET_LIST
	: TARGET_SPECIFICATION ( COMMA TARGET_SPECIFICATION )*
	;
/*
SQL_DATA_CHANGE_STATEMENT ::=
	  DELETE_STATEMENT:_POSITIONED
	| DELETE_STATEMENT:_SEARCHED
	| INSERT_STATEMENT
	| UPDATE_STATEMENT:_POSITIONED
	| UPDATE_STATEMENT:_SEARCHED

DELETE_STATEMENT:_POSITIONED ::=
	DELETE FROM TABLE_NAME
	  WHERE CURRENT OF CURSOR_NAME

DELETE_STATEMENT:_SEARCHED ::=
	DELETE FROM TABLE_NAME
	  ( WHERE SEARCH_CONDITION )*

INSERT_STATEMENT ::=
	INSERT INTO TABLE_NAME
	  INSERT_COLUMNS_AND_SOURCE

INSERT_COLUMNS_AND_SOURCE ::=
	  ( LEFT_PAREN INSERT_COLUMN_LIST RIGHT_PAREN )*
			QUERY_EXPRESSION
	| DEFAULT VALUES

INSERT_COLUMN_LIST ::= COLUMN_NAME_LIST

UPDATE_STATEMENT:_POSITIONED ::=
	UPDATE TABLE_NAME
	  SET SET_CLAUSE_LIST
		WHERE CURRENT OF CURSOR_NAME

SET_CLAUSE_LIST ::=
	SET_CLAUSE ( { COMMA SET_CLAUSE }... )*

SET_CLAUSE ::=
	OBJECT_COLUMN EQUALS_OPERATOR UPDATE_SOURCE

OBJECT_COLUMN ::= COLUMN_NAME

UPDATE_SOURCE ::=
	  VALUE_EXPRESSION
	| NULL_SPECIFICATION
	| DEFAULT

UPDATE_STATEMENT:_SEARCHED ::=
	UPDATE TABLE_NAME
	  SET SET_CLAUSE_LIST
	  ( WHERE SEARCH_CONDITION )*

SQL_TRANSACTION_STATEMENT ::=
	  SET_TRANSACTION_STATEMENT
	| SET_CONSTRAINTS_MODE_STATEMENT
	| COMMIT_STATEMENT
	| ROLLBACK_STATEMENT

SET_TRANSACTION_STATEMENT ::=
	SET TRANSACTION TRANSACTION_MODE
		( { COMMA TRANSACTION_MODE }... )*

TRANSACTION_MODE ::=
	  ISOLATION_LEVEL
	| TRANSACTION_ACCESS_MODE
	| DIAGNOSTICS_SIZE

ISOLATION_LEVEL ::=
	ISOLATION LEVEL LEVEL_OF_ISOLATION

LEVEL_OF_ISOLATION ::=
	  READ UNCOMMITTED
	| READ COMMITTED
	| REPEATABLE READ
	| SERIALIZABLE

TRANSACTION_ACCESS_MODE ::=
	  READ ONLY
	| READ WRITE

DIAGNOSTICS_SIZE ::=
	DIAGNOSTICS SIZE NUMBER_OF_CONDITIONS

NUMBER_OF_CONDITIONS ::= SIMPLE_VALUE_SPECIFICATION

SET_CONSTRAINTS_MODE_STATEMENT ::=
	SET CONSTRAINTS CONSTRAINT_NAME_LIST
		{ DEFERRED | IMMEDIATE }

CONSTRAINT_NAME_LIST ::=
	  ALL
	| CONSTRAINT_NAME ( { COMMA CONSTRAINT_NAME }... )*

COMMIT_STATEMENT ::=
	COMMIT ( WORK )*

ROLLBACK_STATEMENT ::=
	ROLLBACK ( WORK )*

SQL_CONNECTION_STATEMENT ::=
	  CONNECT_STATEMENT
	| SET_CONNECTION_STATEMENT
	| DISCONNECT_STATEMENT

CONNECT_STATEMENT ::=
	CONNECT TO CONNECTION_TARGET

CONNECTION_TARGET ::=
	  SQL-SERVER_NAME
		( AS CONNECTION_NAME )*
		  CORRESPONDENCE WITH TONY GORDON)
		( USER USER_NAME )*
	| DEFAULT

SQL-SERVER_NAME ::= SIMPLE_VALUE_SPECIFICATION

CONNECTION_NAME ::= SIMPLE_VALUE_SPECIFICATION

USER_NAME ::= SIMPLE_VALUE_SPECIFICATION

SET_CONNECTION_STATEMENT ::=
	SET CONNECTION CONNECTION_OBJECT

CONNECTION_OBJECT ::=
	  DEFAULT
	| CONNECTION_NAME

DISCONNECT_STATEMENT ::=
	DISCONNECT DISCONNECT_OBJECT

DISCONNECT_OBJECT ::=
	  CONNECTION_OBJECT
	| ALL
	| CURRENT

SQL_SESSION_STATEMENT ::=
	  SET_CATALOG_STATEMENT
	| SET_SCHEMA_STATEMENT
	| SET_NAMES_STATEMENT
	| SET_SESSION_AUTHORIZATION_IDENTIFIER_STATEMENT
	| SET_LOCAL_TIME_ZONE_STATEMENT

SET_CATALOG_STATEMENT ::=
	SET CATALOG VALUE_SPECIFICATION

VALUE_SPECIFICATION ::=
	  LITERAL
	| GENERAL_VALUE_SPECIFICATION

SET_SCHEMA_STATEMENT ::=
	SET SCHEMA VALUE_SPECIFICATION

SET_NAMES_STATEMENT ::=
	SET NAMES VALUE_SPECIFICATION

SET_SESSION_AUTHORIZATION_IDENTIFIER_STATEMENT ::=
	SET SESSION AUTHORIZATION
		VALUE_SPECIFICATION

SET_LOCAL_TIME_ZONE_STATEMENT ::=
	SET TIME ZONE
		SET_TIME_ZONE_VALUE

SET_TIME_ZONE_VALUE ::=
	  INTERVAL_VALUE_EXPRESSION
	| LOCAL

SQL_DYNAMIC_STATEMENT ::=
	  SYSTEM_DESCRIPTOR_STATEMENT
	| PREPARE_STATEMENT
	| DEALLOCATE_PREPARED_STATEMENT
	| DESCRIBE_STATEMENT
	| EXECUTE_STATEMENT
	| EXECUTE_IMMEDIATE_STATEMENT
	| SQL_DYNAMIC_DATA_STATEMENT

SYSTEM_DESCRIPTOR_STATEMENT ::=
	  ALLOCATE_DESCRIPTOR_STATEMENT
	| DEALLOCATE_DESCRIPTOR_STATEMENT
	| SET_DESCRIPTOR_STATEMENT
	| GET_DESCRIPTOR_STATEMENT

ALLOCATE_DESCRIPTOR_STATEMENT ::=
	ALLOCATE DESCRIPTOR DESCRIPTOR_NAME
	   ( WITH MAX OCCURRENCES )*

DESCRIPTOR_NAME ::=
	( SCOPE_OPTION )* SIMPLE_VALUE_SPECIFICATION

SCOPE_OPTION ::=
	  GLOBAL
	| LOCAL

OCCURRENCES ::= SIMPLE_VALUE_SPECIFICATION

DEALLOCATE_DESCRIPTOR_STATEMENT ::=
	DEALLOCATE DESCRIPTOR DESCRIPTOR_NAME

SET_DESCRIPTOR_STATEMENT ::=
	SET DESCRIPTOR DESCRIPTOR_NAME
		SET_DESCRIPTOR_INFORMATION

SET_DESCRIPTOR_INFORMATION ::=
	  SET_COUNT
	| VALUE ITEM_NUMBER
		SET_ITEM_INFORMATION ( { COMMA SET_ITEM_INFORMATION }... )*

SET_COUNT ::=
	COUNT EQUALS_OPERATOR SIMPLE_VALUE_SPECIFICATION_1

SIMPLE_VALUE_SPECIFICATION_1 ::= SIMPLE_VALUE_SPECIFICATION

ITEM_NUMBER ::= SIMPLE_VALUE_SPECIFICATION

SET_ITEM_INFORMATION ::=
	DESCRIPTOR_ITEM_NAME EQUALS_OPERATOR SIMPLE_VALUE_SPECIFICATION_2

DESCRIPTOR_ITEM_NAME ::=
	  TYPE
	| LENGTH
	| OCTET_LENGTH
	| RETURNED_LENGTH
	| RETURNED_OCTET_LENGTH
	| PRECISION
	| SCALE
	| DATETIME_INTERVAL_CODE
	| DATETIME_INTERVAL_PRECISION
	| NULLABLE
	| INDICATOR
	| DATA
	| NAME
	| UNNAMED
	| COLLATION_CATALOG
	| COLLATION_SCHEMA
	| COLLATION_NAME
	| CHARACTER_SET_CATALOG
	| CHARACTER_SET_SCHEMA
	| CHARACTER_SET_NAME

SIMPLE_VALUE_SPECIFICATION_2 ::= SIMPLE_VALUE_SPECIFICATION

ITEM_NUMBER ::= SIMPLE_VALUE_SPECIFICATION

GET_DESCRIPTOR_STATEMENT ::=
	GET DESCRIPTOR DESCRIPTOR_NAME GET_DESCRIPTOR_INFORMATION

GET_DESCRIPTOR_INFORMATION ::=
	  GET_COUNT
	| VALUE ITEM_NUMBER
		GET_ITEM_INFORMATION ( { COMMA GET_ITEM_INFORMATION }... )*

GET_COUNT ::=
	SIMPLE_TARGET_SPECIFICATION_1 EQUALS_OPERATOR
		 COUNT

SIMPLE_TARGET_SPECIFICATION_1 ::= SIMPLE_TARGET_SPECIFICATION

SIMPLE_TARGET_SPECIFICATION ::=
	  PARAMETER_NAME
	| EMBEDDED_VARIABLE_NAME

GET_ITEM_INFORMATION ::=
	SIMPLE_TARGET_SPECIFICATION_2 EQUALS_OPERATOR DESCRIPTOR_ITEM_NAME

SIMPLE_TARGET_SPECIFICATION_2 ::= SIMPLE_TARGET_SPECIFICATION

PREPARE_STATEMENT ::=
	PREPARE SQL_STATEMENT_NAME FROM SQL_STATEMENT_VARIABLE

SQL_STATEMENT_NAME ::=
	  STATEMENT_NAME
	| EXTENDED_STATEMENT_NAME

EXTENDED_STATEMENT_NAME ::=
	( SCOPE_OPTION )* SIMPLE_VALUE_SPECIFICATION

SQL_STATEMENT_VARIABLE ::= SIMPLE_VALUE_SPECIFICATION

DEALLOCATE_PREPARED_STATEMENT ::=
	DEALLOCATE PREPARE SQL_STATEMENT_NAME

DESCRIBE_STATEMENT ::=
	  DESCRIBE_INPUT_STATEMENT
	| DESCRIBE_OUTPUT_STATEMENT

DESCRIBE_INPUT_STATEMENT ::=
	DESCRIBE INPUT SQL_STATEMENT_NAME USING_DESCRIPTOR

USING_DESCRIPTOR ::=
	{ USING | INTO } SQL DESCRIPTOR DESCRIPTOR_NAME

DESCRIBE_OUTPUT_STATEMENT ::=
	DESCRIBE ( OUTPUT )* SQL_STATEMENT_NAME USING_DESCRIPTOR

EXECUTE_STATEMENT ::=
	EXECUTE SQL_STATEMENT_NAME
	  ( RESULT_USING_CLAUSE )*
	  ( PARAMETER_USING_CLAUSE )*

RESULT_USING_CLAUSE ::= USING_CLAUSE

USING_CLAUSE ::=
	  USING_ARGUMENTS
	| USING_DESCRIPTOR

USING_ARGUMENTS ::=
	{ USING | INTO } ARGUMENT ( { COMMA ARGUMENT }... )*

ARGUMENT ::= TARGET_SPECIFICATION

PARAMETER_USING_CLAUSE ::= USING_CLAUSE

EXECUTE_IMMEDIATE_STATEMENT ::=
	EXECUTE IMMEDIATE SQL_STATEMENT_VARIABLE

SQL_DYNAMIC_DATA_STATEMENT ::=
	  ALLOCATE_CURSOR_STATEMENT
	| DYNAMIC_OPEN_STATEMENT
	| DYNAMIC_FETCH_STATEMENT
	| DYNAMIC_CLOSE_STATEMENT
	| DYNAMIC_DELETE_STATEMENT:_POSITIONED
	| DYNAMIC_UPDATE_STATEMENT:_POSITIONED

ALLOCATE_CURSOR_STATEMENT ::=
	ALLOCATE EXTENDED_CURSOR_NAME ( INSENSITIVE )*
		( SCROLL )* CURSOR
	  FOR EXTENDED_STATEMENT_NAME

EXTENDED_CURSOR_NAME ::=
	( SCOPE_OPTION )* SIMPLE_VALUE_SPECIFICATION

DYNAMIC_OPEN_STATEMENT ::=
	OPEN DYNAMIC_CURSOR_NAME ( USING_CLAUSE )*

DYNAMIC_CURSOR_NAME ::=
	  CURSOR_NAME
	| EXTENDED_CURSOR_NAME

DYNAMIC_FETCH_STATEMENT ::=
	FETCH ( ( FETCH_ORIENTATION )* FROM )* DYNAMIC_CURSOR_NAME
		USING_CLAUSE

DYNAMIC_CLOSE_STATEMENT ::=
	CLOSE DYNAMIC_CURSOR_NAME

DYNAMIC_DELETE_STATEMENT:_POSITIONED ::=
	DELETE FROM TABLE_NAME
	  WHERE CURRENT OF
		  DYNAMIC_CURSOR_NAME

DYNAMIC_UPDATE_STATEMENT:_POSITIONED ::=
	UPDATE TABLE_NAME
	  SET SET_CLAUSE
		  ( { COMMA SET_CLAUSE }... )*
		WHERE CURRENT OF
			DYNAMIC_CURSOR_NAME

SQL_DIAGNOSTICS_STATEMENT ::=
	GET_DIAGNOSTICS_STATEMENT

GET_DIAGNOSTICS_STATEMENT ::=
	GET DIAGNOSTICS SQL_DIAGNOSTICS_INFORMATION

SQL_DIAGNOSTICS_INFORMATION ::=
	  STATEMENT_INFORMATION
	| CONDITION_INFORMATION

STATEMENT_INFORMATION ::=
	STATEMENT_INFORMATION_ITEM ( { COMMA STATEMENT_INFORMATION_ITEM }... )*

STATEMENT_INFORMATION_ITEM ::=
	SIMPLE_TARGET_SPECIFICATION EQUALS_OPERATOR STATEMENT_INFORMATION_ITEM_NAME

STATEMENT_INFORMATION_ITEM_NAME ::=
	  NUMBER
	| MORE
	| COMMAND_FUNCTION
	| DYNAMIC_FUNCTION
	| ROW_COUNT

CONDITION_INFORMATION ::=
	EXCEPTION CONDITION_NUMBER
	  CONDITION_INFORMATION_ITEM ( { COMMA CONDITION_INFORMATION_ITEM }... )*

CONDITION_NUMBER ::= SIMPLE_VALUE_SPECIFICATION

CONDITION_INFORMATION_ITEM ::=
	SIMPLE_TARGET_SPECIFICATION EQUALS_OPERATOR CONDITION_INFORMATION_ITEM_NAME

CONDITION_INFORMATION_ITEM_NAME ::=
	  CONDITION_NUMBER
	| RETURNED_SQLSTATE
	| CLASS_ORIGIN
	| SUBCLASS_ORIGIN
	| SERVER_NAME
	| CONNECTION_NAME
	| CONSTRAINT_CATALOG
	| CONSTRAINT_SCHEMA
	| CONSTRAINT_NAME
	| CATALOG_NAME
	| SCHEMA_NAME
	| TABLE_NAME
	| COLUMN_NAME
	| CURSOR_NAME
	| MESSAGE_TEXT
	| MESSAGE_LENGTH
	| MESSAGE_OCTET_LENGTH

EMBEDDED_SQL_HOST_PROGRAM ::=
	  EMBEDDED_SQL_ADA_PROGRAM
	| EMBEDDED_SQL_C_PROGRAM
	| EMBEDDED_SQL_COBOL_PROGRAM
	| EMBEDDED_SQL_FORTRAN_PROGRAM
	| EMBEDDED_SQL_MUMPS_PROGRAM
	| EMBEDDED_SQL_PASCAL_PROGRAM
	| EMBEDDED_SQL_PL/I_PROGRAM

EMBEDDED_SQL_ADA_PROGRAM ::= !! EMPHASIS(SEE THE SYNTAX RULES.)

EMBEDDED_SQL_C_PROGRAM ::=
	  !! EMPHASIS(SEE THE SYNTAX RULES.)

EMBEDDED_SQL_COBOL_PROGRAM ::= !! EMPHASIS(SEE THE SYNTAX RULES.)

EMBEDDED_SQL_FORTRAN_PROGRAM ::=
	!! EMPHASIS(SEE THE SYNTAX RULES.)

EMBEDDED_SQL_MUMPS_PROGRAM ::= !! EMPHASIS(SEE THE SYNTAX RULES.)

EMBEDDED_SQL_PASCAL_PROGRAM ::=
	!! EMPHASIS(SEE THE SYNTAX RULES.)

EMBEDDED_SQL_PL/I_PROGRAM ::= !! EMPHASIS(SEE THE SYNTAX RULES.)

EMBEDDED_SQL_DECLARE_SECTION ::=
	  EMBEDDED_SQL_BEGIN_DECLARE
		( EMBEDDED_CHARACTER_SET_DECLARATION )*
		( HOST_VARIABLE_DEFINITION... )*
	  EMBEDDED_SQL_END_DECLARE
	| EMBEDDED_SQL_MUMPS_DECLARE

EMBEDDED_SQL_BEGIN_DECLARE ::=
	SQL_PREFIX BEGIN DECLARE SECTION
		( SQL_TERMINATOR )*

SQL_PREFIX ::=
	  EXEC SQL
	| AMPERSANDSQL

SQL_TERMINATOR ::=
	  END-EXEC
	| SEMICOLON
	| RIGHT_PAREN

EMBEDDED_CHARACTER_SET_DECLARATION ::=
	SQL NAMES ARE CHARACTER_SET_SPECIFICATION

HOST_VARIABLE_DEFINITION ::=
	  ADA_VARIABLE_DEFINITION
	| C_VARIABLE_DEFINITION
	| COBOL_VARIABLE_DEFINITION
	| FORTRAN_VARIABLE_DEFINITION
	| MUMPS_VARIABLE_DEFINITION
	| PASCAL_VARIABLE_DEFINITION
	| PL/I_VARIABLE_DEFINITION

ADA_VARIABLE_DEFINITION ::=
	ADA_HOST_IDENTIFIER ( { COMMA ADA_HOST_IDENTIFIER }... )* :
	ADA_TYPE_SPECIFICATION ( ADA_INITIAL_VALUE )*

ADA_TYPE_SPECIFICATION ::=
	  ADA_QUALIFIED_TYPE_SPECIFICATION
	| ADA_UNQUALIFIED_TYPE_SPECIFICATION

ADA_QUALIFIED_TYPE_SPECIFICATION ::=
	  SQL_STANDARD.CHAR ( CHARACTER SET
		 ( IS )* CHARACTER_SET_SPECIFICATION )*
		  LEFT_PAREN 1 DOUBLE_PERIOD LENGTH RIGHT_PAREN
	| SQL_STANDARD.BIT
		  LEFT_PAREN 1 DOUBLE_PERIOD LENGTH RIGHT_PAREN
	| SQL_STANDARD.SMALLINT
	| SQL_STANDARD.INT
	| SQL_STANDARD.REAL
	| SQL_STANDARD.DOUBLE_PRECISION
	| SQL_STANDARD.SQLCODE_TYPE
	| SQL_STANDARD.SQLSTATE_TYPE
	| SQL_STANDARD.INDICATOR_TYPE

ADA_UNQUALIFIED_TYPE_SPECIFICATION ::=
	  CHAR
		  LEFT_PAREN 1 DOUBLE_PERIOD LENGTH RIGHT_PAREN
	| BIT
		  LEFT_PAREN 1 DOUBLE_PERIOD LENGTH RIGHT_PAREN
	| SMALLINT
	| INT
	| REAL
	| DOUBLE_PRECISION
	| SQLCODE_TYPE
	| SQLSTATE_TYPE
	| INDICATOR_TYPE

ADA_INITIAL_VALUE ::=
	ADA_ASSIGNMENT_OPERATOR CHARACTER_REPRESENTATION...

ADA_ASSIGNMENT_OPERATOR ::= COLON

C_VARIABLE_DEFINITION ::=
	  ( C_STORAGE_CLASS )*
	  ( C_CLASS_MODIFIER )*
	  C_VARIABLE_SPECIFICATION
	SEMICOLON

C_STORAGE_CLASS ::=
	  AUTO
	| EXTERN
	| STATIC

C_CLASS_MODIFIER ::= CONST | VOLATILE

C_VARIABLE_SPECIFICATION ::=
	  C_NUMERIC_VARIABLE
	| C_CHARACTER_VARIABLE
	| C_DERIVED_VARIABLE

C_NUMERIC_VARIABLE ::=
	{ LONG | SHORT | FLOAT | DOUBLE }
	  C_HOST_IDENTIFIER ( C_INITIAL_VALUE )*
			( { COMMA C_HOST_IDENTIFIER ( C_INITIAL_VALUE )* }... )*

C_INITIAL_VALUE ::=
	EQUALS_OPERATOR CHARACTER_REPRESENTATION...

C_CHARACTER_VARIABLE ::=
	CHAR ( CHARACTER SET
			 ( IS )* CHARACTER_SET_SPECIFICATION )*
	  C_HOST_IDENTIFIER
		C_ARRAY_SPECIFICATION ( C_INITIAL_VALUE )*
		( { COMMA C_HOST_IDENTIFIER
		  C_ARRAY_SPECIFICATION
				 ( C_INITIAL_VALUE )* }... )*

C_ARRAY_SPECIFICATION ::=
	LEFT_BRACKET LENGTH RIGHT_BRACKET

C_DERIVED_VARIABLE ::=
	  C_VARCHAR_VARIABLE
	| C_BIT_VARIABLE

C_VARCHAR_VARIABLE ::=
	VARCHAR ( CHARACTER SET ( IS )*
		CHARACTER_SET_SPECIFICATION )*
		C_HOST_IDENTIFIER
			C_ARRAY_SPECIFICATION ( C_INITIAL_VALUE )*
		  ( { COMMA C_HOST_IDENTIFIER
			  C_ARRAY_SPECIFICATION
					  ( C_INITIAL_VALUE )* }... )*

C_BIT_VARIABLE ::=
	BIT C_HOST_IDENTIFIER
		C_ARRAY_SPECIFICATION ( C_INITIAL_VALUE )*
	  ( { COMMA C_HOST_IDENTIFIER
		C_ARRAY_SPECIFICATION
				   ( C_INITIAL_VALUE )* }... )*

COBOL_VARIABLE_DEFINITION ::=
	{01|77} COBOL_HOST_IDENTIFIER COBOL_TYPE_SPECIFICATION
	  ( CHARACTER_REPRESENTATION... )* PERIOD

COBOL_TYPE_SPECIFICATION ::=
	  COBOL_CHARACTER_TYPE
	| COBOL_BIT_TYPE
	| COBOL_NUMERIC_TYPE
	| COBOL_INTEGER_TYPE

COBOL_CHARACTER_TYPE ::=
	( CHARACTER SET ( IS )*
		  CHARACTER_SET_SPECIFICATION )*
	{ PIC | PICTURE } ( IS )* { X ( LEFT_PAREN LENGTH RIGHT_PAREN )* }...

COBOL_BIT_TYPE ::=
	{ PIC | PICTURE } ( IS )*
		{ B ( LEFT_PAREN LENGTH RIGHT_PAREN )* }...

COBOL_NUMERIC_TYPE ::=
	{ PIC | PICTURE } ( IS )*
	  S COBOL_NINES_SPECIFICATION
	( USAGE ( IS )* )* DISPLAY SIGN LEADING SEPARATE

COBOL_NINES_SPECIFICATION ::=
	  COBOL_NINES ( V ( COBOL_NINES )* )*
	| V COBOL_NINES

COBOL_NINES ::= { 9 ( LEFT_PAREN LENGTH RIGHT_PAREN )* }...

COBOL_INTEGER_TYPE ::=
	  COBOL_COMPUTATIONAL_INTEGER
	| COBOL_BINARY_INTEGER

COBOL_COMPUTATIONAL_INTEGER ::=
	{ PIC | PICTURE } ( IS )* S
	  ( USAGE ( IS )* )* { COMP | COMPUTATIONAL }

COBOL_BINARY_INTEGER ::=
	{ PIC | PICTURE } ( IS )* S
	  ( USAGE ( IS )* )* BINARY

FORTRAN_VARIABLE_DEFINITION ::=
	FORTRAN_TYPE_SPECIFICATION
	FORTRAN_HOST_IDENTIFIER
		( { COMMA FORTRAN_HOST_IDENTIFIER }... )*

FORTRAN_TYPE_SPECIFICATION ::=
	  CHARACTER ( ASTERISK LENGTH )*
		  ( CHARACTER SET ( IS )*
				CHARACTER_SET_SPECIFICATION )*
	| BIT ( ASTERISK LENGTH )*
	| INTEGER
	| REAL
	| DOUBLE PRECISION

MUMPS_VARIABLE_DEFINITION ::=
	{ MUMPS_NUMERIC_VARIABLE | MUMPS_CHARACTER_VARIABLE }
		SEMICOLON

MUMPS_NUMERIC_VARIABLE ::=
	MUMPS_TYPE_SPECIFICATION
	  MUMPS_HOST_IDENTIFIER ( { COMMA MUMPS_HOST_IDENTIFIER }... )*

MUMPS_TYPE_SPECIFICATION ::=
	  INT
	| DEC
		  ( LEFT_PAREN PRECISION ( COMMA SCALE )* RIGHT_PAREN )*
	| REAL

MUMPS_CHARACTER_VARIABLE ::=
	VARCHAR MUMPS_HOST_IDENTIFIER MUMPS_LENGTH_SPECIFICATION
	  ( { COMMA MUMPS_HOST_IDENTIFIER MUMPS_LENGTH_SPECIFICATION }... )*

MUMPS_LENGTH_SPECIFICATION ::=
	LEFT_PAREN LENGTH RIGHT_PAREN

PASCAL_VARIABLE_DEFINITION ::=
	PASCAL_HOST_IDENTIFIER ( { COMMA PASCAL_HOST_IDENTIFIER }... )* COLON
	  PASCAL_TYPE_SPECIFICATION SEMICOLON

PASCAL_TYPE_SPECIFICATION ::=
	  PACKED ARRAY
		  LEFT_BRACKET 1 DOUBLE_PERIOD LENGTH RIGHT_BRACKET
		OF CHAR
		  ( CHARACTER SET ( IS )*
				CHARACTER_SET_SPECIFICATION )*
	| PACKED ARRAY
		  LEFT_BRACKET 1 DOUBLE_PERIOD LENGTH RIGHT_BRACKET
		OF BIT
	| INTEGER
	| REAL
	| CHAR ( CHARACTER SET
								( IS )* CHARACTER_SET_SPECIFICATION )*
	| BIT

PL/I_VARIABLE_DEFINITION ::=
	{DCL | DECLARE}
		{   PL/I_HOST_IDENTIFIER
		  | LEFT_PAREN PL/I_HOST_IDENTIFIER
				( { COMMA PL/I_HOST_IDENTIFIER }... )* RIGHT_PAREN }
	PL/I_TYPE_SPECIFICATION
	( CHARACTER_REPRESENTATION... )* SEMICOLON

PL/I_TYPE_SPECIFICATION ::=
	  { CHAR | CHARACTER } ( VARYING )*
		  LEFT_PAREN
		  ( CHARACTER SET
				( IS )* CHARACTER_SET_SPECIFICATION )*
	| BIT ( VARYING )* LEFT_PAREN
	| PL/I_TYPE_FIXED_DECIMAL LEFT_PAREN PRECISION
		  ( COMMA SCALE )* RIGHT_PAREN
	| PL/I_TYPE_FIXED_BINARY ( LEFT_PAREN PRECISION RIGHT_PAREN )*
	| PL/I_TYPE_FLOAT_BINARY LEFT_PAREN PRECISION RIGHT_PAREN

PL/I_TYPE_FIXED_DECIMAL ::=
	  { DEC | DECIMAL } FIXED
	| FIXED { DEC | DECIMAL }

PL/I_TYPE_FIXED_BINARY ::=
	  { BIN | BINARY } FIXED
	| FIXED { BIN | BINARY }

PL/I_TYPE_FLOAT_BINARY ::=
	  { BIN | BINARY } FLOAT
	| FLOAT { BIN | BINARY }

EMBEDDED_SQL_END_DECLARE ::=
	SQL_PREFIX END DECLARE SECTION
		( SQL_TERMINATOR )*

EMBEDDED_SQL_MUMPS_DECLARE ::=
	SQL_PREFIX
	  BEGIN DECLARE SECTION
		( EMBEDDED_CHARACTER_SET_DECLARATION )*
		( HOST_VARIABLE_DEFINITION... )*
	  END DECLARE SECTION
	SQL_TERMINATOR

EMBEDDED_SQL_STATEMENT ::=
	SQL_PREFIX
	  STATEMENT_OR_DECLARATION
	( SQL_TERMINATOR )*

STATEMENT_OR_DECLARATION
	  DECLARE_CURSOR
	| DYNAMIC_DECLARE_CURSOR
	| TEMPORARY_TABLE_DECLARATION
	| EMBEDDED_EXCEPTION_DECLARATION
	: SQL_PROCEDURE_STATEMENT
	;

EMBEDDED_EXCEPTION_DECLARATION ::=
	WHENEVER CONDITION CONDITION_ACTION

CONDITION ::=
	SQLERROR | NOT FOUND

CONDITION_ACTION ::=
	CONTINUE | GO_TO

GO_TO ::=
	{ GOTO | GO TO } GOTO_TARGET

GOTO_TARGET ::=
	  HOST_LABEL_IDENTIFIER
	| UNSIGNED_INTEGER
	| HOST_PL/I_LABEL_VARIABLE

HOST_LABEL_IDENTIFIER ::= !!(SEE THE SYNTAX RULES.)

HOST_PL/I_LABEL_VARIABLE ::= !!(SEE THE SYNTAX RULES.)

PREPARABLE_STATEMENT ::=
	  PREPARABLE_SQL_DATA_STATEMENT
	| PREPARABLE_SQL_SCHEMA_STATEMENT
	| PREPARABLE_SQL_TRANSACTION_STATEMENT
	| PREPARABLE_SQL_SESSION_STATEMENT
	| PREPARABLE_IMPLEMENTATION-DEFINED_STATEMENT

PREPARABLE_SQL_DATA_STATEMENT ::=
	  DELETE_STATEMENT:_SEARCHED
	| DYNAMIC_SINGLE_ROW_SELECT_STATEMENT
	| INSERT_STATEMENT
	| DYNAMIC_SELECT_STATEMENT
	| UPDATE_STATEMENT:_SEARCHED
	| PREPARABLE_DYNAMIC_DELETE_STATEMENT:_POSITIONED
	| PREPARABLE_DYNAMIC_UPDATE_STATEMENT:_POSITIONED

DYNAMIC_SINGLE_ROW_SELECT_STATEMENT ::= QUERY_SPECIFICATION

DYNAMIC_SELECT_STATEMENT ::= CURSOR_SPECIFICATION

PREPARABLE_DYNAMIC_DELETE_STATEMENT:_POSITIONED ::=
   DELETE ( FROM TABLE_NAME )*
	  WHERE CURRENT OF CURSOR_NAME

PREPARABLE_DYNAMIC_UPDATE_STATEMENT:_POSITIONED ::=
   UPDATE ( TABLE_NAME )*
	  SET SET_CLAUSE_LIST
	  WHERE CURRENT OF CURSOR_NAME

PREPARABLE_SQL_SCHEMA_STATEMENT ::=
	  SQL_SCHEMA_STATEMENT

PREPARABLE_SQL_TRANSACTION_STATEMENT ::=
	  SQL_TRANSACTION_STATEMENT

PREPARABLE_SQL_SESSION_STATEMENT ::=
	  SQL_SESSION_STATEMENT

PREPARABLE_IMPLEMENTATION-DEFINED_STATEMENT ::=
	!! EMPHASIS(SEE THE SYNTAX RULES.)

DIRECT_SQL_STATEMENT ::=
	DIRECTLY_EXECUTABLE_STATEMENT SEMICOLON

DIRECTLY_EXECUTABLE_STATEMENT ::=
	  DIRECT_SQL_DATA_STATEMENT
	| SQL_SCHEMA_STATEMENT
	| SQL_TRANSACTION_STATEMENT
	| SQL_CONNECTION_STATEMENT
	| SQL_SESSION_STATEMENT
	| DIRECT_IMPLEMENTATION-DEFINED_STATEMENT

DIRECT_SQL_DATA_STATEMENT ::=
	  DELETE_STATEMENT:_SEARCHED
	| DIRECT_SELECT_STATEMENT:_MULTIPLE_ROWS
	| INSERT_STATEMENT
	| UPDATE_STATEMENT:_SEARCHED
	| TEMPORARY_TABLE_DECLARATION

DIRECT_SELECT_STATEMENT:_MULTIPLE_ROWS ::=
	QUERY_EXPRESSION ( ORDER_BY_CLAUSE )*

DIRECT_IMPLEMENTATION-DEFINED_STATEMENT ::=
	!!(SEE THE SYNTAX RULES)

SQL_OBJECT_IDENTIFIER ::=
	SQL_PROVENANCE SQL_VARIANT

SQL_PROVENANCE ::= ARC1 ARC2 ARC3

ARC1 ::= ISO | 1 | ISO LEFT_PAREN 1 RIGHT_PAREN

ARC2 ::= STANDARD | 0 | STANDARD LEFT_PAREN 0 RIGHT_PAREN

ARC3 ::= 9075

SQL_VARIANT ::= SQL_EDITION SQL_CONFORMANCE

SQL_EDITION ::= 1987 | 1989 | 1992

1987 ::= 0 | EDITION1987 LEFT_PAREN 0 RIGHT_PAREN

1989 ::= 1989_BASE 1989_PACKAGE

1989_BASE ::= 1 | EDITION1989 LEFT_PAREN 1 RIGHT_PAREN

1989_PACKAGE ::= INTEGRITY_NO | INTEGRITY_YES

INTEGRITY_NO ::= 0 | INTEGRITYNO LEFT_PAREN 0 RIGHT_PAREN

INTEGRITY_YES ::= 1 | INTEGRITYYES LEFT_PAREN 1 RIGHT_PAREN

1992 ::= 2 | EDITION1992 LEFT_PAREN 2 RIGHT_PAREN

SQL_CONFORMANCE ::= LOW | INTERMEDIATE | HIGH

LOW ::= 0 | LOW LEFT_PAREN 0 RIGHT_PAREN

INTERMEDIATE ::= 1 | INTERMEDIATE LEFT_PAREN 1 RIGHT_PAREN

HIGH ::= 2 | HIGH LEFT_PAREN 2 RIGHT_PAREN
*/
