/** \file
 *  This C source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : GQL.g
 *     -                            On : 2011-09-29 16:22:10
 *     -                for the parser : GQLParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "GQLParser.h"
/* ----------------------------------------- */

/******************************************************************
*
* uSQL for C++
*
* GQL.g
*
* Copyright (C) Satoshi Konno 2011
*
* This is licensed under BSD-style license, see file COPYING.
*
******************************************************************/




/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pGQLParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pGQLParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pGQLParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pGQLParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */

#undef	    PARSER
#undef	    RECOGNIZER
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO
#undef		DBG

#define	    PARSER				ctx->pParser
#define	    RECOGNIZER				PARSER->rec
#define	    PSRSTATE				RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)			RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT				PARSER->tstream
#define	    STRSTREAM				INPUT
#define	    ISTREAM				INPUT->istream
#define	    INDEX()				ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()			(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				PSRSTATE->exception
#define	    MATCHT(t, fs)			RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()				RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK				PSRSTATE->following
#ifdef  SKIP_FOLLOW_SETS
#define	    FOLLOWPUSH(x)
#define	    FOLLOWPOP()
#else
#define	    FOLLOWPUSH(x)			FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()				FOLLOWSTACK->pop(FOLLOWSTACK)
#endif
#define	    PRECOVER()				RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()			RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)				INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)				INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()				ISTREAM->consume(ISTREAM)
#define	    MARK()				ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define	    SEEK(n)				ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY			PSRSTATE->errorRecovery
#define	    FAILEDFLAG				PSRSTATE->failed
#define	    HASFAILED()				(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING			PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   GQLParserTokenNames[49+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>",
        (pANTLR3_UINT8) "<UP>",
        (pANTLR3_UINT8) "A",
        (pANTLR3_UINT8) "ANCESTOR",
        (pANTLR3_UINT8) "AND",
        (pANTLR3_UINT8) "ASC",
        (pANTLR3_UINT8) "ASTERISK",
        (pANTLR3_UINT8) "B",
        (pANTLR3_UINT8) "BY",
        (pANTLR3_UINT8) "C",
        (pANTLR3_UINT8) "COMMENT",
        (pANTLR3_UINT8) "D",
        (pANTLR3_UINT8) "DESC",
        (pANTLR3_UINT8) "E",
        (pANTLR3_UINT8) "EQ",
        (pANTLR3_UINT8) "F",
        (pANTLR3_UINT8) "FROM",
        (pANTLR3_UINT8) "G",
        (pANTLR3_UINT8) "GE",
        (pANTLR3_UINT8) "GT",
        (pANTLR3_UINT8) "H",
        (pANTLR3_UINT8) "I",
        (pANTLR3_UINT8) "ID",
        (pANTLR3_UINT8) "IN",
        (pANTLR3_UINT8) "IS",
        (pANTLR3_UINT8) "J",
        (pANTLR3_UINT8) "K",
        (pANTLR3_UINT8) "L",
        (pANTLR3_UINT8) "LE",
        (pANTLR3_UINT8) "LIMIT",
        (pANTLR3_UINT8) "M",
        (pANTLR3_UINT8) "N",
        (pANTLR3_UINT8) "NOTEQ",
        (pANTLR3_UINT8) "O",
        (pANTLR3_UINT8) "OFFSET",
        (pANTLR3_UINT8) "OP_LT",
        (pANTLR3_UINT8) "ORDER",
        (pANTLR3_UINT8) "P",
        (pANTLR3_UINT8) "Q",
        (pANTLR3_UINT8) "R",
        (pANTLR3_UINT8) "S",
        (pANTLR3_UINT8) "SELECT",
        (pANTLR3_UINT8) "T",
        (pANTLR3_UINT8) "U",
        (pANTLR3_UINT8) "V",
        (pANTLR3_UINT8) "W",
        (pANTLR3_UINT8) "WHERE",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "X",
        (pANTLR3_UINT8) "Y",
        (pANTLR3_UINT8) "Z"
       };



// Forward declare the locally static matching functions we have generated.
//
static 
 void
	statement    (pGQLParser ctx, uSQL::SQLParser *sqlParser);
static 
 void
	select_statement    (pGQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
	table_name    (pGQLParser ctx, uSQL::SQLFrom *sqlFrom);
static 
 uSQL::SQLFrom *
	table_list    (pGQLParser ctx);
static 
 void
	where_section    (pGQLParser ctx);
static 
 void
	condition_list    (pGQLParser ctx);
static 
 void
	condition    (pGQLParser ctx);
static 
 void
	condition_operator    (pGQLParser ctx);
static 
 void
	sort_section    (pGQLParser ctx);
static 
 void
	sort_specification_list    (pGQLParser ctx);
static 
 void
	sort_specification    (pGQLParser ctx);
static 
 void
	ordering_specification    (pGQLParser ctx);
static 
 void
	property    (pGQLParser ctx);
static 
 void
	value    (pGQLParser ctx);
static void	GQLParserFree(pGQLParser ctx);
static void     GQLParserReset (pGQLParser ctx);

/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed.
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "GQL.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new GQLParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pGQLParser
GQLParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return GQLParserNewSSD(instream, NULL);
}

/** \brief Create a new GQLParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pGQLParser
GQLParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pGQLParser ctx;	    /* Context structure we will build and return   */

    ctx	= (pGQLParser) ANTLR3_CALLOC(1, sizeof(GQLParser));

    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in GQLParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our GQLParser interface
     */
    ctx->statement	= statement;
    ctx->select_statement	= select_statement;
    ctx->table_name	= table_name;
    ctx->table_list	= table_list;
    ctx->where_section	= where_section;
    ctx->condition_list	= condition_list;
    ctx->condition	= condition;
    ctx->condition_operator	= condition_operator;
    ctx->sort_section	= sort_section;
    ctx->sort_specification_list	= sort_specification_list;
    ctx->sort_specification	= sort_specification;
    ctx->ordering_specification	= ordering_specification;
    ctx->property	= property;
    ctx->value	= value;
    ctx->free			= GQLParserFree;
    ctx->reset			= GQLParserReset;
    ctx->getGrammarFileName	= getGrammarFileName;

    /* Install the scope pushing methods.
     */

    /* Install the token table
     */
    PSRSTATE->tokenNames   = GQLParserTokenNames;


    /* Return the newly built parser to the caller
     */
    return  ctx;
}

static void
GQLParserReset (pGQLParser ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** Free the parser resources
 */
 static void
 GQLParserFree(pGQLParser ctx)
 {
    /* Free any scope memory
     */

	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);


    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames()
{
        return GQLParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: FOLLOW_select_statement_in_statement61  */
static	ANTLR3_BITWORD FOLLOW_select_statement_in_statement61_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_select_statement_in_statement61	= { FOLLOW_select_statement_in_statement61_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SELECT_in_select_statement76  */
static	ANTLR3_BITWORD FOLLOW_SELECT_in_select_statement76_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_SELECT_in_select_statement76	= { FOLLOW_SELECT_in_select_statement76_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASTERISK_in_select_statement78  */
static	ANTLR3_BITWORD FOLLOW_ASTERISK_in_select_statement78_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_ASTERISK_in_select_statement78	= { FOLLOW_ASTERISK_in_select_statement78_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FROM_in_select_statement80  */
static	ANTLR3_BITWORD FOLLOW_FROM_in_select_statement80_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_FROM_in_select_statement80	= { FOLLOW_FROM_in_select_statement80_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_table_list_in_select_statement84  */
static	ANTLR3_BITWORD FOLLOW_table_list_in_select_statement84_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_table_list_in_select_statement84	= { FOLLOW_table_list_in_select_statement84_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_table_name104  */
static	ANTLR3_BITWORD FOLLOW_ID_in_table_name104_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_table_name104	= { FOLLOW_ID_in_table_name104_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_table_name_in_table_list129  */
static	ANTLR3_BITWORD FOLLOW_table_name_in_table_list129_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000002) };
static  ANTLR3_BITSET_LIST FOLLOW_table_name_in_table_list129	= { FOLLOW_table_name_in_table_list129_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WHERE_in_where_section144  */
static	ANTLR3_BITWORD FOLLOW_WHERE_in_where_section144_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000020) };
static  ANTLR3_BITSET_LIST FOLLOW_WHERE_in_where_section144	= { FOLLOW_WHERE_in_where_section144_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_condition_list_in_where_section146  */
static	ANTLR3_BITWORD FOLLOW_condition_list_in_where_section146_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_condition_list_in_where_section146	= { FOLLOW_condition_list_in_where_section146_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_condition_in_condition_list158  */
static	ANTLR3_BITWORD FOLLOW_condition_in_condition_list158_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000042) };
static  ANTLR3_BITSET_LIST FOLLOW_condition_in_condition_list158	= { FOLLOW_condition_in_condition_list158_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AND_in_condition_list161  */
static	ANTLR3_BITWORD FOLLOW_AND_in_condition_list161_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000020) };
static  ANTLR3_BITSET_LIST FOLLOW_AND_in_condition_list161	= { FOLLOW_AND_in_condition_list161_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_condition_in_condition_list163  */
static	ANTLR3_BITWORD FOLLOW_condition_in_condition_list163_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000042) };
static  ANTLR3_BITSET_LIST FOLLOW_condition_in_condition_list163	= { FOLLOW_condition_in_condition_list163_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_property_in_condition176  */
static	ANTLR3_BITWORD FOLLOW_property_in_condition176_bits[]	= { ANTLR3_UINT64_LIT(0x0000002440310000) };
static  ANTLR3_BITSET_LIST FOLLOW_property_in_condition176	= { FOLLOW_property_in_condition176_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_condition_operator_in_condition178  */
static	ANTLR3_BITWORD FOLLOW_condition_operator_in_condition178_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_condition_operator_in_condition178	= { FOLLOW_condition_operator_in_condition178_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_value_in_condition180  */
static	ANTLR3_BITWORD FOLLOW_value_in_condition180_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_value_in_condition180	= { FOLLOW_value_in_condition180_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_property_in_condition185  */
static	ANTLR3_BITWORD FOLLOW_property_in_condition185_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_property_in_condition185	= { FOLLOW_property_in_condition185_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IN_in_condition187  */
static	ANTLR3_BITWORD FOLLOW_IN_in_condition187_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IN_in_condition187	= { FOLLOW_IN_in_condition187_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_value_in_condition189  */
static	ANTLR3_BITWORD FOLLOW_value_in_condition189_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_value_in_condition189	= { FOLLOW_value_in_condition189_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ANCESTOR_in_condition194  */
static	ANTLR3_BITWORD FOLLOW_ANCESTOR_in_condition194_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ANCESTOR_in_condition194	= { FOLLOW_ANCESTOR_in_condition194_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IS_in_condition197  */
static	ANTLR3_BITWORD FOLLOW_IS_in_condition197_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IS_in_condition197	= { FOLLOW_IS_in_condition197_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ORDER_in_sort_section244  */
static	ANTLR3_BITWORD FOLLOW_ORDER_in_sort_section244_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_ORDER_in_sort_section244	= { FOLLOW_ORDER_in_sort_section244_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BY_in_sort_section246  */
static	ANTLR3_BITWORD FOLLOW_BY_in_sort_section246_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_BY_in_sort_section246	= { FOLLOW_BY_in_sort_section246_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_property_in_sort_section248  */
static	ANTLR3_BITWORD FOLLOW_property_in_sort_section248_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_property_in_sort_section248	= { FOLLOW_property_in_sort_section248_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sort_specification_list_in_sort_section250  */
static	ANTLR3_BITWORD FOLLOW_sort_specification_list_in_sort_section250_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_sort_specification_list_in_sort_section250	= { FOLLOW_sort_specification_list_in_sort_section250_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sort_specification_in_sort_specification_list262  */
static	ANTLR3_BITWORD FOLLOW_sort_specification_in_sort_specification_list262_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000042) };
static  ANTLR3_BITSET_LIST FOLLOW_sort_specification_in_sort_specification_list262	= { FOLLOW_sort_specification_in_sort_specification_list262_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AND_in_sort_specification_list265  */
static	ANTLR3_BITWORD FOLLOW_AND_in_sort_specification_list265_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_AND_in_sort_specification_list265	= { FOLLOW_AND_in_sort_specification_list265_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sort_specification_in_sort_specification_list267  */
static	ANTLR3_BITWORD FOLLOW_sort_specification_in_sort_specification_list267_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000042) };
static  ANTLR3_BITSET_LIST FOLLOW_sort_specification_in_sort_specification_list267	= { FOLLOW_sort_specification_in_sort_specification_list267_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_property_in_sort_specification281  */
static	ANTLR3_BITWORD FOLLOW_property_in_sort_specification281_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000004080) };
static  ANTLR3_BITSET_LIST FOLLOW_property_in_sort_specification281	= { FOLLOW_property_in_sort_specification281_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ordering_specification_in_sort_specification283  */
static	ANTLR3_BITWORD FOLLOW_ordering_specification_in_sort_specification283_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ordering_specification_in_sort_specification283	= { FOLLOW_ordering_specification_in_sort_specification283_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_property310  */
static	ANTLR3_BITWORD FOLLOW_ID_in_property310_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_property310	= { FOLLOW_ID_in_property310_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_value322  */
static	ANTLR3_BITWORD FOLLOW_ID_in_value322_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_value322	= { FOLLOW_ID_in_value322_bits, 1	};


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start statement
 * GQL.g:36:1: statement[uSQL::SQLParser *sqlParser] : select_statement[stmt] ;
 */
static void
statement(pGQLParser ctx, uSQL::SQLParser *sqlParser)
{
    /* Initialize rule variables
     */


    		uSQL::SQLStatement *stmt = new uSQL::SQLStatement();
    		sqlParser->addStatement(stmt);
    	
    {
        // GQL.g:41:2: ( select_statement[stmt] )
        // GQL.g:41:4: select_statement[stmt]
        {
            FOLLOWPUSH(FOLLOW_select_statement_in_statement61);
            select_statement(ctx, stmt);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulestatementEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end statement */

/**
 * $ANTLR start select_statement
 * GQL.g:44:1: select_statement[uSQL::SQLStatement *sqlStmt] : SELECT ASTERISK FROM tl= table_list ;
 */
static void
select_statement(pGQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
    uSQL::SQLFrom * tl;
    #undef	RETURN_TYPE_tl
    #define	RETURN_TYPE_tl uSQL::SQLFrom *

    /* Initialize rule variables
     */

    {
        // GQL.g:45:2: ( SELECT ASTERISK FROM tl= table_list )
        // GQL.g:45:4: SELECT ASTERISK FROM tl= table_list
        {
             MATCHT(SELECT, &FOLLOW_SELECT_in_select_statement76);
            if  (HASEXCEPTION())
            {
                goto ruleselect_statementEx;
            }


             MATCHT(ASTERISK, &FOLLOW_ASTERISK_in_select_statement78);
            if  (HASEXCEPTION())
            {
                goto ruleselect_statementEx;
            }


             MATCHT(FROM, &FOLLOW_FROM_in_select_statement80);
            if  (HASEXCEPTION())
            {
                goto ruleselect_statementEx;
            }


            FOLLOWPUSH(FOLLOW_table_list_in_select_statement84);
            tl=table_list(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleselect_statementEx;
            }


            {

                		uSQL::SQLSelect *sqlCmd = new uSQL::SQLSelect();
                		sqlStmt->addChildNode(sqlCmd);
                		
                		sqlStmt->addChildNode(tl);
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleselect_statementEx; /* Prevent compiler warnings */
    ruleselect_statementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end select_statement */

/**
 * $ANTLR start table_name
 * GQL.g:57:1: table_name[uSQL::SQLFrom *sqlFrom] : ID ;
 */
static void
table_name(pGQLParser ctx, uSQL::SQLFrom *sqlFrom)
{
    pANTLR3_COMMON_TOKEN    ID1;

    /* Initialize rule variables
     */

    ID1       = NULL;

    {
        // GQL.g:58:2: ( ID )
        // GQL.g:58:4: ID
        {
            ID1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_table_name104);
            if  (HASEXCEPTION())
            {
                goto ruletable_nameEx;
            }


            {

                		uSQL::SQLTable *sqlTable = new uSQL::SQLTable();
                		sqlTable->setName(CG_ANTLR3_STRING_2_UTF8((ID1->getText(ID1))));
                		sqlFrom->addChildNode(sqlTable);
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruletable_nameEx; /* Prevent compiler warnings */
    ruletable_nameEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end table_name */

/**
 * $ANTLR start table_list
 * GQL.g:66:1: table_list returns [uSQL::SQLFrom *sqlFrom] : ( table_name[sqlFrom] )+ ;
 */
static uSQL::SQLFrom *
table_list(pGQLParser ctx)
{
    uSQL::SQLFrom * sqlFrom;


    /* Initialize rule variables
     */


    		sqlFrom = new uSQL::SQLFrom();
    	
    {
        // GQL.g:70:2: ( ( table_name[sqlFrom] )+ )
        // GQL.g:70:4: ( table_name[sqlFrom] )+
        {
            // GQL.g:70:4: ( table_name[sqlFrom] )+
            {
                int cnt1=0;

                for (;;)
                {
                    int alt1=2;
            	switch ( LA(1) )
            	{
            	case ID:
            		{
            			alt1=1;
            		}
            	    break;

            	}

            	switch (alt1)
            	{
            	    case 1:
            	        // GQL.g:70:5: table_name[sqlFrom]
            	        {
            	            FOLLOWPUSH(FOLLOW_table_name_in_table_list129);
            	            table_name(ctx, sqlFrom);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruletable_listEx;
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt1 >= 1 )
            		{
            		    goto loop1;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto ruletable_listEx;
            	}
            	cnt1++;
                }
                loop1: ;	/* Jump to here if this rule does not match */
            }

        }

    }

    // This is where rules clean up and exit
    //
    goto ruletable_listEx; /* Prevent compiler warnings */
    ruletable_listEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlFrom;
}
/* $ANTLR end table_list */

/**
 * $ANTLR start where_section
 * GQL.g:73:1: where_section : WHERE condition_list ;
 */
static void
where_section(pGQLParser ctx)
{
    /* Initialize rule variables
     */

    {
        // GQL.g:74:2: ( WHERE condition_list )
        // GQL.g:74:4: WHERE condition_list
        {
             MATCHT(WHERE, &FOLLOW_WHERE_in_where_section144);
            if  (HASEXCEPTION())
            {
                goto rulewhere_sectionEx;
            }


            FOLLOWPUSH(FOLLOW_condition_list_in_where_section146);
            condition_list(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhere_sectionEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulewhere_sectionEx; /* Prevent compiler warnings */
    rulewhere_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end where_section */

/**
 * $ANTLR start condition_list
 * GQL.g:77:1: condition_list : condition ( AND condition )* ;
 */
static void
condition_list(pGQLParser ctx)
{
    /* Initialize rule variables
     */

    {
        // GQL.g:78:2: ( condition ( AND condition )* )
        // GQL.g:78:4: condition ( AND condition )*
        {
            FOLLOWPUSH(FOLLOW_condition_in_condition_list158);
            condition(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecondition_listEx;
            }


            // GQL.g:78:14: ( AND condition )*

            for (;;)
            {
                int alt2=2;
                switch ( LA(1) )
                {
                case AND:
                	{
                		alt2=1;
                	}
                    break;

                }

                switch (alt2)
                {
            	case 1:
            	    // GQL.g:78:15: AND condition
            	    {
            	         MATCHT(AND, &FOLLOW_AND_in_condition_list161);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecondition_listEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_condition_in_condition_list163);
            	        condition(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecondition_listEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop2;	/* break out of the loop */
            	    break;
                }
            }
            loop2: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulecondition_listEx; /* Prevent compiler warnings */
    rulecondition_listEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end condition_list */

/**
 * $ANTLR start condition
 * GQL.g:81:1: condition : ( property condition_operator value | property IN value | ANCESTOR IS );
 */
static void
condition(pGQLParser ctx)
{
    /* Initialize rule variables
     */

    {
        {
            //  GQL.g:82:2: ( property condition_operator value | property IN value | ANCESTOR IS )

            ANTLR3_UINT32 alt3;

            alt3=3;

            switch ( LA(1) )
            {
            case ID:
            	{
            		switch ( LA(2) )
            		{
            		case EQ:
            		case GE:
            		case GT:
            		case LE:
            		case NOTEQ:
            		case OP_LT:
            			{
            				alt3=1;
            			}
            		    break;
            		case IN:
            			{
            				alt3=2;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 3;
            		    EXCEPTION->state        = 1;


            		    goto ruleconditionEx;

            		}

            	}
                break;
            case ANCESTOR:
            	{
            		alt3=3;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 3;
                EXCEPTION->state        = 0;


                goto ruleconditionEx;

            }

            switch (alt3)
            {
        	case 1:
        	    // GQL.g:82:4: property condition_operator value
        	    {
        	        FOLLOWPUSH(FOLLOW_property_in_condition176);
        	        property(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_condition_operator_in_condition178);
        	        condition_operator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_value_in_condition180);
        	        value(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // GQL.g:83:4: property IN value
        	    {
        	        FOLLOWPUSH(FOLLOW_property_in_condition185);
        	        property(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionEx;
        	        }


        	         MATCHT(IN, &FOLLOW_IN_in_condition187);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_value_in_condition189);
        	        value(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionEx;
        	        }


        	    }
        	    break;
        	case 3:
        	    // GQL.g:84:4: ANCESTOR IS
        	    {
        	         MATCHT(ANCESTOR, &FOLLOW_ANCESTOR_in_condition194);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionEx;
        	        }


        	         MATCHT(IS, &FOLLOW_IS_in_condition197);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleconditionEx; /* Prevent compiler warnings */
    ruleconditionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end condition */

/**
 * $ANTLR start condition_operator
 * GQL.g:87:1: condition_operator : ( EQ | OP_LT | LE | GT | GE | NOTEQ );
 */
static void
condition_operator(pGQLParser ctx)
{
    /* Initialize rule variables
     */

    {
        // GQL.g:88:2: ( EQ | OP_LT | LE | GT | GE | NOTEQ )
        // GQL.g:
        {
            if ( LA(1) == EQ || ((LA(1) >= GE) && (LA(1) <= GT)) || LA(1) == LE || LA(1) == NOTEQ || LA(1) == OP_LT )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto rulecondition_operatorEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulecondition_operatorEx; /* Prevent compiler warnings */
    rulecondition_operatorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end condition_operator */

/**
 * $ANTLR start sort_section
 * GQL.g:96:1: sort_section : ORDER BY property sort_specification_list ;
 */
static void
sort_section(pGQLParser ctx)
{
    /* Initialize rule variables
     */

    {
        // GQL.g:97:2: ( ORDER BY property sort_specification_list )
        // GQL.g:97:4: ORDER BY property sort_specification_list
        {
             MATCHT(ORDER, &FOLLOW_ORDER_in_sort_section244);
            if  (HASEXCEPTION())
            {
                goto rulesort_sectionEx;
            }


             MATCHT(BY, &FOLLOW_BY_in_sort_section246);
            if  (HASEXCEPTION())
            {
                goto rulesort_sectionEx;
            }


            FOLLOWPUSH(FOLLOW_property_in_sort_section248);
            property(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesort_sectionEx;
            }


            FOLLOWPUSH(FOLLOW_sort_specification_list_in_sort_section250);
            sort_specification_list(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesort_sectionEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulesort_sectionEx; /* Prevent compiler warnings */
    rulesort_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end sort_section */

/**
 * $ANTLR start sort_specification_list
 * GQL.g:100:1: sort_specification_list : sort_specification ( AND sort_specification )* ;
 */
static void
sort_specification_list(pGQLParser ctx)
{
    /* Initialize rule variables
     */

    {
        // GQL.g:101:2: ( sort_specification ( AND sort_specification )* )
        // GQL.g:101:4: sort_specification ( AND sort_specification )*
        {
            FOLLOWPUSH(FOLLOW_sort_specification_in_sort_specification_list262);
            sort_specification(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesort_specification_listEx;
            }


            // GQL.g:101:23: ( AND sort_specification )*

            for (;;)
            {
                int alt4=2;
                switch ( LA(1) )
                {
                case AND:
                	{
                		alt4=1;
                	}
                    break;

                }

                switch (alt4)
                {
            	case 1:
            	    // GQL.g:101:24: AND sort_specification
            	    {
            	         MATCHT(AND, &FOLLOW_AND_in_sort_specification_list265);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesort_specification_listEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_sort_specification_in_sort_specification_list267);
            	        sort_specification(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesort_specification_listEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop4;	/* break out of the loop */
            	    break;
                }
            }
            loop4: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulesort_specification_listEx; /* Prevent compiler warnings */
    rulesort_specification_listEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end sort_specification_list */

/**
 * $ANTLR start sort_specification
 * GQL.g:104:1: sort_specification : property ordering_specification ;
 */
static void
sort_specification(pGQLParser ctx)
{
    /* Initialize rule variables
     */

    {
        // GQL.g:105:2: ( property ordering_specification )
        // GQL.g:105:4: property ordering_specification
        {
            FOLLOWPUSH(FOLLOW_property_in_sort_specification281);
            property(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesort_specificationEx;
            }


            FOLLOWPUSH(FOLLOW_ordering_specification_in_sort_specification283);
            ordering_specification(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesort_specificationEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulesort_specificationEx; /* Prevent compiler warnings */
    rulesort_specificationEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end sort_specification */

/**
 * $ANTLR start ordering_specification
 * GQL.g:108:1: ordering_specification : ( ASC | DESC );
 */
static void
ordering_specification(pGQLParser ctx)
{
    /* Initialize rule variables
     */

    {
        // GQL.g:109:2: ( ASC | DESC )
        // GQL.g:
        {
            if ( LA(1) == ASC || LA(1) == DESC )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto ruleordering_specificationEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleordering_specificationEx; /* Prevent compiler warnings */
    ruleordering_specificationEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end ordering_specification */

/**
 * $ANTLR start property
 * GQL.g:113:1: property : ID ;
 */
static void
property(pGQLParser ctx)
{
    /* Initialize rule variables
     */

    {
        // GQL.g:114:2: ( ID )
        // GQL.g:114:4: ID
        {
             MATCHT(ID, &FOLLOW_ID_in_property310);
            if  (HASEXCEPTION())
            {
                goto rulepropertyEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulepropertyEx; /* Prevent compiler warnings */
    rulepropertyEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end property */

/**
 * $ANTLR start value
 * GQL.g:117:1: value : ID ;
 */
static void
value(pGQLParser ctx)
{
    /* Initialize rule variables
     */

    {
        // GQL.g:118:2: ( ID )
        // GQL.g:118:4: ID
        {
             MATCHT(ID, &FOLLOW_ID_in_value322);
            if  (HASEXCEPTION())
            {
                goto rulevalueEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulevalueEx; /* Prevent compiler warnings */
    rulevalueEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end value */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */






/* End of code
 * =============================================================================
 */
