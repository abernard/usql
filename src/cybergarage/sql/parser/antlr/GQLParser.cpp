/** \file
 *  This C source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : GQL.g
 *     -                            On : 2011-11-23 04:02:06
 *     -                for the parser : GQLParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "GQLParser.h"
/* ----------------------------------------- */

/******************************************************************
*
* uSQL for C++
*
* GQL.g
*
* Copyright (C) Satoshi Konno 2011
*
* This is licensed under BSD-style license, see file COPYING.
*
******************************************************************/




/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pGQLParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pGQLParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pGQLParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pGQLParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */

#undef	    PARSER
#undef	    RECOGNIZER
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO
#undef		DBG

#define	    PARSER				ctx->pParser
#define	    RECOGNIZER				PARSER->rec
#define	    PSRSTATE				RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)			RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT				PARSER->tstream
#define	    STRSTREAM				INPUT
#define	    ISTREAM				INPUT->istream
#define	    INDEX()				ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()			(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				PSRSTATE->exception
#define	    MATCHT(t, fs)			RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()				RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK				PSRSTATE->following
#ifdef  SKIP_FOLLOW_SETS
#define	    FOLLOWPUSH(x)
#define	    FOLLOWPOP()
#else
#define	    FOLLOWPUSH(x)			FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()				FOLLOWSTACK->pop(FOLLOWSTACK)
#endif
#define	    PRECOVER()				RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()			RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)				INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)				INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()				ISTREAM->consume(ISTREAM)
#define	    MARK()				ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define	    SEEK(n)				ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY			PSRSTATE->errorRecovery
#define	    FAILEDFLAG				PSRSTATE->failed
#define	    HASFAILED()				(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING			PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   GQLParserTokenNames[52+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>",
        (pANTLR3_UINT8) "<UP>",
        (pANTLR3_UINT8) "A",
        (pANTLR3_UINT8) "ANCESTOR",
        (pANTLR3_UINT8) "AND",
        (pANTLR3_UINT8) "ASC",
        (pANTLR3_UINT8) "ASTERISK",
        (pANTLR3_UINT8) "B",
        (pANTLR3_UINT8) "BY",
        (pANTLR3_UINT8) "C",
        (pANTLR3_UINT8) "COMMA",
        (pANTLR3_UINT8) "COMMENT",
        (pANTLR3_UINT8) "D",
        (pANTLR3_UINT8) "DESC",
        (pANTLR3_UINT8) "DIGIT",
        (pANTLR3_UINT8) "E",
        (pANTLR3_UINT8) "EQ",
        (pANTLR3_UINT8) "F",
        (pANTLR3_UINT8) "FROM",
        (pANTLR3_UINT8) "G",
        (pANTLR3_UINT8) "GE",
        (pANTLR3_UINT8) "GT",
        (pANTLR3_UINT8) "H",
        (pANTLR3_UINT8) "I",
        (pANTLR3_UINT8) "ID",
        (pANTLR3_UINT8) "IN",
        (pANTLR3_UINT8) "IS",
        (pANTLR3_UINT8) "J",
        (pANTLR3_UINT8) "K",
        (pANTLR3_UINT8) "L",
        (pANTLR3_UINT8) "LE",
        (pANTLR3_UINT8) "LIMIT",
        (pANTLR3_UINT8) "M",
        (pANTLR3_UINT8) "N",
        (pANTLR3_UINT8) "NOTEQ",
        (pANTLR3_UINT8) "NUMBER",
        (pANTLR3_UINT8) "O",
        (pANTLR3_UINT8) "OFFSET",
        (pANTLR3_UINT8) "OP_LT",
        (pANTLR3_UINT8) "ORDER",
        (pANTLR3_UINT8) "P",
        (pANTLR3_UINT8) "Q",
        (pANTLR3_UINT8) "R",
        (pANTLR3_UINT8) "S",
        (pANTLR3_UINT8) "SELECT",
        (pANTLR3_UINT8) "T",
        (pANTLR3_UINT8) "U",
        (pANTLR3_UINT8) "V",
        (pANTLR3_UINT8) "W",
        (pANTLR3_UINT8) "WHERE",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "X",
        (pANTLR3_UINT8) "Y",
        (pANTLR3_UINT8) "Z"
       };



// Forward declare the locally static matching functions we have generated.
//
static 
 void
	statement    (pGQLParser ctx, uSQL::SQLParser *sqlParser);
static 
 void
	select_statement    (pGQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
	table_name    (pGQLParser ctx, uSQL::SQLFrom *sqlFrom);
static 
 uSQL::SQLFrom *
	table_list    (pGQLParser ctx);
static 
 uSQL::SQLWhere *
	where_section    (pGQLParser ctx);
static 
 void
	condition_list    (pGQLParser ctx, uSQL::SQLWhere *sqlWhere);
static 
 void
	condition    (pGQLParser ctx, uSQL::SQLWhere *sqlWhere);
static 
 GQLParser_condition_operator_return
	condition_operator    (pGQLParser ctx);
static 
 uSQL::SQLOrders *
	sort_section    (pGQLParser ctx);
static 
 void
	sort_specification_list    (pGQLParser ctx, uSQL::SQLOrders *sqlOrders);
static 
 void
	sort_specification    (pGQLParser ctx, uSQL::SQLOrders *sqlOrders);
static 
 GQLParser_ordering_specification_return
	ordering_specification    (pGQLParser ctx);
static 
 uSQL::SQLLimit *
	limit_section    (pGQLParser ctx);
static 
 void
	limit_offset    (pGQLParser ctx, uSQL::SQLLimit *sqlLimit);
static 
 uSQL::SQLOffset *
	offset_section    (pGQLParser ctx);
static 
 GQLParser_property_return
	property    (pGQLParser ctx);
static 
 GQLParser_value_return
	value    (pGQLParser ctx);
static void	GQLParserFree(pGQLParser ctx);
static void     GQLParserReset (pGQLParser ctx);

/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed.
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "GQL.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new GQLParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pGQLParser
GQLParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return GQLParserNewSSD(instream, NULL);
}

/** \brief Create a new GQLParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pGQLParser
GQLParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pGQLParser ctx;	    /* Context structure we will build and return   */

    ctx	= (pGQLParser) ANTLR3_CALLOC(1, sizeof(GQLParser));

    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in GQLParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our GQLParser interface
     */
    ctx->statement	= statement;
    ctx->select_statement	= select_statement;
    ctx->table_name	= table_name;
    ctx->table_list	= table_list;
    ctx->where_section	= where_section;
    ctx->condition_list	= condition_list;
    ctx->condition	= condition;
    ctx->condition_operator	= condition_operator;
    ctx->sort_section	= sort_section;
    ctx->sort_specification_list	= sort_specification_list;
    ctx->sort_specification	= sort_specification;
    ctx->ordering_specification	= ordering_specification;
    ctx->limit_section	= limit_section;
    ctx->limit_offset	= limit_offset;
    ctx->offset_section	= offset_section;
    ctx->property	= property;
    ctx->value	= value;
    ctx->free			= GQLParserFree;
    ctx->reset			= GQLParserReset;
    ctx->getGrammarFileName	= getGrammarFileName;

    /* Install the scope pushing methods.
     */

    /* Install the token table
     */
    PSRSTATE->tokenNames   = GQLParserTokenNames;


    /* Return the newly built parser to the caller
     */
    return  ctx;
}

static void
GQLParserReset (pGQLParser ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** Free the parser resources
 */
 static void
 GQLParserFree(pGQLParser ctx)
 {
    /* Free any scope memory
     */

	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);


    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames()
{
        return GQLParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: FOLLOW_select_statement_in_statement61  */
static	ANTLR3_BITWORD FOLLOW_select_statement_in_statement61_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_select_statement_in_statement61	= { FOLLOW_select_statement_in_statement61_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SELECT_in_select_statement82  */
static	ANTLR3_BITWORD FOLLOW_SELECT_in_select_statement82_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_SELECT_in_select_statement82	= { FOLLOW_SELECT_in_select_statement82_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASTERISK_in_select_statement84  */
static	ANTLR3_BITWORD FOLLOW_ASTERISK_in_select_statement84_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_ASTERISK_in_select_statement84	= { FOLLOW_ASTERISK_in_select_statement84_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FROM_in_select_statement86  */
static	ANTLR3_BITWORD FOLLOW_FROM_in_select_statement86_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_FROM_in_select_statement86	= { FOLLOW_FROM_in_select_statement86_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_table_list_in_select_statement90  */
static	ANTLR3_BITWORD FOLLOW_table_list_in_select_statement90_bits[]	= { ANTLR3_UINT64_LIT(0x0008028200000002) };
static  ANTLR3_BITSET_LIST FOLLOW_table_list_in_select_statement90	= { FOLLOW_table_list_in_select_statement90_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_where_section_in_select_statement95  */
static	ANTLR3_BITWORD FOLLOW_where_section_in_select_statement95_bits[]	= { ANTLR3_UINT64_LIT(0x0000028200000002) };
static  ANTLR3_BITSET_LIST FOLLOW_where_section_in_select_statement95	= { FOLLOW_where_section_in_select_statement95_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sort_section_in_select_statement102  */
static	ANTLR3_BITWORD FOLLOW_sort_section_in_select_statement102_bits[]	= { ANTLR3_UINT64_LIT(0x0000008200000002) };
static  ANTLR3_BITSET_LIST FOLLOW_sort_section_in_select_statement102	= { FOLLOW_sort_section_in_select_statement102_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_limit_section_in_select_statement109  */
static	ANTLR3_BITWORD FOLLOW_limit_section_in_select_statement109_bits[]	= { ANTLR3_UINT64_LIT(0x0000008000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_limit_section_in_select_statement109	= { FOLLOW_limit_section_in_select_statement109_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_offset_section_in_select_statement116  */
static	ANTLR3_BITWORD FOLLOW_offset_section_in_select_statement116_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_offset_section_in_select_statement116	= { FOLLOW_offset_section_in_select_statement116_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_table_name135  */
static	ANTLR3_BITWORD FOLLOW_ID_in_table_name135_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_table_name135	= { FOLLOW_ID_in_table_name135_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_table_name_in_table_list159  */
static	ANTLR3_BITWORD FOLLOW_table_name_in_table_list159_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001002) };
static  ANTLR3_BITSET_LIST FOLLOW_table_name_in_table_list159	= { FOLLOW_table_name_in_table_list159_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_table_list164  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_table_list164_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_table_list164	= { FOLLOW_COMMA_in_table_list164_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_table_name_in_table_list166  */
static	ANTLR3_BITWORD FOLLOW_table_name_in_table_list166_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000001002) };
static  ANTLR3_BITSET_LIST FOLLOW_table_name_in_table_list166	= { FOLLOW_table_name_in_table_list166_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WHERE_in_where_section190  */
static	ANTLR3_BITWORD FOLLOW_WHERE_in_where_section190_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000020) };
static  ANTLR3_BITSET_LIST FOLLOW_WHERE_in_where_section190	= { FOLLOW_WHERE_in_where_section190_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_condition_list_in_where_section192  */
static	ANTLR3_BITWORD FOLLOW_condition_list_in_where_section192_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_condition_list_in_where_section192	= { FOLLOW_condition_list_in_where_section192_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_condition_in_condition_list207  */
static	ANTLR3_BITWORD FOLLOW_condition_in_condition_list207_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000042) };
static  ANTLR3_BITSET_LIST FOLLOW_condition_in_condition_list207	= { FOLLOW_condition_in_condition_list207_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AND_in_condition_list211  */
static	ANTLR3_BITWORD FOLLOW_AND_in_condition_list211_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000020) };
static  ANTLR3_BITSET_LIST FOLLOW_AND_in_condition_list211	= { FOLLOW_AND_in_condition_list211_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_condition_in_condition_list213  */
static	ANTLR3_BITWORD FOLLOW_condition_in_condition_list213_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000042) };
static  ANTLR3_BITSET_LIST FOLLOW_condition_in_condition_list213	= { FOLLOW_condition_in_condition_list213_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_property_in_condition229  */
static	ANTLR3_BITWORD FOLLOW_property_in_condition229_bits[]	= { ANTLR3_UINT64_LIT(0x0000011100C40000) };
static  ANTLR3_BITSET_LIST FOLLOW_property_in_condition229	= { FOLLOW_property_in_condition229_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_condition_operator_in_condition231  */
static	ANTLR3_BITWORD FOLLOW_condition_operator_in_condition231_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_condition_operator_in_condition231	= { FOLLOW_condition_operator_in_condition231_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_value_in_condition233  */
static	ANTLR3_BITWORD FOLLOW_value_in_condition233_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_value_in_condition233	= { FOLLOW_value_in_condition233_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_property_in_condition240  */
static	ANTLR3_BITWORD FOLLOW_property_in_condition240_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_property_in_condition240	= { FOLLOW_property_in_condition240_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IN_in_condition242  */
static	ANTLR3_BITWORD FOLLOW_IN_in_condition242_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_IN_in_condition242	= { FOLLOW_IN_in_condition242_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_value_in_condition244  */
static	ANTLR3_BITWORD FOLLOW_value_in_condition244_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_value_in_condition244	= { FOLLOW_value_in_condition244_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ANCESTOR_in_condition249  */
static	ANTLR3_BITWORD FOLLOW_ANCESTOR_in_condition249_bits[]	= { ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ANCESTOR_in_condition249	= { FOLLOW_ANCESTOR_in_condition249_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_IS_in_condition252  */
static	ANTLR3_BITWORD FOLLOW_IS_in_condition252_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_IS_in_condition252	= { FOLLOW_IS_in_condition252_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ORDER_in_sort_section309  */
static	ANTLR3_BITWORD FOLLOW_ORDER_in_sort_section309_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_ORDER_in_sort_section309	= { FOLLOW_ORDER_in_sort_section309_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BY_in_sort_section311  */
static	ANTLR3_BITWORD FOLLOW_BY_in_sort_section311_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_BY_in_sort_section311	= { FOLLOW_BY_in_sort_section311_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sort_specification_list_in_sort_section313  */
static	ANTLR3_BITWORD FOLLOW_sort_specification_list_in_sort_section313_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_sort_specification_list_in_sort_section313	= { FOLLOW_sort_specification_list_in_sort_section313_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sort_specification_in_sort_specification_list328  */
static	ANTLR3_BITWORD FOLLOW_sort_specification_in_sort_specification_list328_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000042) };
static  ANTLR3_BITSET_LIST FOLLOW_sort_specification_in_sort_specification_list328	= { FOLLOW_sort_specification_in_sort_specification_list328_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AND_in_sort_specification_list332  */
static	ANTLR3_BITWORD FOLLOW_AND_in_sort_specification_list332_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_AND_in_sort_specification_list332	= { FOLLOW_AND_in_sort_specification_list332_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sort_specification_in_sort_specification_list334  */
static	ANTLR3_BITWORD FOLLOW_sort_specification_in_sort_specification_list334_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000042) };
static  ANTLR3_BITSET_LIST FOLLOW_sort_specification_in_sort_specification_list334	= { FOLLOW_sort_specification_in_sort_specification_list334_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_property_in_sort_specification351  */
static	ANTLR3_BITWORD FOLLOW_property_in_sort_specification351_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000008080) };
static  ANTLR3_BITSET_LIST FOLLOW_property_in_sort_specification351	= { FOLLOW_property_in_sort_specification351_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ordering_specification_in_sort_specification353  */
static	ANTLR3_BITWORD FOLLOW_ordering_specification_in_sort_specification353_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ordering_specification_in_sort_specification353	= { FOLLOW_ordering_specification_in_sort_specification353_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LIMIT_in_limit_section392  */
static	ANTLR3_BITWORD FOLLOW_LIMIT_in_limit_section392_bits[]	= { ANTLR3_UINT64_LIT(0x0000002000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_LIMIT_in_limit_section392	= { FOLLOW_LIMIT_in_limit_section392_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_limit_offset_in_limit_section395  */
static	ANTLR3_BITWORD FOLLOW_limit_offset_in_limit_section395_bits[]	= { ANTLR3_UINT64_LIT(0x0000002000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_limit_offset_in_limit_section395	= { FOLLOW_limit_offset_in_limit_section395_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_limit_section400  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_limit_section400_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_limit_section400	= { FOLLOW_NUMBER_in_limit_section400_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_limit_offset415  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_limit_offset415_bits[]	= { ANTLR3_UINT64_LIT(0x0000002000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_limit_offset415	= { FOLLOW_COMMA_in_limit_offset415_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_limit_offset417  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_limit_offset417_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_limit_offset417	= { FOLLOW_NUMBER_in_limit_offset417_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OFFSET_in_offset_section440  */
static	ANTLR3_BITWORD FOLLOW_OFFSET_in_offset_section440_bits[]	= { ANTLR3_UINT64_LIT(0x0000002000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_OFFSET_in_offset_section440	= { FOLLOW_OFFSET_in_offset_section440_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_offset_section442  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_offset_section442_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_offset_section442	= { FOLLOW_NUMBER_in_offset_section442_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_property459  */
static	ANTLR3_BITWORD FOLLOW_ID_in_property459_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_property459	= { FOLLOW_ID_in_property459_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_value471  */
static	ANTLR3_BITWORD FOLLOW_ID_in_value471_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_value471	= { FOLLOW_ID_in_value471_bits, 1	};


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start statement
 * GQL.g:38:1: statement[uSQL::SQLParser *sqlParser] : select_statement[stmt] ;
 */
static void
statement(pGQLParser ctx, uSQL::SQLParser *sqlParser)
{
    /* Initialize rule variables
     */


    		uSQL::SQLStatement *stmt = new uSQL::SQLStatement();
    		sqlParser->addStatement(stmt);
    	
    {
        // GQL.g:43:2: ( select_statement[stmt] )
        // GQL.g:43:4: select_statement[stmt]
        {
            FOLLOWPUSH(FOLLOW_select_statement_in_statement61);
            select_statement(ctx, stmt);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulestatementEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end statement */

/**
 * $ANTLR start select_statement
 * GQL.g:46:1: select_statement[uSQL::SQLStatement *sqlStmt] : SELECT ASTERISK FROM tl= table_list (ws= where_section )? (ss= sort_section )? (ls= limit_section )? (os= offset_section )? ;
 */
static void
select_statement(pGQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
    uSQL::SQLFrom * tl;
    #undef	RETURN_TYPE_tl
    #define	RETURN_TYPE_tl uSQL::SQLFrom *

    uSQL::SQLWhere * ws;
    #undef	RETURN_TYPE_ws
    #define	RETURN_TYPE_ws uSQL::SQLWhere *

    uSQL::SQLOrders * ss;
    #undef	RETURN_TYPE_ss
    #define	RETURN_TYPE_ss uSQL::SQLOrders *

    uSQL::SQLLimit * ls;
    #undef	RETURN_TYPE_ls
    #define	RETURN_TYPE_ls uSQL::SQLLimit *

    uSQL::SQLOffset * os;
    #undef	RETURN_TYPE_os
    #define	RETURN_TYPE_os uSQL::SQLOffset *

    /* Initialize rule variables
     */


    		tl = NULL;
    		ws = NULL;
    		ss = NULL;
    		ls = NULL;
    		os = NULL;
    	
    {
        // GQL.g:54:2: ( SELECT ASTERISK FROM tl= table_list (ws= where_section )? (ss= sort_section )? (ls= limit_section )? (os= offset_section )? )
        // GQL.g:54:4: SELECT ASTERISK FROM tl= table_list (ws= where_section )? (ss= sort_section )? (ls= limit_section )? (os= offset_section )?
        {
             MATCHT(SELECT, &FOLLOW_SELECT_in_select_statement82);
            if  (HASEXCEPTION())
            {
                goto ruleselect_statementEx;
            }


             MATCHT(ASTERISK, &FOLLOW_ASTERISK_in_select_statement84);
            if  (HASEXCEPTION())
            {
                goto ruleselect_statementEx;
            }


             MATCHT(FROM, &FOLLOW_FROM_in_select_statement86);
            if  (HASEXCEPTION())
            {
                goto ruleselect_statementEx;
            }


            FOLLOWPUSH(FOLLOW_table_list_in_select_statement90);
            tl=table_list(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleselect_statementEx;
            }


            // GQL.g:54:39: (ws= where_section )?
            {
                int alt1=2;
                switch ( LA(1) )
                {
                    case WHERE:
                    	{
                    		alt1=1;
                    	}
                        break;
                }

                switch (alt1)
                {
            	case 1:
            	    // GQL.g:54:40: ws= where_section
            	    {
            	        FOLLOWPUSH(FOLLOW_where_section_in_select_statement95);
            	        ws=where_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_statementEx;
            	        }


            	    }
            	    break;

                }
            }

            // GQL.g:54:59: (ss= sort_section )?
            {
                int alt2=2;
                switch ( LA(1) )
                {
                    case ORDER:
                    	{
                    		alt2=1;
                    	}
                        break;
                }

                switch (alt2)
                {
            	case 1:
            	    // GQL.g:54:60: ss= sort_section
            	    {
            	        FOLLOWPUSH(FOLLOW_sort_section_in_select_statement102);
            	        ss=sort_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_statementEx;
            	        }


            	    }
            	    break;

                }
            }

            // GQL.g:54:78: (ls= limit_section )?
            {
                int alt3=2;
                switch ( LA(1) )
                {
                    case LIMIT:
                    	{
                    		alt3=1;
                    	}
                        break;
                }

                switch (alt3)
                {
            	case 1:
            	    // GQL.g:54:79: ls= limit_section
            	    {
            	        FOLLOWPUSH(FOLLOW_limit_section_in_select_statement109);
            	        ls=limit_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_statementEx;
            	        }


            	    }
            	    break;

                }
            }

            // GQL.g:54:98: (os= offset_section )?
            {
                int alt4=2;
                switch ( LA(1) )
                {
                    case OFFSET:
                    	{
                    		alt4=1;
                    	}
                        break;
                }

                switch (alt4)
                {
            	case 1:
            	    // GQL.g:54:99: os= offset_section
            	    {
            	        FOLLOWPUSH(FOLLOW_offset_section_in_select_statement116);
            	        os=offset_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_statementEx;
            	        }


            	    }
            	    break;

                }
            }

            {

                		// SELECT
                		uSQL::SQLSelect *sqlCmd = new uSQL::SQLSelect();
                		sqlStmt->addChildNode(sqlCmd);

                		// ASTERISK
                		/*
                		uSQL::SQLColumns *sqlColumns = new uSQL::SQLColumns();
                		sqlStmt->addChildNode(sqlColumns);
                		uSQL::SQLColumn *sqlColumn = new uSQL::SQLColumn();
                		sqlColumn->setName("*");
                		sqlColumns->addChildNode(sqlColumn);
                		*/
                		
                		// TABLE		
                		sqlStmt->addChildNode(tl);
                		
                		// WHERE		
                		if (ws)
                			sqlStmt->addChildNode(ws);
                			
                		// ORDER BY		
                		if (ss)
                			sqlStmt->addChildNode(ss);
                			
                		// LIMIT		
                		if (ls)
                			sqlStmt->addChildNode(ls);

                		// OFFSET		
                		if (os)
                			sqlStmt->addChildNode(os);

                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleselect_statementEx; /* Prevent compiler warnings */
    ruleselect_statementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end select_statement */

/**
 * $ANTLR start table_name
 * GQL.g:91:1: table_name[uSQL::SQLFrom *sqlFrom] : ID ;
 */
static void
table_name(pGQLParser ctx, uSQL::SQLFrom *sqlFrom)
{
    pANTLR3_COMMON_TOKEN    ID1;

    /* Initialize rule variables
     */

    ID1       = NULL;

    {
        // GQL.g:92:2: ( ID )
        // GQL.g:92:4: ID
        {
            ID1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_table_name135);
            if  (HASEXCEPTION())
            {
                goto ruletable_nameEx;
            }


            {

                		uSQL::SQLDataSource *sqlTable = new uSQL::SQLDataSource();
                		sqlTable->setName(CG_ANTLR3_STRING_2_UTF8((ID1->getText(ID1))));
                		sqlFrom->addChildNode(sqlTable);
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruletable_nameEx; /* Prevent compiler warnings */
    ruletable_nameEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end table_name */

/**
 * $ANTLR start table_list
 * GQL.g:99:1: table_list returns [uSQL::SQLFrom *sqlFrom] : ( table_name[sqlFrom] ) ( COMMA table_name[sqlFrom] )* ;
 */
static uSQL::SQLFrom *
table_list(pGQLParser ctx)
{
    uSQL::SQLFrom * sqlFrom;


    /* Initialize rule variables
     */


    		sqlFrom = new uSQL::SQLFrom();
    	
    {
        // GQL.g:103:2: ( ( table_name[sqlFrom] ) ( COMMA table_name[sqlFrom] )* )
        // GQL.g:103:4: ( table_name[sqlFrom] ) ( COMMA table_name[sqlFrom] )*
        {
            // GQL.g:103:4: ( table_name[sqlFrom] )
            // GQL.g:103:5: table_name[sqlFrom]
            {
                FOLLOWPUSH(FOLLOW_table_name_in_table_list159);
                table_name(ctx, sqlFrom);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruletable_listEx;
                }


            }


            // GQL.g:103:26: ( COMMA table_name[sqlFrom] )*

            for (;;)
            {
                int alt5=2;
                switch ( LA(1) )
                {
                case COMMA:
                	{
                		alt5=1;
                	}
                    break;

                }

                switch (alt5)
                {
            	case 1:
            	    // GQL.g:103:27: COMMA table_name[sqlFrom]
            	    {
            	         MATCHT(COMMA, &FOLLOW_COMMA_in_table_list164);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletable_listEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_table_name_in_table_list166);
            	        table_name(ctx, sqlFrom);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletable_listEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop5;	/* break out of the loop */
            	    break;
                }
            }
            loop5: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto ruletable_listEx; /* Prevent compiler warnings */
    ruletable_listEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlFrom;
}
/* $ANTLR end table_list */

/**
 * $ANTLR start where_section
 * GQL.g:106:1: where_section returns [uSQL::SQLWhere *sqlWhere] : WHERE condition_list[sqlWhere] ;
 */
static uSQL::SQLWhere *
where_section(pGQLParser ctx)
{
    uSQL::SQLWhere * sqlWhere;


    /* Initialize rule variables
     */


    		sqlWhere = new uSQL::SQLWhere();
    	
    {
        // GQL.g:110:2: ( WHERE condition_list[sqlWhere] )
        // GQL.g:110:4: WHERE condition_list[sqlWhere]
        {
             MATCHT(WHERE, &FOLLOW_WHERE_in_where_section190);
            if  (HASEXCEPTION())
            {
                goto rulewhere_sectionEx;
            }


            FOLLOWPUSH(FOLLOW_condition_list_in_where_section192);
            condition_list(ctx, sqlWhere);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhere_sectionEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulewhere_sectionEx; /* Prevent compiler warnings */
    rulewhere_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlWhere;
}
/* $ANTLR end where_section */

/**
 * $ANTLR start condition_list
 * GQL.g:113:1: condition_list[uSQL::SQLWhere *sqlWhere] : condition[sqlWhere] ( AND condition[sqlWhere] )* ;
 */
static void
condition_list(pGQLParser ctx, uSQL::SQLWhere *sqlWhere)
{
    /* Initialize rule variables
     */

    {
        // GQL.g:114:2: ( condition[sqlWhere] ( AND condition[sqlWhere] )* )
        // GQL.g:114:4: condition[sqlWhere] ( AND condition[sqlWhere] )*
        {
            FOLLOWPUSH(FOLLOW_condition_in_condition_list207);
            condition(ctx, sqlWhere);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecondition_listEx;
            }


            // GQL.g:114:24: ( AND condition[sqlWhere] )*

            for (;;)
            {
                int alt6=2;
                switch ( LA(1) )
                {
                case AND:
                	{
                		alt6=1;
                	}
                    break;

                }

                switch (alt6)
                {
            	case 1:
            	    // GQL.g:114:25: AND condition[sqlWhere]
            	    {
            	         MATCHT(AND, &FOLLOW_AND_in_condition_list211);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecondition_listEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_condition_in_condition_list213);
            	        condition(ctx, sqlWhere);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecondition_listEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop6;	/* break out of the loop */
            	    break;
                }
            }
            loop6: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulecondition_listEx; /* Prevent compiler warnings */
    rulecondition_listEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end condition_list */

/**
 * $ANTLR start condition
 * GQL.g:117:1: condition[uSQL::SQLWhere *sqlWhere] : ( property condition_operator value | property IN value | ANCESTOR IS );
 */
static void
condition(pGQLParser ctx, uSQL::SQLWhere *sqlWhere)
{
    GQLParser_property_return property2;
    #undef	RETURN_TYPE_property2
    #define	RETURN_TYPE_property2 GQLParser_property_return

    GQLParser_condition_operator_return condition_operator3;
    #undef	RETURN_TYPE_condition_operator3
    #define	RETURN_TYPE_condition_operator3 GQLParser_condition_operator_return

    GQLParser_value_return value4;
    #undef	RETURN_TYPE_value4
    #define	RETURN_TYPE_value4 GQLParser_value_return

    /* Initialize rule variables
     */

    {
        {
            //  GQL.g:118:2: ( property condition_operator value | property IN value | ANCESTOR IS )

            ANTLR3_UINT32 alt7;

            alt7=3;

            switch ( LA(1) )
            {
            case ID:
            	{
            		switch ( LA(2) )
            		{
            		case EQ:
            		case GE:
            		case GT:
            		case LE:
            		case NOTEQ:
            		case OP_LT:
            			{
            				alt7=1;
            			}
            		    break;
            		case IN:
            			{
            				alt7=2;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 7;
            		    EXCEPTION->state        = 1;


            		    goto ruleconditionEx;

            		}

            	}
                break;
            case ANCESTOR:
            	{
            		alt7=3;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 7;
                EXCEPTION->state        = 0;


                goto ruleconditionEx;

            }

            switch (alt7)
            {
        	case 1:
        	    // GQL.g:118:4: property condition_operator value
        	    {
        	        FOLLOWPUSH(FOLLOW_property_in_condition229);
        	        property2=property(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_condition_operator_in_condition231);
        	        condition_operator3=condition_operator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_value_in_condition233);
        	        value4=value(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionEx;
        	        }


        	        {

        	            		uSQL::SQLCondition *sqlCond = new uSQL::SQLCondition();
        	            		sqlCond->setName(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, property2.start, property2.stop))
        	            ));
        	            		sqlCond->setOperation(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, condition_operator3.start, condition_operator3.stop))
        	            ));
        	            		sqlCond->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, value4.start, value4.stop))
        	            ));
        	            		sqlWhere->addChildNode(sqlCond);
        	            	  
        	        }


        	    }
        	    break;
        	case 2:
        	    // GQL.g:125:4: property IN value
        	    {
        	        FOLLOWPUSH(FOLLOW_property_in_condition240);
        	        property(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionEx;
        	        }


        	         MATCHT(IN, &FOLLOW_IN_in_condition242);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_value_in_condition244);
        	        value(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionEx;
        	        }


        	    }
        	    break;
        	case 3:
        	    // GQL.g:126:4: ANCESTOR IS
        	    {
        	         MATCHT(ANCESTOR, &FOLLOW_ANCESTOR_in_condition249);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionEx;
        	        }


        	         MATCHT(IS, &FOLLOW_IS_in_condition252);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleconditionEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleconditionEx; /* Prevent compiler warnings */
    ruleconditionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end condition */

/**
 * $ANTLR start condition_operator
 * GQL.g:129:1: condition_operator : ( EQ | OP_LT | LE | GT | GE | NOTEQ );
 */
static GQLParser_condition_operator_return
condition_operator(pGQLParser ctx)
{
    GQLParser_condition_operator_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // GQL.g:130:2: ( EQ | OP_LT | LE | GT | GE | NOTEQ )
        // GQL.g:
        {
            if ( LA(1) == EQ || ((LA(1) >= GE) && (LA(1) <= GT)) || LA(1) == LE || LA(1) == NOTEQ || LA(1) == OP_LT )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto rulecondition_operatorEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulecondition_operatorEx; /* Prevent compiler warnings */
    rulecondition_operatorEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end condition_operator */

/**
 * $ANTLR start sort_section
 * GQL.g:138:1: sort_section returns [uSQL::SQLOrders *sqlOrders] : ORDER BY sort_specification_list[sqlOrders] ;
 */
static uSQL::SQLOrders *
sort_section(pGQLParser ctx)
{
    uSQL::SQLOrders * sqlOrders;


    /* Initialize rule variables
     */


    		sqlOrders = new uSQL::SQLOrders();
    	
    {
        // GQL.g:142:2: ( ORDER BY sort_specification_list[sqlOrders] )
        // GQL.g:142:4: ORDER BY sort_specification_list[sqlOrders]
        {
             MATCHT(ORDER, &FOLLOW_ORDER_in_sort_section309);
            if  (HASEXCEPTION())
            {
                goto rulesort_sectionEx;
            }


             MATCHT(BY, &FOLLOW_BY_in_sort_section311);
            if  (HASEXCEPTION())
            {
                goto rulesort_sectionEx;
            }


            FOLLOWPUSH(FOLLOW_sort_specification_list_in_sort_section313);
            sort_specification_list(ctx, sqlOrders);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesort_sectionEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulesort_sectionEx; /* Prevent compiler warnings */
    rulesort_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlOrders;
}
/* $ANTLR end sort_section */

/**
 * $ANTLR start sort_specification_list
 * GQL.g:145:1: sort_specification_list[uSQL::SQLOrders *sqlOrders] : sort_specification[sqlOrders] ( AND sort_specification[sqlOrders] )* ;
 */
static void
sort_specification_list(pGQLParser ctx, uSQL::SQLOrders *sqlOrders)
{
    /* Initialize rule variables
     */

    {
        // GQL.g:146:2: ( sort_specification[sqlOrders] ( AND sort_specification[sqlOrders] )* )
        // GQL.g:146:4: sort_specification[sqlOrders] ( AND sort_specification[sqlOrders] )*
        {
            FOLLOWPUSH(FOLLOW_sort_specification_in_sort_specification_list328);
            sort_specification(ctx, sqlOrders);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesort_specification_listEx;
            }


            // GQL.g:146:34: ( AND sort_specification[sqlOrders] )*

            for (;;)
            {
                int alt8=2;
                switch ( LA(1) )
                {
                case AND:
                	{
                		alt8=1;
                	}
                    break;

                }

                switch (alt8)
                {
            	case 1:
            	    // GQL.g:146:35: AND sort_specification[sqlOrders]
            	    {
            	         MATCHT(AND, &FOLLOW_AND_in_sort_specification_list332);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesort_specification_listEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_sort_specification_in_sort_specification_list334);
            	        sort_specification(ctx, sqlOrders);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesort_specification_listEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop8;	/* break out of the loop */
            	    break;
                }
            }
            loop8: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulesort_specification_listEx; /* Prevent compiler warnings */
    rulesort_specification_listEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end sort_specification_list */

/**
 * $ANTLR start sort_specification
 * GQL.g:149:1: sort_specification[uSQL::SQLOrders *sqlOrders] : property ordering_specification ;
 */
static void
sort_specification(pGQLParser ctx, uSQL::SQLOrders *sqlOrders)
{
    GQLParser_property_return property5;
    #undef	RETURN_TYPE_property5
    #define	RETURN_TYPE_property5 GQLParser_property_return

    GQLParser_ordering_specification_return ordering_specification6;
    #undef	RETURN_TYPE_ordering_specification6
    #define	RETURN_TYPE_ordering_specification6 GQLParser_ordering_specification_return

    /* Initialize rule variables
     */

    {
        // GQL.g:150:2: ( property ordering_specification )
        // GQL.g:150:4: property ordering_specification
        {
            FOLLOWPUSH(FOLLOW_property_in_sort_specification351);
            property5=property(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesort_specificationEx;
            }


            FOLLOWPUSH(FOLLOW_ordering_specification_in_sort_specification353);
            ordering_specification6=ordering_specification(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesort_specificationEx;
            }


            {

                		uSQL::SQLOrder *sqlOrder = new uSQL::SQLOrder();
                		sqlOrder->setName(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, property5.start, property5.stop))
                ));
                		sqlOrder->setOrder(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, ordering_specification6.start, ordering_specification6.stop))
                ));
                		sqlOrders->addChildNode(sqlOrder);
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulesort_specificationEx; /* Prevent compiler warnings */
    rulesort_specificationEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end sort_specification */

/**
 * $ANTLR start ordering_specification
 * GQL.g:158:1: ordering_specification : ( ASC | DESC );
 */
static GQLParser_ordering_specification_return
ordering_specification(pGQLParser ctx)
{
    GQLParser_ordering_specification_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // GQL.g:159:2: ( ASC | DESC )
        // GQL.g:
        {
            if ( LA(1) == ASC || LA(1) == DESC )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto ruleordering_specificationEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleordering_specificationEx; /* Prevent compiler warnings */
    ruleordering_specificationEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end ordering_specification */

/**
 * $ANTLR start limit_section
 * GQL.g:163:1: limit_section returns [uSQL::SQLLimit *sqlLimit] : LIMIT ( limit_offset[sqlLimit] )? NUMBER ;
 */
static uSQL::SQLLimit *
limit_section(pGQLParser ctx)
{
    uSQL::SQLLimit * sqlLimit;


    pANTLR3_COMMON_TOKEN    NUMBER7;

    /* Initialize rule variables
     */


    		sqlLimit = new uSQL::SQLLimit();
    	
    NUMBER7       = NULL;

    {
        // GQL.g:167:2: ( LIMIT ( limit_offset[sqlLimit] )? NUMBER )
        // GQL.g:167:4: LIMIT ( limit_offset[sqlLimit] )? NUMBER
        {
             MATCHT(LIMIT, &FOLLOW_LIMIT_in_limit_section392);
            if  (HASEXCEPTION())
            {
                goto rulelimit_sectionEx;
            }


            // GQL.g:167:10: ( limit_offset[sqlLimit] )?
            {
                int alt9=2;
                switch ( LA(1) )
                {
                    case COMMA:
                    	{
                    		alt9=1;
                    	}
                        break;
                }

                switch (alt9)
                {
            	case 1:
            	    // GQL.g:167:11: limit_offset[sqlLimit]
            	    {
            	        FOLLOWPUSH(FOLLOW_limit_offset_in_limit_section395);
            	        limit_offset(ctx, sqlLimit);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelimit_sectionEx;
            	        }


            	    }
            	    break;

                }
            }

            NUMBER7 = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_limit_section400);
            if  (HASEXCEPTION())
            {
                goto rulelimit_sectionEx;
            }


            {

                		sqlLimit->setCount(CG_ANTLR3_STRING_2_INT((NUMBER7->getText(NUMBER7))));
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulelimit_sectionEx; /* Prevent compiler warnings */
    rulelimit_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlLimit;
}
/* $ANTLR end limit_section */

/**
 * $ANTLR start limit_offset
 * GQL.g:172:1: limit_offset[uSQL::SQLLimit *sqlLimit] : COMMA NUMBER ;
 */
static void
limit_offset(pGQLParser ctx, uSQL::SQLLimit *sqlLimit)
{
    pANTLR3_COMMON_TOKEN    NUMBER8;

    /* Initialize rule variables
     */

    NUMBER8       = NULL;

    {
        // GQL.g:173:2: ( COMMA NUMBER )
        // GQL.g:173:4: COMMA NUMBER
        {
             MATCHT(COMMA, &FOLLOW_COMMA_in_limit_offset415);
            if  (HASEXCEPTION())
            {
                goto rulelimit_offsetEx;
            }


            NUMBER8 = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_limit_offset417);
            if  (HASEXCEPTION())
            {
                goto rulelimit_offsetEx;
            }


            {

                		sqlLimit->setOffset(CG_ANTLR3_STRING_2_INT((NUMBER8->getText(NUMBER8))));
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulelimit_offsetEx; /* Prevent compiler warnings */
    rulelimit_offsetEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end limit_offset */

/**
 * $ANTLR start offset_section
 * GQL.g:178:1: offset_section returns [uSQL::SQLOffset *sqlOffset] : OFFSET NUMBER ;
 */
static uSQL::SQLOffset *
offset_section(pGQLParser ctx)
{
    uSQL::SQLOffset * sqlOffset;


    pANTLR3_COMMON_TOKEN    NUMBER9;

    /* Initialize rule variables
     */


    		sqlOffset = new uSQL::SQLOffset();
    	
    NUMBER9       = NULL;

    {
        // GQL.g:182:2: ( OFFSET NUMBER )
        // GQL.g:182:4: OFFSET NUMBER
        {
             MATCHT(OFFSET, &FOLLOW_OFFSET_in_offset_section440);
            if  (HASEXCEPTION())
            {
                goto ruleoffset_sectionEx;
            }


            NUMBER9 = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_offset_section442);
            if  (HASEXCEPTION())
            {
                goto ruleoffset_sectionEx;
            }


            {

                		sqlOffset->setValue(CG_ANTLR3_STRING_2_INT((NUMBER9->getText(NUMBER9))));
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleoffset_sectionEx; /* Prevent compiler warnings */
    ruleoffset_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlOffset;
}
/* $ANTLR end offset_section */

/**
 * $ANTLR start property
 * GQL.g:192:1: property : ID ;
 */
static GQLParser_property_return
property(pGQLParser ctx)
{
    GQLParser_property_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // GQL.g:193:2: ( ID )
        // GQL.g:193:4: ID
        {
             MATCHT(ID, &FOLLOW_ID_in_property459);
            if  (HASEXCEPTION())
            {
                goto rulepropertyEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulepropertyEx; /* Prevent compiler warnings */
    rulepropertyEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end property */

/**
 * $ANTLR start value
 * GQL.g:196:1: value : ID ;
 */
static GQLParser_value_return
value(pGQLParser ctx)
{
    GQLParser_value_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // GQL.g:197:2: ( ID )
        // GQL.g:197:4: ID
        {
             MATCHT(ID, &FOLLOW_ID_in_value471);
            if  (HASEXCEPTION())
            {
                goto rulevalueEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulevalueEx; /* Prevent compiler warnings */
    rulevalueEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end value */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */






/* End of code
 * =============================================================================
 */
