/** \file
 *  This C source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : UnQL.g
 *     -                            On : 2011-11-22 19:47:59
 *     -                for the parser : UnQLParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "UnQLParser.h"
/* ----------------------------------------- */

/******************************************************************
*
* uSQL for C++
*
* UnQL.g
*
* Copyright (C) Satoshi Konno 2011
*
* This is licensed under BSD-style license, see file COPYING.
*
******************************************************************/




/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pUnQLParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pUnQLParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pUnQLParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pUnQLParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */

#undef	    PARSER
#undef	    RECOGNIZER
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO
#undef		DBG

#define	    PARSER				ctx->pParser
#define	    RECOGNIZER				PARSER->rec
#define	    PSRSTATE				RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)			RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT				PARSER->tstream
#define	    STRSTREAM				INPUT
#define	    ISTREAM				INPUT->istream
#define	    INDEX()				ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()			(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				PSRSTATE->exception
#define	    MATCHT(t, fs)			RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()				RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK				PSRSTATE->following
#ifdef  SKIP_FOLLOW_SETS
#define	    FOLLOWPUSH(x)
#define	    FOLLOWPOP()
#else
#define	    FOLLOWPUSH(x)			FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()				FOLLOWSTACK->pop(FOLLOWSTACK)
#endif
#define	    PRECOVER()				RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()			RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)				INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)				INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()				ISTREAM->consume(ISTREAM)
#define	    MARK()				ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define	    SEEK(n)				ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY			PSRSTATE->errorRecovery
#define	    FAILEDFLAG				PSRSTATE->failed
#define	    HASFAILED()				(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING			PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   UnQLParserTokenNames[85+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>",
        (pANTLR3_UINT8) "<UP>",
        (pANTLR3_UINT8) "A",
        (pANTLR3_UINT8) "ALL",
        (pANTLR3_UINT8) "ANCESTOR",
        (pANTLR3_UINT8) "AND",
        (pANTLR3_UINT8) "AS",
        (pANTLR3_UINT8) "ASC",
        (pANTLR3_UINT8) "ASTERISK",
        (pANTLR3_UINT8) "ASYNC",
        (pANTLR3_UINT8) "B",
        (pANTLR3_UINT8) "BY",
        (pANTLR3_UINT8) "C",
        (pANTLR3_UINT8) "CHAR",
        (pANTLR3_UINT8) "COLLECTION",
        (pANTLR3_UINT8) "COMMA",
        (pANTLR3_UINT8) "CREATE",
        (pANTLR3_UINT8) "D",
        (pANTLR3_UINT8) "DESC",
        (pANTLR3_UINT8) "DISTINCT",
        (pANTLR3_UINT8) "DROP",
        (pANTLR3_UINT8) "E",
        (pANTLR3_UINT8) "EACH",
        (pANTLR3_UINT8) "EQ",
        (pANTLR3_UINT8) "ESC_SEQ",
        (pANTLR3_UINT8) "EXCEPT",
        (pANTLR3_UINT8) "EXPONENT",
        (pANTLR3_UINT8) "EscapeSequence",
        (pANTLR3_UINT8) "F",
        (pANTLR3_UINT8) "FLATTEN",
        (pANTLR3_UINT8) "FLOAT",
        (pANTLR3_UINT8) "FROM",
        (pANTLR3_UINT8) "G",
        (pANTLR3_UINT8) "GE",
        (pANTLR3_UINT8) "GROUP",
        (pANTLR3_UINT8) "GT",
        (pANTLR3_UINT8) "H",
        (pANTLR3_UINT8) "HAVING",
        (pANTLR3_UINT8) "HEX_DIGIT",
        (pANTLR3_UINT8) "I",
        (pANTLR3_UINT8) "ID",
        (pANTLR3_UINT8) "IN",
        (pANTLR3_UINT8) "INSERT",
        (pANTLR3_UINT8) "INTERSECT",
        (pANTLR3_UINT8) "INTO",
        (pANTLR3_UINT8) "IS",
        (pANTLR3_UINT8) "J",
        (pANTLR3_UINT8) "K",
        (pANTLR3_UINT8) "L",
        (pANTLR3_UINT8) "LE",
        (pANTLR3_UINT8) "LIMIT",
        (pANTLR3_UINT8) "M",
        (pANTLR3_UINT8) "N",
        (pANTLR3_UINT8) "NOTEQ",
        (pANTLR3_UINT8) "NUMBER",
        (pANTLR3_UINT8) "O",
        (pANTLR3_UINT8) "OCTAL_ESC",
        (pANTLR3_UINT8) "OFFSET",
        (pANTLR3_UINT8) "OPTIONS",
        (pANTLR3_UINT8) "OP_LT",
        (pANTLR3_UINT8) "ORDER",
        (pANTLR3_UINT8) "P",
        (pANTLR3_UINT8) "Q",
        (pANTLR3_UINT8) "R",
        (pANTLR3_UINT8) "S",
        (pANTLR3_UINT8) "SELECT",
        (pANTLR3_UINT8) "STRING",
        (pANTLR3_UINT8) "SYNC",
        (pANTLR3_UINT8) "T",
        (pANTLR3_UINT8) "U",
        (pANTLR3_UINT8) "UNICODE_ESC",
        (pANTLR3_UINT8) "UNION",
        (pANTLR3_UINT8) "V",
        (pANTLR3_UINT8) "VALUE",
        (pANTLR3_UINT8) "W",
        (pANTLR3_UINT8) "WHERE",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "X",
        (pANTLR3_UINT8) "Y",
        (pANTLR3_UINT8) "Z",
        (pANTLR3_UINT8) "':'",
        (pANTLR3_UINT8) "'['",
        (pANTLR3_UINT8) "']'",
        (pANTLR3_UINT8) "'false'",
        (pANTLR3_UINT8) "'true'",
        (pANTLR3_UINT8) "'{'",
        (pANTLR3_UINT8) "'}'"
       };



// Forward declare the locally static matching functions we have generated.
//
static 
 void
	statement    (pUnQLParser ctx, uSQL::SQLParser *sqlParser);
static 
 void
	select_stmt    (pUnQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
	select_core    (pUnQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 uSQL::SQLFrom *
	from_section    (pUnQLParser ctx);
static 
 void
	table_name    (pUnQLParser ctx, uSQL::SQLFrom *sqlFrom);
static 
 uSQL::SQLDataSource *
	data_source    (pUnQLParser ctx);
static 
 uSQL::SQLWhere *
	where_section    (pUnQLParser ctx);
static 
 void
	create_collection_stmt    (pUnQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
	drop_collection_stmt    (pUnQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
	insert_stmt    (pUnQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 bool
	sync_operator    (pUnQLParser ctx);
static 
 void
	compound_operator    (pUnQLParser ctx);
static 
 void
	condition_operator    (pUnQLParser ctx);
static 
 uSQL::SQLOrders *
	sort_section    (pUnQLParser ctx);
static 
 void
	sort_specification_list    (pUnQLParser ctx, uSQL::SQLOrders *sqlOrders);
static 
 void
	sort_specification    (pUnQLParser ctx, uSQL::SQLOrders *sqlOrders);
static 
 UnQLParser_ordering_specification_return
	ordering_specification    (pUnQLParser ctx);
static 
 uSQL::SQLLimit *
	limit_section    (pUnQLParser ctx);
static 
 void
	limit_offset    (pUnQLParser ctx, uSQL::SQLLimit *sqlLimit);
static 
 uSQL::SQLOffset *
	offset_section    (pUnQLParser ctx);
static 
 void
	value    (pUnQLParser ctx);
static 
 UnQLParser_name_return
	name    (pUnQLParser ctx);
static 
 UnQLParser_collection_name_return
	collection_name    (pUnQLParser ctx);
static 
 void
	expression    (pUnQLParser ctx, uSQL::SQLExpression *parentSqlExpr);
static 
 UnQLParser_property_return
	property    (pUnQLParser ctx);
static 
 UnQLParser_integer_literal_return
	integer_literal    (pUnQLParser ctx);
static 
 UnQLParser_real_literal_return
	real_literal    (pUnQLParser ctx);
static 
 UnQLParser_string_literal_return
	string_literal    (pUnQLParser ctx);
static 
 UnQLParser_true_literal_return
	true_literal    (pUnQLParser ctx);
static 
 UnQLParser_false_literal_return
	false_literal    (pUnQLParser ctx);
static 
 void
	dictionary_literal    (pUnQLParser ctx, uSQL::SQLExpression *parentSqlExpr);
static 
 void
	array_literal    (pUnQLParser ctx, uSQL::SQLExpression *parentSqlExpr);
static void	UnQLParserFree(pUnQLParser ctx);
static void     UnQLParserReset (pUnQLParser ctx);

/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed.
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "UnQL.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new UnQLParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pUnQLParser
UnQLParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return UnQLParserNewSSD(instream, NULL);
}

/** \brief Create a new UnQLParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pUnQLParser
UnQLParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pUnQLParser ctx;	    /* Context structure we will build and return   */

    ctx	= (pUnQLParser) ANTLR3_CALLOC(1, sizeof(UnQLParser));

    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in UnQLParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our UnQLParser interface
     */
    ctx->statement	= statement;
    ctx->select_stmt	= select_stmt;
    ctx->select_core	= select_core;
    ctx->from_section	= from_section;
    ctx->table_name	= table_name;
    ctx->data_source	= data_source;
    ctx->where_section	= where_section;
    ctx->create_collection_stmt	= create_collection_stmt;
    ctx->drop_collection_stmt	= drop_collection_stmt;
    ctx->insert_stmt	= insert_stmt;
    ctx->sync_operator	= sync_operator;
    ctx->compound_operator	= compound_operator;
    ctx->condition_operator	= condition_operator;
    ctx->sort_section	= sort_section;
    ctx->sort_specification_list	= sort_specification_list;
    ctx->sort_specification	= sort_specification;
    ctx->ordering_specification	= ordering_specification;
    ctx->limit_section	= limit_section;
    ctx->limit_offset	= limit_offset;
    ctx->offset_section	= offset_section;
    ctx->value	= value;
    ctx->name	= name;
    ctx->collection_name	= collection_name;
    ctx->expression	= expression;
    ctx->property	= property;
    ctx->integer_literal	= integer_literal;
    ctx->real_literal	= real_literal;
    ctx->string_literal	= string_literal;
    ctx->true_literal	= true_literal;
    ctx->false_literal	= false_literal;
    ctx->dictionary_literal	= dictionary_literal;
    ctx->array_literal	= array_literal;
    ctx->free			= UnQLParserFree;
    ctx->reset			= UnQLParserReset;
    ctx->getGrammarFileName	= getGrammarFileName;

    /* Install the scope pushing methods.
     */

    /* Install the token table
     */
    PSRSTATE->tokenNames   = UnQLParserTokenNames;


    /* Return the newly built parser to the caller
     */
    return  ctx;
}

static void
UnQLParserReset (pUnQLParser ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** Free the parser resources
 */
 static void
 UnQLParserFree(pUnQLParser ctx)
 {
    /* Free any scope memory
     */

	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);


    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames()
{
        return UnQLParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: FOLLOW_select_stmt_in_statement61  */
static	ANTLR3_BITWORD FOLLOW_select_stmt_in_statement61_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_select_stmt_in_statement61	= { FOLLOW_select_stmt_in_statement61_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_create_collection_stmt_in_statement67  */
static	ANTLR3_BITWORD FOLLOW_create_collection_stmt_in_statement67_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_create_collection_stmt_in_statement67	= { FOLLOW_create_collection_stmt_in_statement67_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_drop_collection_stmt_in_statement73  */
static	ANTLR3_BITWORD FOLLOW_drop_collection_stmt_in_statement73_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_drop_collection_stmt_in_statement73	= { FOLLOW_drop_collection_stmt_in_statement73_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_insert_stmt_in_statement79  */
static	ANTLR3_BITWORD FOLLOW_insert_stmt_in_statement79_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_insert_stmt_in_statement79	= { FOLLOW_insert_stmt_in_statement79_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_select_core_in_select_stmt106  */
static	ANTLR3_BITWORD FOLLOW_select_core_in_select_stmt106_bits[]	= { ANTLR3_UINT64_LIT(0x4810000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_select_core_in_select_stmt106	= { FOLLOW_select_core_in_select_stmt106_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sort_section_in_select_stmt112  */
static	ANTLR3_BITWORD FOLLOW_sort_section_in_select_stmt112_bits[]	= { ANTLR3_UINT64_LIT(0x0810000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_sort_section_in_select_stmt112	= { FOLLOW_sort_section_in_select_stmt112_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_limit_section_in_select_stmt119  */
static	ANTLR3_BITWORD FOLLOW_limit_section_in_select_stmt119_bits[]	= { ANTLR3_UINT64_LIT(0x0800000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_limit_section_in_select_stmt119	= { FOLLOW_limit_section_in_select_stmt119_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_offset_section_in_select_stmt126  */
static	ANTLR3_BITWORD FOLLOW_offset_section_in_select_stmt126_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_offset_section_in_select_stmt126	= { FOLLOW_offset_section_in_select_stmt126_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SELECT_in_select_core151  */
static	ANTLR3_BITWORD FOLLOW_SELECT_in_select_core151_bits[]	= { ANTLR3_UINT64_LIT(0x0100000300200122), ANTLR3_UINT64_LIT(0x0000000000E82010) };
static  ANTLR3_BITSET_LIST FOLLOW_SELECT_in_select_core151	= { FOLLOW_SELECT_in_select_core151_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_select_core163  */
static	ANTLR3_BITWORD FOLLOW_expression_in_select_core163_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200000102), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_select_core163	= { FOLLOW_expression_in_select_core163_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AS_in_select_core169  */
static	ANTLR3_BITWORD FOLLOW_AS_in_select_core169_bits[]	= { ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_AS_in_select_core169	= { FOLLOW_AS_in_select_core169_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_select_core171  */
static	ANTLR3_BITWORD FOLLOW_name_in_select_core171_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200000002), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_select_core171	= { FOLLOW_name_in_select_core171_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_from_section_in_select_core184  */
static	ANTLR3_BITWORD FOLLOW_from_section_in_select_core184_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_from_section_in_select_core184	= { FOLLOW_from_section_in_select_core184_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_where_section_in_select_core197  */
static	ANTLR3_BITWORD FOLLOW_where_section_in_select_core197_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_where_section_in_select_core197	= { FOLLOW_where_section_in_select_core197_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FROM_in_from_section225  */
static	ANTLR3_BITWORD FOLLOW_FROM_in_from_section225_bits[]	= { ANTLR3_UINT64_LIT(0x0000040000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_FROM_in_from_section225	= { FOLLOW_FROM_in_from_section225_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_table_name_in_from_section227  */
static	ANTLR3_BITWORD FOLLOW_table_name_in_from_section227_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020002) };
static  ANTLR3_BITSET_LIST FOLLOW_table_name_in_from_section227	= { FOLLOW_table_name_in_from_section227_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_from_section232  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_from_section232_bits[]	= { ANTLR3_UINT64_LIT(0x0000040000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_from_section232	= { FOLLOW_COMMA_in_from_section232_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_table_name_in_from_section234  */
static	ANTLR3_BITWORD FOLLOW_table_name_in_from_section234_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020002) };
static  ANTLR3_BITSET_LIST FOLLOW_table_name_in_from_section234	= { FOLLOW_table_name_in_from_section234_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_data_source_in_table_name254  */
static	ANTLR3_BITWORD FOLLOW_data_source_in_table_name254_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_data_source_in_table_name254	= { FOLLOW_data_source_in_table_name254_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_collection_name_in_data_source272  */
static	ANTLR3_BITWORD FOLLOW_collection_name_in_data_source272_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_collection_name_in_data_source272	= { FOLLOW_collection_name_in_data_source272_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WHERE_in_where_section296  */
static	ANTLR3_BITWORD FOLLOW_WHERE_in_where_section296_bits[]	= { ANTLR3_UINT64_LIT(0x0100000100000000), ANTLR3_UINT64_LIT(0x0000000000E80010) };
static  ANTLR3_BITSET_LIST FOLLOW_WHERE_in_where_section296	= { FOLLOW_WHERE_in_where_section296_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_where_section298  */
static	ANTLR3_BITWORD FOLLOW_expression_in_where_section298_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_where_section298	= { FOLLOW_expression_in_where_section298_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CREATE_in_create_collection_stmt322  */
static	ANTLR3_BITWORD FOLLOW_CREATE_in_create_collection_stmt322_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_CREATE_in_create_collection_stmt322	= { FOLLOW_CREATE_in_create_collection_stmt322_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLLECTION_in_create_collection_stmt324  */
static	ANTLR3_BITWORD FOLLOW_COLLECTION_in_create_collection_stmt324_bits[]	= { ANTLR3_UINT64_LIT(0x0000040000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_COLLECTION_in_create_collection_stmt324	= { FOLLOW_COLLECTION_in_create_collection_stmt324_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_collection_name_in_create_collection_stmt326  */
static	ANTLR3_BITWORD FOLLOW_collection_name_in_create_collection_stmt326_bits[]	= { ANTLR3_UINT64_LIT(0x1000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_collection_name_in_create_collection_stmt326	= { FOLLOW_collection_name_in_create_collection_stmt326_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OPTIONS_in_create_collection_stmt329  */
static	ANTLR3_BITWORD FOLLOW_OPTIONS_in_create_collection_stmt329_bits[]	= { ANTLR3_UINT64_LIT(0x0100000100000000), ANTLR3_UINT64_LIT(0x0000000000E80010) };
static  ANTLR3_BITSET_LIST FOLLOW_OPTIONS_in_create_collection_stmt329	= { FOLLOW_OPTIONS_in_create_collection_stmt329_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_create_collection_stmt331  */
static	ANTLR3_BITWORD FOLLOW_expression_in_create_collection_stmt331_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_create_collection_stmt331	= { FOLLOW_expression_in_create_collection_stmt331_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DROP_in_drop_collection_stmt358  */
static	ANTLR3_BITWORD FOLLOW_DROP_in_drop_collection_stmt358_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_DROP_in_drop_collection_stmt358	= { FOLLOW_DROP_in_drop_collection_stmt358_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLLECTION_in_drop_collection_stmt360  */
static	ANTLR3_BITWORD FOLLOW_COLLECTION_in_drop_collection_stmt360_bits[]	= { ANTLR3_UINT64_LIT(0x0000040000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_COLLECTION_in_drop_collection_stmt360	= { FOLLOW_COLLECTION_in_drop_collection_stmt360_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_collection_name_in_drop_collection_stmt362  */
static	ANTLR3_BITWORD FOLLOW_collection_name_in_drop_collection_stmt362_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_collection_name_in_drop_collection_stmt362	= { FOLLOW_collection_name_in_drop_collection_stmt362_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sync_operator_in_insert_stmt390  */
static	ANTLR3_BITWORD FOLLOW_sync_operator_in_insert_stmt390_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_sync_operator_in_insert_stmt390	= { FOLLOW_sync_operator_in_insert_stmt390_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INSERT_in_insert_stmt394  */
static	ANTLR3_BITWORD FOLLOW_INSERT_in_insert_stmt394_bits[]	= { ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_INSERT_in_insert_stmt394	= { FOLLOW_INSERT_in_insert_stmt394_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INTO_in_insert_stmt396  */
static	ANTLR3_BITWORD FOLLOW_INTO_in_insert_stmt396_bits[]	= { ANTLR3_UINT64_LIT(0x0000040000000000), ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_INTO_in_insert_stmt396	= { FOLLOW_INTO_in_insert_stmt396_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_collection_name_in_insert_stmt398  */
static	ANTLR3_BITWORD FOLLOW_collection_name_in_insert_stmt398_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000800) };
static  ANTLR3_BITSET_LIST FOLLOW_collection_name_in_insert_stmt398	= { FOLLOW_collection_name_in_insert_stmt398_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VALUE_in_insert_stmt400  */
static	ANTLR3_BITWORD FOLLOW_VALUE_in_insert_stmt400_bits[]	= { ANTLR3_UINT64_LIT(0x0100000100000000), ANTLR3_UINT64_LIT(0x0000000000E80010) };
static  ANTLR3_BITSET_LIST FOLLOW_VALUE_in_insert_stmt400	= { FOLLOW_VALUE_in_insert_stmt400_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_insert_stmt402  */
static	ANTLR3_BITWORD FOLLOW_expression_in_insert_stmt402_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_insert_stmt402	= { FOLLOW_expression_in_insert_stmt402_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SYNC_in_sync_operator424  */
static	ANTLR3_BITWORD FOLLOW_SYNC_in_sync_operator424_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SYNC_in_sync_operator424	= { FOLLOW_SYNC_in_sync_operator424_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASYNC_in_sync_operator431  */
static	ANTLR3_BITWORD FOLLOW_ASYNC_in_sync_operator431_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ASYNC_in_sync_operator431	= { FOLLOW_ASYNC_in_sync_operator431_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_UNION_in_compound_operator444  */
static	ANTLR3_BITWORD FOLLOW_UNION_in_compound_operator444_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000022) };
static  ANTLR3_BITSET_LIST FOLLOW_UNION_in_compound_operator444	= { FOLLOW_UNION_in_compound_operator444_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ALL_in_compound_operator447  */
static	ANTLR3_BITWORD FOLLOW_ALL_in_compound_operator447_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ALL_in_compound_operator447	= { FOLLOW_ALL_in_compound_operator447_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INTERSECT_in_compound_operator454  */
static	ANTLR3_BITWORD FOLLOW_INTERSECT_in_compound_operator454_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_INTERSECT_in_compound_operator454	= { FOLLOW_INTERSECT_in_compound_operator454_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXCEPT_in_compound_operator459  */
static	ANTLR3_BITWORD FOLLOW_EXCEPT_in_compound_operator459_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EXCEPT_in_compound_operator459	= { FOLLOW_EXCEPT_in_compound_operator459_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ORDER_in_sort_section516  */
static	ANTLR3_BITWORD FOLLOW_ORDER_in_sort_section516_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_ORDER_in_sort_section516	= { FOLLOW_ORDER_in_sort_section516_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BY_in_sort_section518  */
static	ANTLR3_BITWORD FOLLOW_BY_in_sort_section518_bits[]	= { ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_BY_in_sort_section518	= { FOLLOW_BY_in_sort_section518_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sort_specification_list_in_sort_section520  */
static	ANTLR3_BITWORD FOLLOW_sort_specification_list_in_sort_section520_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_sort_specification_list_in_sort_section520	= { FOLLOW_sort_specification_list_in_sort_section520_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sort_specification_in_sort_specification_list535  */
static	ANTLR3_BITWORD FOLLOW_sort_specification_in_sort_specification_list535_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000082) };
static  ANTLR3_BITSET_LIST FOLLOW_sort_specification_in_sort_specification_list535	= { FOLLOW_sort_specification_in_sort_specification_list535_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AND_in_sort_specification_list539  */
static	ANTLR3_BITWORD FOLLOW_AND_in_sort_specification_list539_bits[]	= { ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_AND_in_sort_specification_list539	= { FOLLOW_AND_in_sort_specification_list539_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sort_specification_in_sort_specification_list541  */
static	ANTLR3_BITWORD FOLLOW_sort_specification_in_sort_specification_list541_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000082) };
static  ANTLR3_BITSET_LIST FOLLOW_sort_specification_in_sort_specification_list541	= { FOLLOW_sort_specification_in_sort_specification_list541_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_property_in_sort_specification558  */
static	ANTLR3_BITWORD FOLLOW_property_in_sort_specification558_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000100200) };
static  ANTLR3_BITSET_LIST FOLLOW_property_in_sort_specification558	= { FOLLOW_property_in_sort_specification558_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ordering_specification_in_sort_specification560  */
static	ANTLR3_BITWORD FOLLOW_ordering_specification_in_sort_specification560_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ordering_specification_in_sort_specification560	= { FOLLOW_ordering_specification_in_sort_specification560_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LIMIT_in_limit_section599  */
static	ANTLR3_BITWORD FOLLOW_LIMIT_in_limit_section599_bits[]	= { ANTLR3_UINT64_LIT(0x0100000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_LIMIT_in_limit_section599	= { FOLLOW_LIMIT_in_limit_section599_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_limit_offset_in_limit_section602  */
static	ANTLR3_BITWORD FOLLOW_limit_offset_in_limit_section602_bits[]	= { ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_limit_offset_in_limit_section602	= { FOLLOW_limit_offset_in_limit_section602_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_limit_section607  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_limit_section607_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_limit_section607	= { FOLLOW_NUMBER_in_limit_section607_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_limit_offset622  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_limit_offset622_bits[]	= { ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_limit_offset622	= { FOLLOW_COMMA_in_limit_offset622_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_limit_offset624  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_limit_offset624_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_limit_offset624	= { FOLLOW_NUMBER_in_limit_offset624_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OFFSET_in_offset_section647  */
static	ANTLR3_BITWORD FOLLOW_OFFSET_in_offset_section647_bits[]	= { ANTLR3_UINT64_LIT(0x0100000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_OFFSET_in_offset_section647	= { FOLLOW_OFFSET_in_offset_section647_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_offset_section649  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_offset_section649_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_offset_section649	= { FOLLOW_NUMBER_in_offset_section649_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_value665  */
static	ANTLR3_BITWORD FOLLOW_ID_in_value665_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_value665	= { FOLLOW_ID_in_value665_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_name677  */
static	ANTLR3_BITWORD FOLLOW_ID_in_name677_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_name677	= { FOLLOW_ID_in_name677_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_collection_name688  */
static	ANTLR3_BITWORD FOLLOW_ID_in_collection_name688_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_collection_name688	= { FOLLOW_ID_in_collection_name688_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_string_literal_in_collection_name693  */
static	ANTLR3_BITWORD FOLLOW_string_literal_in_collection_name693_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_string_literal_in_collection_name693	= { FOLLOW_string_literal_in_collection_name693_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_integer_literal_in_expression709  */
static	ANTLR3_BITWORD FOLLOW_integer_literal_in_expression709_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_integer_literal_in_expression709	= { FOLLOW_integer_literal_in_expression709_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_real_literal_in_expression716  */
static	ANTLR3_BITWORD FOLLOW_real_literal_in_expression716_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_real_literal_in_expression716	= { FOLLOW_real_literal_in_expression716_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_string_literal_in_expression723  */
static	ANTLR3_BITWORD FOLLOW_string_literal_in_expression723_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_string_literal_in_expression723	= { FOLLOW_string_literal_in_expression723_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_true_literal_in_expression730  */
static	ANTLR3_BITWORD FOLLOW_true_literal_in_expression730_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_true_literal_in_expression730	= { FOLLOW_true_literal_in_expression730_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_false_literal_in_expression737  */
static	ANTLR3_BITWORD FOLLOW_false_literal_in_expression737_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_false_literal_in_expression737	= { FOLLOW_false_literal_in_expression737_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_87_in_expression744  */
static	ANTLR3_BITWORD FOLLOW_87_in_expression744_bits[]	= { ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_87_in_expression744	= { FOLLOW_87_in_expression744_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dictionary_literal_in_expression747  */
static	ANTLR3_BITWORD FOLLOW_dictionary_literal_in_expression747_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000), ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_dictionary_literal_in_expression747	= { FOLLOW_dictionary_literal_in_expression747_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_expression752  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_expression752_bits[]	= { ANTLR3_UINT64_LIT(0x0000040000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_expression752	= { FOLLOW_COMMA_in_expression752_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dictionary_literal_in_expression754  */
static	ANTLR3_BITWORD FOLLOW_dictionary_literal_in_expression754_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000), ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_dictionary_literal_in_expression754	= { FOLLOW_dictionary_literal_in_expression754_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_88_in_expression759  */
static	ANTLR3_BITWORD FOLLOW_88_in_expression759_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_88_in_expression759	= { FOLLOW_88_in_expression759_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_83_in_expression764  */
static	ANTLR3_BITWORD FOLLOW_83_in_expression764_bits[]	= { ANTLR3_UINT64_LIT(0x0100000100000000), ANTLR3_UINT64_LIT(0x0000000000E80010) };
static  ANTLR3_BITSET_LIST FOLLOW_83_in_expression764	= { FOLLOW_83_in_expression764_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_array_literal_in_expression766  */
static	ANTLR3_BITWORD FOLLOW_array_literal_in_expression766_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000), ANTLR3_UINT64_LIT(0x0000000000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_array_literal_in_expression766	= { FOLLOW_array_literal_in_expression766_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_expression770  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_expression770_bits[]	= { ANTLR3_UINT64_LIT(0x0100000100000000), ANTLR3_UINT64_LIT(0x0000000000E80010) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_expression770	= { FOLLOW_COMMA_in_expression770_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_array_literal_in_expression772  */
static	ANTLR3_BITWORD FOLLOW_array_literal_in_expression772_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000), ANTLR3_UINT64_LIT(0x0000000000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_array_literal_in_expression772	= { FOLLOW_array_literal_in_expression772_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_84_in_expression778  */
static	ANTLR3_BITWORD FOLLOW_84_in_expression778_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_84_in_expression778	= { FOLLOW_84_in_expression778_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_property789  */
static	ANTLR3_BITWORD FOLLOW_ID_in_property789_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_property789	= { FOLLOW_ID_in_property789_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_integer_literal801  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_integer_literal801_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_integer_literal801	= { FOLLOW_NUMBER_in_integer_literal801_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOAT_in_real_literal812  */
static	ANTLR3_BITWORD FOLLOW_FLOAT_in_real_literal812_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOAT_in_real_literal812	= { FOLLOW_FLOAT_in_real_literal812_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_string_literal823  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_string_literal823_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_string_literal823	= { FOLLOW_STRING_in_string_literal823_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_86_in_true_literal834  */
static	ANTLR3_BITWORD FOLLOW_86_in_true_literal834_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_86_in_true_literal834	= { FOLLOW_86_in_true_literal834_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_85_in_false_literal846  */
static	ANTLR3_BITWORD FOLLOW_85_in_false_literal846_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_85_in_false_literal846	= { FOLLOW_85_in_false_literal846_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_dictionary_literal871  */
static	ANTLR3_BITWORD FOLLOW_name_in_dictionary_literal871_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_dictionary_literal871	= { FOLLOW_name_in_dictionary_literal871_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_82_in_dictionary_literal873  */
static	ANTLR3_BITWORD FOLLOW_82_in_dictionary_literal873_bits[]	= { ANTLR3_UINT64_LIT(0x0100000100000000), ANTLR3_UINT64_LIT(0x0000000000E80010) };
static  ANTLR3_BITSET_LIST FOLLOW_82_in_dictionary_literal873	= { FOLLOW_82_in_dictionary_literal873_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_dictionary_literal875  */
static	ANTLR3_BITWORD FOLLOW_expression_in_dictionary_literal875_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_dictionary_literal875	= { FOLLOW_expression_in_dictionary_literal875_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_array_literal903  */
static	ANTLR3_BITWORD FOLLOW_expression_in_array_literal903_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_array_literal903	= { FOLLOW_expression_in_array_literal903_bits, 1	};


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start statement
 * UnQL.g:40:1: statement[uSQL::SQLParser *sqlParser] : ( select_stmt[stmt] | create_collection_stmt[stmt] | drop_collection_stmt[stmt] | insert_stmt[stmt] );
 */
static void
statement(pUnQLParser ctx, uSQL::SQLParser *sqlParser)
{
    /* Initialize rule variables
     */


    		uSQL::SQLStatement *stmt = new uSQL::SQLStatement();
    		sqlParser->addStatement(stmt);
    	
    {
        {
            //  UnQL.g:45:2: ( select_stmt[stmt] | create_collection_stmt[stmt] | drop_collection_stmt[stmt] | insert_stmt[stmt] )

            ANTLR3_UINT32 alt1;

            alt1=4;

            switch ( LA(1) )
            {
            case SELECT:
            	{
            		alt1=1;
            	}
                break;
            case CREATE:
            	{
            		alt1=2;
            	}
                break;
            case DROP:
            	{
            		alt1=3;
            	}
                break;
            case ASYNC:
            case INSERT:
            case SYNC:
            	{
            		alt1=4;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 1;
                EXCEPTION->state        = 0;


                goto rulestatementEx;

            }

            switch (alt1)
            {
        	case 1:
        	    // UnQL.g:45:4: select_stmt[stmt]
        	    {
        	        FOLLOWPUSH(FOLLOW_select_stmt_in_statement61);
        	        select_stmt(ctx, stmt);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // UnQL.g:46:4: create_collection_stmt[stmt]
        	    {
        	        FOLLOWPUSH(FOLLOW_create_collection_stmt_in_statement67);
        	        create_collection_stmt(ctx, stmt);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;
        	case 3:
        	    // UnQL.g:47:4: drop_collection_stmt[stmt]
        	    {
        	        FOLLOWPUSH(FOLLOW_drop_collection_stmt_in_statement73);
        	        drop_collection_stmt(ctx, stmt);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;
        	case 4:
        	    // UnQL.g:48:4: insert_stmt[stmt]
        	    {
        	        FOLLOWPUSH(FOLLOW_insert_stmt_in_statement79);
        	        insert_stmt(ctx, stmt);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end statement */

/**
 * $ANTLR start select_stmt
 * UnQL.g:95:1: select_stmt[uSQL::SQLStatement *sqlStmt] : select_core[sqlStmt] (ss= sort_section )? (ls= limit_section )? (os= offset_section )? ;
 */
static void
select_stmt(pUnQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
    uSQL::SQLOrders * ss;
    #undef	RETURN_TYPE_ss
    #define	RETURN_TYPE_ss uSQL::SQLOrders *

    uSQL::SQLLimit * ls;
    #undef	RETURN_TYPE_ls
    #define	RETURN_TYPE_ls uSQL::SQLLimit *

    uSQL::SQLOffset * os;
    #undef	RETURN_TYPE_os
    #define	RETURN_TYPE_os uSQL::SQLOffset *

    /* Initialize rule variables
     */


    		// SELECT
    		uSQL::SQLSelect *sqlSelect = new uSQL::SQLSelect();
    		sqlStmt->addChildNode(sqlSelect);

    		ss = NULL;
    		ls = NULL;
    		os = NULL;
    	
    {
        // UnQL.g:105:2: ( select_core[sqlStmt] (ss= sort_section )? (ls= limit_section )? (os= offset_section )? )
        // UnQL.g:105:4: select_core[sqlStmt] (ss= sort_section )? (ls= limit_section )? (os= offset_section )?
        {
            FOLLOWPUSH(FOLLOW_select_core_in_select_stmt106);
            select_core(ctx, sqlStmt);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleselect_stmtEx;
            }


            // UnQL.g:105:25: (ss= sort_section )?
            {
                int alt2=2;
                switch ( LA(1) )
                {
                    case ORDER:
                    	{
                    		alt2=1;
                    	}
                        break;
                }

                switch (alt2)
                {
            	case 1:
            	    // UnQL.g:105:26: ss= sort_section
            	    {
            	        FOLLOWPUSH(FOLLOW_sort_section_in_select_stmt112);
            	        ss=sort_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_stmtEx;
            	        }


            	    }
            	    break;

                }
            }

            // UnQL.g:105:44: (ls= limit_section )?
            {
                int alt3=2;
                switch ( LA(1) )
                {
                    case LIMIT:
                    	{
                    		alt3=1;
                    	}
                        break;
                }

                switch (alt3)
                {
            	case 1:
            	    // UnQL.g:105:45: ls= limit_section
            	    {
            	        FOLLOWPUSH(FOLLOW_limit_section_in_select_stmt119);
            	        ls=limit_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_stmtEx;
            	        }


            	    }
            	    break;

                }
            }

            // UnQL.g:105:64: (os= offset_section )?
            {
                int alt4=2;
                switch ( LA(1) )
                {
                    case OFFSET:
                    	{
                    		alt4=1;
                    	}
                        break;
                }

                switch (alt4)
                {
            	case 1:
            	    // UnQL.g:105:65: os= offset_section
            	    {
            	        FOLLOWPUSH(FOLLOW_offset_section_in_select_stmt126);
            	        os=offset_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_stmtEx;
            	        }


            	    }
            	    break;

                }
            }

            {

                		// ORDER BY		
                		if (ss)
                			sqlStmt->addChildNode(ss);
                			
                		// LIMIT		
                		if (ls)
                			sqlStmt->addChildNode(ls);

                		// OFFSET		
                		if (os)
                			sqlStmt->addChildNode(os);

                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleselect_stmtEx; /* Prevent compiler warnings */
    ruleselect_stmtEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end select_stmt */

/**
 * $ANTLR start select_core
 * UnQL.g:122:1: select_core[uSQL::SQLStatement *sqlStmt] : SELECT ( DISTINCT | ALL )? ( expression[sqlValue] )? ( AS name )? (fromSection= from_section )? (whereSection= where_section )? ;
 */
static void
select_core(pUnQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
    uSQL::SQLFrom * fromSection;
    #undef	RETURN_TYPE_fromSection
    #define	RETURN_TYPE_fromSection uSQL::SQLFrom *

    uSQL::SQLWhere * whereSection;
    #undef	RETURN_TYPE_whereSection
    #define	RETURN_TYPE_whereSection uSQL::SQLWhere *

    /* Initialize rule variables
     */


    		uSQL::SQLValue *sqlValue = new uSQL::SQLValue();
    		fromSection = NULL;
    		whereSection = NULL;
    	
    {
        // UnQL.g:128:2: ( SELECT ( DISTINCT | ALL )? ( expression[sqlValue] )? ( AS name )? (fromSection= from_section )? (whereSection= where_section )? )
        // UnQL.g:128:4: SELECT ( DISTINCT | ALL )? ( expression[sqlValue] )? ( AS name )? (fromSection= from_section )? (whereSection= where_section )?
        {
             MATCHT(SELECT, &FOLLOW_SELECT_in_select_core151);
            if  (HASEXCEPTION())
            {
                goto ruleselect_coreEx;
            }


            // UnQL.g:128:11: ( DISTINCT | ALL )?
            {
                int alt5=2;
                switch ( LA(1) )
                {
                    case ALL:
                    case DISTINCT:
                    	{
                    		alt5=1;
                    	}
                        break;
                }

                switch (alt5)
                {
            	case 1:
            	    // UnQL.g:
            	    {
            	        if ( LA(1) == ALL || LA(1) == DISTINCT )
            	        {
            	            CONSUME();
            	            PERRORRECOVERY=ANTLR3_FALSE;
            	        }
            	        else
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            	            EXCEPTION->expectingSet = NULL;

            	            goto ruleselect_coreEx;
            	        }


            	    }
            	    break;

                }
            }

            // UnQL.g:128:29: ( expression[sqlValue] )?
            {
                int alt6=2;
                switch ( LA(1) )
                {
                    case FLOAT:
                    case NUMBER:
                    case STRING:
                    case 83:
                    case 85:
                    case 86:
                    case 87:
                    	{
                    		alt6=1;
                    	}
                        break;
                }

                switch (alt6)
                {
            	case 1:
            	    // UnQL.g:128:30: expression[sqlValue]
            	    {
            	        FOLLOWPUSH(FOLLOW_expression_in_select_core163);
            	        expression(ctx, sqlValue);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_coreEx;
            	        }


            	    }
            	    break;

                }
            }

            // UnQL.g:128:53: ( AS name )?
            {
                int alt7=2;
                switch ( LA(1) )
                {
                    case AS:
                    	{
                    		alt7=1;
                    	}
                        break;
                }

                switch (alt7)
                {
            	case 1:
            	    // UnQL.g:128:54: AS name
            	    {
            	         MATCHT(AS, &FOLLOW_AS_in_select_core169);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_coreEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_name_in_select_core171);
            	        name(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_coreEx;
            	        }


            	    }
            	    break;

                }
            }

            // UnQL.g:129:4: (fromSection= from_section )?
            {
                int alt8=2;
                switch ( LA(1) )
                {
                    case FROM:
                    	{
                    		alt8=1;
                    	}
                        break;
                }

                switch (alt8)
                {
            	case 1:
            	    // UnQL.g:129:5: fromSection= from_section
            	    {
            	        FOLLOWPUSH(FOLLOW_from_section_in_select_core184);
            	        fromSection=from_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_coreEx;
            	        }


            	    }
            	    break;

                }
            }

            // UnQL.g:130:4: (whereSection= where_section )?
            {
                int alt9=2;
                switch ( LA(1) )
                {
                    case WHERE:
                    	{
                    		alt9=1;
                    	}
                        break;
                }

                switch (alt9)
                {
            	case 1:
            	    // UnQL.g:130:5: whereSection= where_section
            	    {
            	        FOLLOWPUSH(FOLLOW_where_section_in_select_core197);
            	        whereSection=where_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_coreEx;
            	        }


            	    }
            	    break;

                }
            }

            {

                	  
                		// VALUE 
                		if (sqlValue->hasExpressions())
                			sqlStmt->addChildNode(sqlValue);
                		else 
                			delete sqlValue;
                			
                		// FROM
                		if (fromSection)		
                			sqlStmt->addChildNode(fromSection);
                			
                		// WHERE
                		if (whereSection)		
                			sqlStmt->addChildNode(whereSection);
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleselect_coreEx; /* Prevent compiler warnings */
    ruleselect_coreEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end select_core */

/**
 * $ANTLR start from_section
 * UnQL.g:149:1: from_section returns [uSQL::SQLFrom *sqlFrom] : ( FROM table_name[sqlFrom] ) ( COMMA table_name[sqlFrom] )* ;
 */
static uSQL::SQLFrom *
from_section(pUnQLParser ctx)
{
    uSQL::SQLFrom * sqlFrom;


    /* Initialize rule variables
     */


    		sqlFrom = new uSQL::SQLFrom();
    	
    {
        // UnQL.g:153:2: ( ( FROM table_name[sqlFrom] ) ( COMMA table_name[sqlFrom] )* )
        // UnQL.g:153:4: ( FROM table_name[sqlFrom] ) ( COMMA table_name[sqlFrom] )*
        {
            // UnQL.g:153:4: ( FROM table_name[sqlFrom] )
            // UnQL.g:153:5: FROM table_name[sqlFrom]
            {
                 MATCHT(FROM, &FOLLOW_FROM_in_from_section225);
                if  (HASEXCEPTION())
                {
                    goto rulefrom_sectionEx;
                }


                FOLLOWPUSH(FOLLOW_table_name_in_from_section227);
                table_name(ctx, sqlFrom);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulefrom_sectionEx;
                }


            }


            // UnQL.g:153:31: ( COMMA table_name[sqlFrom] )*

            for (;;)
            {
                int alt10=2;
                switch ( LA(1) )
                {
                case COMMA:
                	{
                		alt10=1;
                	}
                    break;

                }

                switch (alt10)
                {
            	case 1:
            	    // UnQL.g:153:32: COMMA table_name[sqlFrom]
            	    {
            	         MATCHT(COMMA, &FOLLOW_COMMA_in_from_section232);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefrom_sectionEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_table_name_in_from_section234);
            	        table_name(ctx, sqlFrom);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefrom_sectionEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop10;	/* break out of the loop */
            	    break;
                }
            }
            loop10: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulefrom_sectionEx; /* Prevent compiler warnings */
    rulefrom_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlFrom;
}
/* $ANTLR end from_section */

/**
 * $ANTLR start table_name
 * UnQL.g:156:1: table_name[uSQL::SQLFrom *sqlFrom] : dataSource= data_source ;
 */
static void
table_name(pUnQLParser ctx, uSQL::SQLFrom *sqlFrom)
{
    uSQL::SQLDataSource * dataSource;
    #undef	RETURN_TYPE_dataSource
    #define	RETURN_TYPE_dataSource uSQL::SQLDataSource *

    /* Initialize rule variables
     */

    {
        // UnQL.g:157:2: (dataSource= data_source )
        // UnQL.g:157:4: dataSource= data_source
        {
            FOLLOWPUSH(FOLLOW_data_source_in_table_name254);
            dataSource=data_source(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletable_nameEx;
            }


            {

                		sqlFrom->addChildNode(dataSource);
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruletable_nameEx; /* Prevent compiler warnings */
    ruletable_nameEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end table_name */

/**
 * $ANTLR start data_source
 * UnQL.g:162:1: data_source returns [uSQL::SQLDataSource *sqlDataSource] : ( collection_name ) ;
 */
static uSQL::SQLDataSource *
data_source(pUnQLParser ctx)
{
    uSQL::SQLDataSource * sqlDataSource;


    UnQLParser_collection_name_return collection_name1;
    #undef	RETURN_TYPE_collection_name1
    #define	RETURN_TYPE_collection_name1 UnQLParser_collection_name_return

    /* Initialize rule variables
     */

    {
        // UnQL.g:163:2: ( ( collection_name ) )
        // UnQL.g:163:4: ( collection_name )
        {
            // UnQL.g:163:4: ( collection_name )
            // UnQL.g:163:5: collection_name
            {
                FOLLOWPUSH(FOLLOW_collection_name_in_data_source272);
                collection_name1=collection_name(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruledata_sourceEx;
                }


            }


            {

                		sqlDataSource = new uSQL::SQLDataSource();
                		sqlDataSource->setName(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, collection_name1.start, collection_name1.stop))
                ));
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruledata_sourceEx; /* Prevent compiler warnings */
    ruledata_sourceEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlDataSource;
}
/* $ANTLR end data_source */

/**
 * $ANTLR start where_section
 * UnQL.g:169:1: where_section returns [uSQL::SQLWhere *sqlWhere] : WHERE expression[sqlWhere] ;
 */
static uSQL::SQLWhere *
where_section(pUnQLParser ctx)
{
    uSQL::SQLWhere * sqlWhere;


    /* Initialize rule variables
     */


    		sqlWhere = new uSQL::SQLWhere();
    	
    {
        // UnQL.g:173:2: ( WHERE expression[sqlWhere] )
        // UnQL.g:173:4: WHERE expression[sqlWhere]
        {
             MATCHT(WHERE, &FOLLOW_WHERE_in_where_section296);
            if  (HASEXCEPTION())
            {
                goto rulewhere_sectionEx;
            }


            FOLLOWPUSH(FOLLOW_expression_in_where_section298);
            expression(ctx, sqlWhere);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhere_sectionEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulewhere_sectionEx; /* Prevent compiler warnings */
    rulewhere_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlWhere;
}
/* $ANTLR end where_section */

/**
 * $ANTLR start create_collection_stmt
 * UnQL.g:182:1: create_collection_stmt[uSQL::SQLStatement *sqlStmt] : CREATE COLLECTION collection_name ( OPTIONS expression[sqlOpt] )? ;
 */
static void
create_collection_stmt(pUnQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
    UnQLParser_collection_name_return collection_name2;
    #undef	RETURN_TYPE_collection_name2
    #define	RETURN_TYPE_collection_name2 UnQLParser_collection_name_return

    /* Initialize rule variables
     */

    	
    		uSQL::SQLOption *sqlOpt = new uSQL::SQLOption();
    	
    {
        // UnQL.g:186:2: ( CREATE COLLECTION collection_name ( OPTIONS expression[sqlOpt] )? )
        // UnQL.g:186:4: CREATE COLLECTION collection_name ( OPTIONS expression[sqlOpt] )?
        {
             MATCHT(CREATE, &FOLLOW_CREATE_in_create_collection_stmt322);
            if  (HASEXCEPTION())
            {
                goto rulecreate_collection_stmtEx;
            }


             MATCHT(COLLECTION, &FOLLOW_COLLECTION_in_create_collection_stmt324);
            if  (HASEXCEPTION())
            {
                goto rulecreate_collection_stmtEx;
            }


            FOLLOWPUSH(FOLLOW_collection_name_in_create_collection_stmt326);
            collection_name2=collection_name(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecreate_collection_stmtEx;
            }


            // UnQL.g:186:38: ( OPTIONS expression[sqlOpt] )?
            {
                int alt11=2;
                switch ( LA(1) )
                {
                    case OPTIONS:
                    	{
                    		alt11=1;
                    	}
                        break;
                }

                switch (alt11)
                {
            	case 1:
            	    // UnQL.g:186:39: OPTIONS expression[sqlOpt]
            	    {
            	         MATCHT(OPTIONS, &FOLLOW_OPTIONS_in_create_collection_stmt329);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecreate_collection_stmtEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_expression_in_create_collection_stmt331);
            	        expression(ctx, sqlOpt);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecreate_collection_stmtEx;
            	        }


            	    }
            	    break;

                }
            }

            {

                		// CREATE
                		uSQL::SQLCreate *sqlCmd = new uSQL::SQLCreate();
                		sqlStmt->addChildNode(sqlCmd);
                		
                		// Collection
                		uSQL::SQLCollection *sqlCollection = new uSQL::SQLCollection();
                		sqlCollection->setName(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, collection_name2.start, collection_name2.stop))
                ));
                		sqlCmd->addChildNode(sqlCollection);

                		// Option 
                		if (sqlOpt->hasExpressions())
                			sqlCmd->addChildNode(sqlOpt);
                		else 
                			delete sqlOpt;
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulecreate_collection_stmtEx; /* Prevent compiler warnings */
    rulecreate_collection_stmtEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end create_collection_stmt */

/**
 * $ANTLR start drop_collection_stmt
 * UnQL.g:210:1: drop_collection_stmt[uSQL::SQLStatement *sqlStmt] : DROP COLLECTION collection_name ;
 */
static void
drop_collection_stmt(pUnQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
    UnQLParser_collection_name_return collection_name3;
    #undef	RETURN_TYPE_collection_name3
    #define	RETURN_TYPE_collection_name3 UnQLParser_collection_name_return

    /* Initialize rule variables
     */

    	
    	
    {
        // UnQL.g:213:2: ( DROP COLLECTION collection_name )
        // UnQL.g:213:4: DROP COLLECTION collection_name
        {
             MATCHT(DROP, &FOLLOW_DROP_in_drop_collection_stmt358);
            if  (HASEXCEPTION())
            {
                goto ruledrop_collection_stmtEx;
            }


             MATCHT(COLLECTION, &FOLLOW_COLLECTION_in_drop_collection_stmt360);
            if  (HASEXCEPTION())
            {
                goto ruledrop_collection_stmtEx;
            }


            FOLLOWPUSH(FOLLOW_collection_name_in_drop_collection_stmt362);
            collection_name3=collection_name(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledrop_collection_stmtEx;
            }


            {

                		// CREATE
                		uSQL::SQLDrop *sqlCmd = new uSQL::SQLDrop();
                		sqlStmt->addChildNode(sqlCmd);
                		
                		// Collection
                		uSQL::SQLCollection *sqlCollection = new uSQL::SQLCollection();
                		sqlCollection->setName(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, collection_name3.start, collection_name3.stop))
                ));
                		sqlCmd->addChildNode(sqlCollection);
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruledrop_collection_stmtEx; /* Prevent compiler warnings */
    ruledrop_collection_stmtEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end drop_collection_stmt */

/**
 * $ANTLR start insert_stmt
 * UnQL.g:232:1: insert_stmt[uSQL::SQLStatement *sqlStmt] : (isAsync= sync_operator )? INSERT INTO collection_name VALUE expression[sqlValue] ;
 */
static void
insert_stmt(pUnQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
    bool isAsync;
    #undef	RETURN_TYPE_isAsync
    #define	RETURN_TYPE_isAsync bool

    UnQLParser_collection_name_return collection_name4;
    #undef	RETURN_TYPE_collection_name4
    #define	RETURN_TYPE_collection_name4 UnQLParser_collection_name_return

    /* Initialize rule variables
     */


    		uSQL::SQLValue *sqlValue = new uSQL::SQLValue();
    		isAsync = false;
    	
    {
        // UnQL.g:237:2: ( (isAsync= sync_operator )? INSERT INTO collection_name VALUE expression[sqlValue] )
        // UnQL.g:237:4: (isAsync= sync_operator )? INSERT INTO collection_name VALUE expression[sqlValue]
        {
            // UnQL.g:237:4: (isAsync= sync_operator )?
            {
                int alt12=2;
                switch ( LA(1) )
                {
                    case ASYNC:
                    case SYNC:
                    	{
                    		alt12=1;
                    	}
                        break;
                }

                switch (alt12)
                {
            	case 1:
            	    // UnQL.g:237:5: isAsync= sync_operator
            	    {
            	        FOLLOWPUSH(FOLLOW_sync_operator_in_insert_stmt390);
            	        isAsync=sync_operator(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleinsert_stmtEx;
            	        }


            	    }
            	    break;

                }
            }

             MATCHT(INSERT, &FOLLOW_INSERT_in_insert_stmt394);
            if  (HASEXCEPTION())
            {
                goto ruleinsert_stmtEx;
            }


             MATCHT(INTO, &FOLLOW_INTO_in_insert_stmt396);
            if  (HASEXCEPTION())
            {
                goto ruleinsert_stmtEx;
            }


            FOLLOWPUSH(FOLLOW_collection_name_in_insert_stmt398);
            collection_name4=collection_name(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinsert_stmtEx;
            }


             MATCHT(VALUE, &FOLLOW_VALUE_in_insert_stmt400);
            if  (HASEXCEPTION())
            {
                goto ruleinsert_stmtEx;
            }


            FOLLOWPUSH(FOLLOW_expression_in_insert_stmt402);
            expression(ctx, sqlValue);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinsert_stmtEx;
            }


            {

                		// INSERT
                		uSQL::SQLInsert *sqlCmd = new uSQL::SQLInsert();
                		sqlCmd->setAsyncEnabled(isAsync);
                		sqlStmt->addChildNode(sqlCmd);

                		// Collection
                		uSQL::SQLCollection *sqlCollection = new uSQL::SQLCollection();
                		sqlCollection->setName(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, collection_name4.start, collection_name4.stop))
                ));
                		sqlCmd->addChildNode(sqlCollection);
                		
                		// Value
                		sqlCmd->addChildNode(sqlValue);
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleinsert_stmtEx; /* Prevent compiler warnings */
    ruleinsert_stmtEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end insert_stmt */

/**
 * $ANTLR start sync_operator
 * UnQL.g:260:1: sync_operator returns [bool isAync] : ( SYNC | ASYNC );
 */
static bool
sync_operator(pUnQLParser ctx)
{
    bool isAync;


    /* Initialize rule variables
     */

    {
        {
            //  UnQL.g:261:2: ( SYNC | ASYNC )

            ANTLR3_UINT32 alt13;

            alt13=2;

            switch ( LA(1) )
            {
            case SYNC:
            	{
            		alt13=1;
            	}
                break;
            case ASYNC:
            	{
            		alt13=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 13;
                EXCEPTION->state        = 0;


                goto rulesync_operatorEx;

            }

            switch (alt13)
            {
        	case 1:
        	    // UnQL.g:261:4: SYNC
        	    {
        	         MATCHT(SYNC, &FOLLOW_SYNC_in_sync_operator424);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesync_operatorEx;
        	        }


        	        {

        	            		isAync = false;
        	            	  
        	        }


        	    }
        	    break;
        	case 2:
        	    // UnQL.g:264:4: ASYNC
        	    {
        	         MATCHT(ASYNC, &FOLLOW_ASYNC_in_sync_operator431);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesync_operatorEx;
        	        }


        	        {

        	            		isAync = true;
        	            	  
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulesync_operatorEx; /* Prevent compiler warnings */
    rulesync_operatorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return isAync;
}
/* $ANTLR end sync_operator */

/**
 * $ANTLR start compound_operator
 * UnQL.g:269:1: compound_operator : ( UNION ( ALL )? | INTERSECT | EXCEPT );
 */
static void
compound_operator(pUnQLParser ctx)
{
    /* Initialize rule variables
     */

    {
        {
            //  UnQL.g:270:2: ( UNION ( ALL )? | INTERSECT | EXCEPT )

            ANTLR3_UINT32 alt15;

            alt15=3;

            switch ( LA(1) )
            {
            case UNION:
            	{
            		alt15=1;
            	}
                break;
            case INTERSECT:
            	{
            		alt15=2;
            	}
                break;
            case EXCEPT:
            	{
            		alt15=3;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 15;
                EXCEPTION->state        = 0;


                goto rulecompound_operatorEx;

            }

            switch (alt15)
            {
        	case 1:
        	    // UnQL.g:270:4: UNION ( ALL )?
        	    {
        	         MATCHT(UNION, &FOLLOW_UNION_in_compound_operator444);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecompound_operatorEx;
        	        }


        	        // UnQL.g:270:10: ( ALL )?
        	        {
        	            int alt14=2;
        	            switch ( LA(1) )
        	            {
        	                case ALL:
        	                	{
        	                		alt14=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt14)
        	            {
        	        	case 1:
        	        	    // UnQL.g:270:11: ALL
        	        	    {
        	        	         MATCHT(ALL, &FOLLOW_ALL_in_compound_operator447);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecompound_operatorEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // UnQL.g:271:4: INTERSECT
        	    {
        	         MATCHT(INTERSECT, &FOLLOW_INTERSECT_in_compound_operator454);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecompound_operatorEx;
        	        }


        	    }
        	    break;
        	case 3:
        	    // UnQL.g:272:4: EXCEPT
        	    {
        	         MATCHT(EXCEPT, &FOLLOW_EXCEPT_in_compound_operator459);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecompound_operatorEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulecompound_operatorEx; /* Prevent compiler warnings */
    rulecompound_operatorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end compound_operator */

/**
 * $ANTLR start condition_operator
 * UnQL.g:275:1: condition_operator : ( EQ | OP_LT | LE | GT | GE | NOTEQ );
 */
static void
condition_operator(pUnQLParser ctx)
{
    /* Initialize rule variables
     */

    {
        // UnQL.g:276:2: ( EQ | OP_LT | LE | GT | GE | NOTEQ )
        // UnQL.g:
        {
            if ( LA(1) == EQ || LA(1) == GE || LA(1) == GT || LA(1) == LE || LA(1) == NOTEQ || LA(1) == OP_LT )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto rulecondition_operatorEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulecondition_operatorEx; /* Prevent compiler warnings */
    rulecondition_operatorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end condition_operator */

/**
 * $ANTLR start sort_section
 * UnQL.g:284:1: sort_section returns [uSQL::SQLOrders *sqlOrders] : ORDER BY sort_specification_list[sqlOrders] ;
 */
static uSQL::SQLOrders *
sort_section(pUnQLParser ctx)
{
    uSQL::SQLOrders * sqlOrders;


    /* Initialize rule variables
     */


    		sqlOrders = new uSQL::SQLOrders();
    	
    {
        // UnQL.g:288:2: ( ORDER BY sort_specification_list[sqlOrders] )
        // UnQL.g:288:4: ORDER BY sort_specification_list[sqlOrders]
        {
             MATCHT(ORDER, &FOLLOW_ORDER_in_sort_section516);
            if  (HASEXCEPTION())
            {
                goto rulesort_sectionEx;
            }


             MATCHT(BY, &FOLLOW_BY_in_sort_section518);
            if  (HASEXCEPTION())
            {
                goto rulesort_sectionEx;
            }


            FOLLOWPUSH(FOLLOW_sort_specification_list_in_sort_section520);
            sort_specification_list(ctx, sqlOrders);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesort_sectionEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulesort_sectionEx; /* Prevent compiler warnings */
    rulesort_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlOrders;
}
/* $ANTLR end sort_section */

/**
 * $ANTLR start sort_specification_list
 * UnQL.g:291:1: sort_specification_list[uSQL::SQLOrders *sqlOrders] : sort_specification[sqlOrders] ( AND sort_specification[sqlOrders] )* ;
 */
static void
sort_specification_list(pUnQLParser ctx, uSQL::SQLOrders *sqlOrders)
{
    /* Initialize rule variables
     */

    {
        // UnQL.g:292:2: ( sort_specification[sqlOrders] ( AND sort_specification[sqlOrders] )* )
        // UnQL.g:292:4: sort_specification[sqlOrders] ( AND sort_specification[sqlOrders] )*
        {
            FOLLOWPUSH(FOLLOW_sort_specification_in_sort_specification_list535);
            sort_specification(ctx, sqlOrders);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesort_specification_listEx;
            }


            // UnQL.g:292:34: ( AND sort_specification[sqlOrders] )*

            for (;;)
            {
                int alt16=2;
                switch ( LA(1) )
                {
                case AND:
                	{
                		alt16=1;
                	}
                    break;

                }

                switch (alt16)
                {
            	case 1:
            	    // UnQL.g:292:35: AND sort_specification[sqlOrders]
            	    {
            	         MATCHT(AND, &FOLLOW_AND_in_sort_specification_list539);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesort_specification_listEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_sort_specification_in_sort_specification_list541);
            	        sort_specification(ctx, sqlOrders);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesort_specification_listEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop16;	/* break out of the loop */
            	    break;
                }
            }
            loop16: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulesort_specification_listEx; /* Prevent compiler warnings */
    rulesort_specification_listEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end sort_specification_list */

/**
 * $ANTLR start sort_specification
 * UnQL.g:295:1: sort_specification[uSQL::SQLOrders *sqlOrders] : property ordering_specification ;
 */
static void
sort_specification(pUnQLParser ctx, uSQL::SQLOrders *sqlOrders)
{
    UnQLParser_property_return property5;
    #undef	RETURN_TYPE_property5
    #define	RETURN_TYPE_property5 UnQLParser_property_return

    UnQLParser_ordering_specification_return ordering_specification6;
    #undef	RETURN_TYPE_ordering_specification6
    #define	RETURN_TYPE_ordering_specification6 UnQLParser_ordering_specification_return

    /* Initialize rule variables
     */

    {
        // UnQL.g:296:2: ( property ordering_specification )
        // UnQL.g:296:4: property ordering_specification
        {
            FOLLOWPUSH(FOLLOW_property_in_sort_specification558);
            property5=property(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesort_specificationEx;
            }


            FOLLOWPUSH(FOLLOW_ordering_specification_in_sort_specification560);
            ordering_specification6=ordering_specification(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesort_specificationEx;
            }


            {

                		uSQL::SQLOrder *sqlOrder = new uSQL::SQLOrder();
                		sqlOrder->setName(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, property5.start, property5.stop))
                ));
                		sqlOrder->setOrder(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, ordering_specification6.start, ordering_specification6.stop))
                ));
                		sqlOrders->addChildNode(sqlOrder);
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulesort_specificationEx; /* Prevent compiler warnings */
    rulesort_specificationEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end sort_specification */

/**
 * $ANTLR start ordering_specification
 * UnQL.g:304:1: ordering_specification : ( ASC | DESC );
 */
static UnQLParser_ordering_specification_return
ordering_specification(pUnQLParser ctx)
{
    UnQLParser_ordering_specification_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // UnQL.g:305:2: ( ASC | DESC )
        // UnQL.g:
        {
            if ( LA(1) == ASC || LA(1) == DESC )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto ruleordering_specificationEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleordering_specificationEx; /* Prevent compiler warnings */
    ruleordering_specificationEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end ordering_specification */

/**
 * $ANTLR start limit_section
 * UnQL.g:309:1: limit_section returns [uSQL::SQLLimit *sqlLimit] : LIMIT ( limit_offset[sqlLimit] )? NUMBER ;
 */
static uSQL::SQLLimit *
limit_section(pUnQLParser ctx)
{
    uSQL::SQLLimit * sqlLimit;


    pANTLR3_COMMON_TOKEN    NUMBER7;

    /* Initialize rule variables
     */


    		sqlLimit = new uSQL::SQLLimit();
    	
    NUMBER7       = NULL;

    {
        // UnQL.g:313:2: ( LIMIT ( limit_offset[sqlLimit] )? NUMBER )
        // UnQL.g:313:4: LIMIT ( limit_offset[sqlLimit] )? NUMBER
        {
             MATCHT(LIMIT, &FOLLOW_LIMIT_in_limit_section599);
            if  (HASEXCEPTION())
            {
                goto rulelimit_sectionEx;
            }


            // UnQL.g:313:10: ( limit_offset[sqlLimit] )?
            {
                int alt17=2;
                switch ( LA(1) )
                {
                    case COMMA:
                    	{
                    		alt17=1;
                    	}
                        break;
                }

                switch (alt17)
                {
            	case 1:
            	    // UnQL.g:313:11: limit_offset[sqlLimit]
            	    {
            	        FOLLOWPUSH(FOLLOW_limit_offset_in_limit_section602);
            	        limit_offset(ctx, sqlLimit);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelimit_sectionEx;
            	        }


            	    }
            	    break;

                }
            }

            NUMBER7 = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_limit_section607);
            if  (HASEXCEPTION())
            {
                goto rulelimit_sectionEx;
            }


            {

                		sqlLimit->setCount(CG_ANTLR3_STRING_2_INT((NUMBER7->getText(NUMBER7))));
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulelimit_sectionEx; /* Prevent compiler warnings */
    rulelimit_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlLimit;
}
/* $ANTLR end limit_section */

/**
 * $ANTLR start limit_offset
 * UnQL.g:318:1: limit_offset[uSQL::SQLLimit *sqlLimit] : COMMA NUMBER ;
 */
static void
limit_offset(pUnQLParser ctx, uSQL::SQLLimit *sqlLimit)
{
    pANTLR3_COMMON_TOKEN    NUMBER8;

    /* Initialize rule variables
     */

    NUMBER8       = NULL;

    {
        // UnQL.g:319:2: ( COMMA NUMBER )
        // UnQL.g:319:4: COMMA NUMBER
        {
             MATCHT(COMMA, &FOLLOW_COMMA_in_limit_offset622);
            if  (HASEXCEPTION())
            {
                goto rulelimit_offsetEx;
            }


            NUMBER8 = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_limit_offset624);
            if  (HASEXCEPTION())
            {
                goto rulelimit_offsetEx;
            }


            {

                		sqlLimit->setOffset(CG_ANTLR3_STRING_2_INT((NUMBER8->getText(NUMBER8))));
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulelimit_offsetEx; /* Prevent compiler warnings */
    rulelimit_offsetEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end limit_offset */

/**
 * $ANTLR start offset_section
 * UnQL.g:324:1: offset_section returns [uSQL::SQLOffset *sqlOffset] : OFFSET NUMBER ;
 */
static uSQL::SQLOffset *
offset_section(pUnQLParser ctx)
{
    uSQL::SQLOffset * sqlOffset;


    pANTLR3_COMMON_TOKEN    NUMBER9;

    /* Initialize rule variables
     */


    		sqlOffset = new uSQL::SQLOffset();
    	
    NUMBER9       = NULL;

    {
        // UnQL.g:328:2: ( OFFSET NUMBER )
        // UnQL.g:328:4: OFFSET NUMBER
        {
             MATCHT(OFFSET, &FOLLOW_OFFSET_in_offset_section647);
            if  (HASEXCEPTION())
            {
                goto ruleoffset_sectionEx;
            }


            NUMBER9 = (pANTLR3_COMMON_TOKEN) MATCHT(NUMBER, &FOLLOW_NUMBER_in_offset_section649);
            if  (HASEXCEPTION())
            {
                goto ruleoffset_sectionEx;
            }


            {

                		sqlOffset->setValue(CG_ANTLR3_STRING_2_INT((NUMBER9->getText(NUMBER9))));
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleoffset_sectionEx; /* Prevent compiler warnings */
    ruleoffset_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlOffset;
}
/* $ANTLR end offset_section */

/**
 * $ANTLR start value
 * UnQL.g:334:1: value : ID ;
 */
static void
value(pUnQLParser ctx)
{
    /* Initialize rule variables
     */

    {
        // UnQL.g:335:2: ( ID )
        // UnQL.g:335:4: ID
        {
             MATCHT(ID, &FOLLOW_ID_in_value665);
            if  (HASEXCEPTION())
            {
                goto rulevalueEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulevalueEx; /* Prevent compiler warnings */
    rulevalueEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end value */

/**
 * $ANTLR start name
 * UnQL.g:338:1: name : ID ;
 */
static UnQLParser_name_return
name(pUnQLParser ctx)
{
    UnQLParser_name_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // UnQL.g:339:2: ( ID )
        // UnQL.g:339:4: ID
        {
             MATCHT(ID, &FOLLOW_ID_in_name677);
            if  (HASEXCEPTION())
            {
                goto rulenameEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulenameEx; /* Prevent compiler warnings */
    rulenameEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end name */

/**
 * $ANTLR start collection_name
 * UnQL.g:342:1: collection_name : ( ID | string_literal );
 */
static UnQLParser_collection_name_return
collection_name(pUnQLParser ctx)
{
    UnQLParser_collection_name_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        {
            //  UnQL.g:343:2: ( ID | string_literal )

            ANTLR3_UINT32 alt18;

            alt18=2;

            switch ( LA(1) )
            {
            case ID:
            	{
            		alt18=1;
            	}
                break;
            case STRING:
            	{
            		alt18=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 18;
                EXCEPTION->state        = 0;


                goto rulecollection_nameEx;

            }

            switch (alt18)
            {
        	case 1:
        	    // UnQL.g:343:4: ID
        	    {
        	         MATCHT(ID, &FOLLOW_ID_in_collection_name688);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecollection_nameEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // UnQL.g:344:4: string_literal
        	    {
        	        FOLLOWPUSH(FOLLOW_string_literal_in_collection_name693);
        	        string_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecollection_nameEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulecollection_nameEx; /* Prevent compiler warnings */
    rulecollection_nameEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end collection_name */

/**
 * $ANTLR start expression
 * UnQL.g:347:1: expression[uSQL::SQLExpression *parentSqlExpr] : ( integer_literal | real_literal | string_literal | true_literal | false_literal | '{' ( dictionary_literal[parentSqlExpr] ) ( COMMA dictionary_literal[parentSqlExpr] )* '}' | '[' array_literal[parentSqlExpr] ( COMMA array_literal[parentSqlExpr] )* ']' );
 */
static void
expression(pUnQLParser ctx, uSQL::SQLExpression *parentSqlExpr)
{
    UnQLParser_integer_literal_return integer_literal10;
    #undef	RETURN_TYPE_integer_literal10
    #define	RETURN_TYPE_integer_literal10 UnQLParser_integer_literal_return

    UnQLParser_real_literal_return real_literal11;
    #undef	RETURN_TYPE_real_literal11
    #define	RETURN_TYPE_real_literal11 UnQLParser_real_literal_return

    UnQLParser_string_literal_return string_literal12;
    #undef	RETURN_TYPE_string_literal12
    #define	RETURN_TYPE_string_literal12 UnQLParser_string_literal_return

    UnQLParser_true_literal_return true_literal13;
    #undef	RETURN_TYPE_true_literal13
    #define	RETURN_TYPE_true_literal13 UnQLParser_true_literal_return

    UnQLParser_false_literal_return false_literal14;
    #undef	RETURN_TYPE_false_literal14
    #define	RETURN_TYPE_false_literal14 UnQLParser_false_literal_return

    /* Initialize rule variables
     */

    {
        {
            //  UnQL.g:349:2: ( integer_literal | real_literal | string_literal | true_literal | false_literal | '{' ( dictionary_literal[parentSqlExpr] ) ( COMMA dictionary_literal[parentSqlExpr] )* '}' | '[' array_literal[parentSqlExpr] ( COMMA array_literal[parentSqlExpr] )* ']' )

            ANTLR3_UINT32 alt21;

            alt21=7;

            switch ( LA(1) )
            {
            case NUMBER:
            	{
            		alt21=1;
            	}
                break;
            case FLOAT:
            	{
            		alt21=2;
            	}
                break;
            case STRING:
            	{
            		alt21=3;
            	}
                break;
            case 86:
            	{
            		alt21=4;
            	}
                break;
            case 85:
            	{
            		alt21=5;
            	}
                break;
            case 87:
            	{
            		alt21=6;
            	}
                break;
            case 83:
            	{
            		alt21=7;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 21;
                EXCEPTION->state        = 0;


                goto ruleexpressionEx;

            }

            switch (alt21)
            {
        	case 1:
        	    // UnQL.g:349:4: integer_literal
        	    {
        	        FOLLOWPUSH(FOLLOW_integer_literal_in_expression709);
        	        integer_literal10=integer_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }


        	        {

        	            		uSQL::SQLExpression *sqlExpr = new uSQL::SQLExpression();
        	            		sqlExpr->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, integer_literal10.start, integer_literal10.stop))
        	            ));
        	            		parentSqlExpr->addExpression(sqlExpr);
        	            	  
        	        }


        	    }
        	    break;
        	case 2:
        	    // UnQL.g:354:4: real_literal
        	    {
        	        FOLLOWPUSH(FOLLOW_real_literal_in_expression716);
        	        real_literal11=real_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }


        	        {

        	            		uSQL::SQLExpression *sqlExpr = new uSQL::SQLExpression();
        	            		sqlExpr->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, real_literal11.start, real_literal11.stop))
        	            ));
        	            		parentSqlExpr->addExpression(sqlExpr);
        	            	  
        	        }


        	    }
        	    break;
        	case 3:
        	    // UnQL.g:359:4: string_literal
        	    {
        	        FOLLOWPUSH(FOLLOW_string_literal_in_expression723);
        	        string_literal12=string_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }


        	        {

        	            		uSQL::SQLExpression *sqlExpr = new uSQL::SQLExpression();
        	            		sqlExpr->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, string_literal12.start, string_literal12.stop))
        	            ));
        	            		parentSqlExpr->addExpression(sqlExpr);
        	            	  
        	        }


        	    }
        	    break;
        	case 4:
        	    // UnQL.g:364:4: true_literal
        	    {
        	        FOLLOWPUSH(FOLLOW_true_literal_in_expression730);
        	        true_literal13=true_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }


        	        {

        	            		uSQL::SQLExpression *sqlExpr = new uSQL::SQLExpression();
        	            		sqlExpr->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, true_literal13.start, true_literal13.stop))
        	            ));
        	            		parentSqlExpr->addExpression(sqlExpr);
        	            	  
        	        }


        	    }
        	    break;
        	case 5:
        	    // UnQL.g:369:4: false_literal
        	    {
        	        FOLLOWPUSH(FOLLOW_false_literal_in_expression737);
        	        false_literal14=false_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }


        	        {

        	            		uSQL::SQLExpression *sqlExpr = new uSQL::SQLExpression();
        	            		sqlExpr->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, false_literal14.start, false_literal14.stop))
        	            ));
        	            		parentSqlExpr->addExpression(sqlExpr);
        	            	  
        	        }


        	    }
        	    break;
        	case 6:
        	    // UnQL.g:374:4: '{' ( dictionary_literal[parentSqlExpr] ) ( COMMA dictionary_literal[parentSqlExpr] )* '}'
        	    {
        	         MATCHT(87, &FOLLOW_87_in_expression744);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }


        	        // UnQL.g:374:8: ( dictionary_literal[parentSqlExpr] )
        	        // UnQL.g:374:9: dictionary_literal[parentSqlExpr]
        	        {
        	            FOLLOWPUSH(FOLLOW_dictionary_literal_in_expression747);
        	            dictionary_literal(ctx, parentSqlExpr);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleexpressionEx;
        	            }


        	        }


        	        // UnQL.g:374:44: ( COMMA dictionary_literal[parentSqlExpr] )*

        	        for (;;)
        	        {
        	            int alt19=2;
        	            switch ( LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt19=1;
        	            	}
        	                break;

        	            }

        	            switch (alt19)
        	            {
        	        	case 1:
        	        	    // UnQL.g:374:45: COMMA dictionary_literal[parentSqlExpr]
        	        	    {
        	        	         MATCHT(COMMA, &FOLLOW_COMMA_in_expression752);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexpressionEx;
        	        	        }


        	        	        FOLLOWPUSH(FOLLOW_dictionary_literal_in_expression754);
        	        	        dictionary_literal(ctx, parentSqlExpr);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexpressionEx;
        	        	        }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop19;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop19: ; /* Jump out to here if this rule does not match */


        	         MATCHT(88, &FOLLOW_88_in_expression759);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }


        	    }
        	    break;
        	case 7:
        	    // UnQL.g:375:4: '[' array_literal[parentSqlExpr] ( COMMA array_literal[parentSqlExpr] )* ']'
        	    {
        	         MATCHT(83, &FOLLOW_83_in_expression764);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_array_literal_in_expression766);
        	        array_literal(ctx, parentSqlExpr);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }


        	        // UnQL.g:375:37: ( COMMA array_literal[parentSqlExpr] )*

        	        for (;;)
        	        {
        	            int alt20=2;
        	            switch ( LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt20=1;
        	            	}
        	                break;

        	            }

        	            switch (alt20)
        	            {
        	        	case 1:
        	        	    // UnQL.g:375:38: COMMA array_literal[parentSqlExpr]
        	        	    {
        	        	         MATCHT(COMMA, &FOLLOW_COMMA_in_expression770);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexpressionEx;
        	        	        }


        	        	        FOLLOWPUSH(FOLLOW_array_literal_in_expression772);
        	        	        array_literal(ctx, parentSqlExpr);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexpressionEx;
        	        	        }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop20;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop20: ; /* Jump out to here if this rule does not match */


        	         MATCHT(84, &FOLLOW_84_in_expression778);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end expression */

/**
 * $ANTLR start property
 * UnQL.g:378:1: property : ID ;
 */
static UnQLParser_property_return
property(pUnQLParser ctx)
{
    UnQLParser_property_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // UnQL.g:379:2: ( ID )
        // UnQL.g:379:4: ID
        {
             MATCHT(ID, &FOLLOW_ID_in_property789);
            if  (HASEXCEPTION())
            {
                goto rulepropertyEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulepropertyEx; /* Prevent compiler warnings */
    rulepropertyEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end property */

/**
 * $ANTLR start integer_literal
 * UnQL.g:382:1: integer_literal : NUMBER ;
 */
static UnQLParser_integer_literal_return
integer_literal(pUnQLParser ctx)
{
    UnQLParser_integer_literal_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // UnQL.g:383:2: ( NUMBER )
        // UnQL.g:383:4: NUMBER
        {
             MATCHT(NUMBER, &FOLLOW_NUMBER_in_integer_literal801);
            if  (HASEXCEPTION())
            {
                goto ruleinteger_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleinteger_literalEx; /* Prevent compiler warnings */
    ruleinteger_literalEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end integer_literal */

/**
 * $ANTLR start real_literal
 * UnQL.g:386:1: real_literal : FLOAT ;
 */
static UnQLParser_real_literal_return
real_literal(pUnQLParser ctx)
{
    UnQLParser_real_literal_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // UnQL.g:387:2: ( FLOAT )
        // UnQL.g:387:4: FLOAT
        {
             MATCHT(FLOAT, &FOLLOW_FLOAT_in_real_literal812);
            if  (HASEXCEPTION())
            {
                goto rulereal_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulereal_literalEx; /* Prevent compiler warnings */
    rulereal_literalEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end real_literal */

/**
 * $ANTLR start string_literal
 * UnQL.g:390:1: string_literal : STRING ;
 */
static UnQLParser_string_literal_return
string_literal(pUnQLParser ctx)
{
    UnQLParser_string_literal_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // UnQL.g:391:2: ( STRING )
        // UnQL.g:391:4: STRING
        {
             MATCHT(STRING, &FOLLOW_STRING_in_string_literal823);
            if  (HASEXCEPTION())
            {
                goto rulestring_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulestring_literalEx; /* Prevent compiler warnings */
    rulestring_literalEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end string_literal */

/**
 * $ANTLR start true_literal
 * UnQL.g:394:1: true_literal : 'true' ;
 */
static UnQLParser_true_literal_return
true_literal(pUnQLParser ctx)
{
    UnQLParser_true_literal_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // UnQL.g:395:2: ( 'true' )
        // UnQL.g:395:4: 'true'
        {
             MATCHT(86, &FOLLOW_86_in_true_literal834);
            if  (HASEXCEPTION())
            {
                goto ruletrue_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruletrue_literalEx; /* Prevent compiler warnings */
    ruletrue_literalEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end true_literal */

/**
 * $ANTLR start false_literal
 * UnQL.g:398:1: false_literal : 'false' ;
 */
static UnQLParser_false_literal_return
false_literal(pUnQLParser ctx)
{
    UnQLParser_false_literal_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // UnQL.g:399:2: ( 'false' )
        // UnQL.g:399:4: 'false'
        {
             MATCHT(85, &FOLLOW_85_in_false_literal846);
            if  (HASEXCEPTION())
            {
                goto rulefalse_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulefalse_literalEx; /* Prevent compiler warnings */
    rulefalse_literalEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end false_literal */

/**
 * $ANTLR start dictionary_literal
 * UnQL.g:402:1: dictionary_literal[uSQL::SQLExpression *parentSqlExpr] : name ':' expression[valueParentExpr] ;
 */
static void
dictionary_literal(pUnQLParser ctx, uSQL::SQLExpression *parentSqlExpr)
{
    UnQLParser_name_return name15;
    #undef	RETURN_TYPE_name15
    #define	RETURN_TYPE_name15 UnQLParser_name_return

    /* Initialize rule variables
     */


    		uSQL::SQLExpression *valueParentExpr = new uSQL::SQLExpression();
    	
    {
        // UnQL.g:409:2: ( name ':' expression[valueParentExpr] )
        // UnQL.g:409:4: name ':' expression[valueParentExpr]
        {
            FOLLOWPUSH(FOLLOW_name_in_dictionary_literal871);
            name15=name(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledictionary_literalEx;
            }


             MATCHT(82, &FOLLOW_82_in_dictionary_literal873);
            if  (HASEXCEPTION())
            {
                goto ruledictionary_literalEx;
            }


            FOLLOWPUSH(FOLLOW_expression_in_dictionary_literal875);
            expression(ctx, valueParentExpr);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledictionary_literalEx;
            }


            {

                		uSQL::SQLExpression *valueExpr = valueParentExpr->getExpression(0);
                		uSQL::SQLExpression *sqlExpr = new uSQL::SQLExpression();
                		sqlExpr->setName(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, name15.start, name15.stop))
                ));
                		sqlExpr->setValue(valueExpr ? valueExpr->getValue() : "");
                		parentSqlExpr->addExpression(sqlExpr);
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruledictionary_literalEx; /* Prevent compiler warnings */
    ruledictionary_literalEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
            else
            {
                {

                    		delete valueParentExpr;
                    	
                }
            }


    return ;
}
/* $ANTLR end dictionary_literal */

/**
 * $ANTLR start array_literal
 * UnQL.g:418:1: array_literal[uSQL::SQLExpression *parentSqlExpr] : expression[valueParentExpr] ;
 */
static void
array_literal(pUnQLParser ctx, uSQL::SQLExpression *parentSqlExpr)
{
    /* Initialize rule variables
     */


    		uSQL::SQLExpression *valueParentExpr = new uSQL::SQLExpression();
    	
    {
        // UnQL.g:425:2: ( expression[valueParentExpr] )
        // UnQL.g:425:4: expression[valueParentExpr]
        {
            FOLLOWPUSH(FOLLOW_expression_in_array_literal903);
            expression(ctx, valueParentExpr);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulearray_literalEx;
            }


            {

                 		uSQL::SQLExpression *valueExpr = valueParentExpr->getExpression(0);
                		uSQL::SQLExpression *sqlExpr = new uSQL::SQLExpression();
                		sqlExpr->setValue(valueExpr ? valueExpr->getValue() : "");
                		parentSqlExpr->addExpression(sqlExpr);
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulearray_literalEx; /* Prevent compiler warnings */
    rulearray_literalEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
            else
            {
                {

                    		delete valueParentExpr;
                    	
                }
            }


    return ;
}
/* $ANTLR end array_literal */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */






/* End of code
 * =============================================================================
 */
