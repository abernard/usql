/** \file
 *  This C source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : UnQL.g
 *     -                            On : 2011-12-02 19:03:36
 *     -                for the parser : UnQLParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "UnQLParser.h"
/* ----------------------------------------- */

/******************************************************************
*
* uSQL for C++
*
* UnQL.g
*
* Copyright (C) Satoshi Konno 2011
*
* This is licensed under BSD-style license, see file COPYING.
*
******************************************************************/




/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pUnQLParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pUnQLParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pUnQLParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pUnQLParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */

#undef	    PARSER
#undef	    RECOGNIZER
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO
#undef		DBG

#define	    PARSER				ctx->pParser
#define	    RECOGNIZER				PARSER->rec
#define	    PSRSTATE				RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)			RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT				PARSER->tstream
#define	    STRSTREAM				INPUT
#define	    ISTREAM				INPUT->istream
#define	    INDEX()				ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()			(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				PSRSTATE->exception
#define	    MATCHT(t, fs)			RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()				RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK				PSRSTATE->following
#ifdef  SKIP_FOLLOW_SETS
#define	    FOLLOWPUSH(x)
#define	    FOLLOWPOP()
#else
#define	    FOLLOWPUSH(x)			FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()				FOLLOWSTACK->pop(FOLLOWSTACK)
#endif
#define	    PRECOVER()				RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()			RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)				INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)				INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()				ISTREAM->consume(ISTREAM)
#define	    MARK()				ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define	    SEEK(n)				ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY			PSRSTATE->errorRecovery
#define	    FAILEDFLAG				PSRSTATE->failed
#define	    HASFAILED()				(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING			PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   UnQLParserTokenNames[93+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>",
        (pANTLR3_UINT8) "<UP>",
        (pANTLR3_UINT8) "A",
        (pANTLR3_UINT8) "ALL",
        (pANTLR3_UINT8) "ANCESTOR",
        (pANTLR3_UINT8) "AND",
        (pANTLR3_UINT8) "AS",
        (pANTLR3_UINT8) "ASC",
        (pANTLR3_UINT8) "ASTERISK",
        (pANTLR3_UINT8) "ASYNC",
        (pANTLR3_UINT8) "B",
        (pANTLR3_UINT8) "BY",
        (pANTLR3_UINT8) "C",
        (pANTLR3_UINT8) "CHAR",
        (pANTLR3_UINT8) "COLLECTION",
        (pANTLR3_UINT8) "COLLECTION_INDEX",
        (pANTLR3_UINT8) "COMMA",
        (pANTLR3_UINT8) "CREATE",
        (pANTLR3_UINT8) "D",
        (pANTLR3_UINT8) "DELETE",
        (pANTLR3_UINT8) "DESC",
        (pANTLR3_UINT8) "DISTINCT",
        (pANTLR3_UINT8) "DROP",
        (pANTLR3_UINT8) "E",
        (pANTLR3_UINT8) "EACH",
        (pANTLR3_UINT8) "EQ",
        (pANTLR3_UINT8) "ESC_SEQ",
        (pANTLR3_UINT8) "EXCEPT",
        (pANTLR3_UINT8) "EXPONENT",
        (pANTLR3_UINT8) "EscapeSequence",
        (pANTLR3_UINT8) "F",
        (pANTLR3_UINT8) "FLATTEN",
        (pANTLR3_UINT8) "FLOAT",
        (pANTLR3_UINT8) "FROM",
        (pANTLR3_UINT8) "G",
        (pANTLR3_UINT8) "GE",
        (pANTLR3_UINT8) "GROUP",
        (pANTLR3_UINT8) "GT",
        (pANTLR3_UINT8) "H",
        (pANTLR3_UINT8) "HAVING",
        (pANTLR3_UINT8) "HEX_DIGIT",
        (pANTLR3_UINT8) "I",
        (pANTLR3_UINT8) "ID",
        (pANTLR3_UINT8) "IN",
        (pANTLR3_UINT8) "INSERT",
        (pANTLR3_UINT8) "INTERSECT",
        (pANTLR3_UINT8) "INTO",
        (pANTLR3_UINT8) "IS",
        (pANTLR3_UINT8) "J",
        (pANTLR3_UINT8) "K",
        (pANTLR3_UINT8) "L",
        (pANTLR3_UINT8) "LE",
        (pANTLR3_UINT8) "LIMIT",
        (pANTLR3_UINT8) "M",
        (pANTLR3_UINT8) "N",
        (pANTLR3_UINT8) "NOTEQ",
        (pANTLR3_UINT8) "NUMBER",
        (pANTLR3_UINT8) "O",
        (pANTLR3_UINT8) "OCTAL_ESC",
        (pANTLR3_UINT8) "OFFSET",
        (pANTLR3_UINT8) "OPTIONS",
        (pANTLR3_UINT8) "OP_LT",
        (pANTLR3_UINT8) "OR",
        (pANTLR3_UINT8) "ORDER",
        (pANTLR3_UINT8) "P",
        (pANTLR3_UINT8) "Q",
        (pANTLR3_UINT8) "R",
        (pANTLR3_UINT8) "S",
        (pANTLR3_UINT8) "SELECT",
        (pANTLR3_UINT8) "SET",
        (pANTLR3_UINT8) "STRING",
        (pANTLR3_UINT8) "SYNC",
        (pANTLR3_UINT8) "T",
        (pANTLR3_UINT8) "U",
        (pANTLR3_UINT8) "UNICODE_ESC",
        (pANTLR3_UINT8) "UNION",
        (pANTLR3_UINT8) "UPDATE",
        (pANTLR3_UINT8) "V",
        (pANTLR3_UINT8) "VALUE",
        (pANTLR3_UINT8) "W",
        (pANTLR3_UINT8) "WHERE",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "X",
        (pANTLR3_UINT8) "Y",
        (pANTLR3_UINT8) "Z",
        (pANTLR3_UINT8) "'('",
        (pANTLR3_UINT8) "')'",
        (pANTLR3_UINT8) "':'",
        (pANTLR3_UINT8) "'='",
        (pANTLR3_UINT8) "'['",
        (pANTLR3_UINT8) "']'",
        (pANTLR3_UINT8) "'false'",
        (pANTLR3_UINT8) "'true'",
        (pANTLR3_UINT8) "'{'",
        (pANTLR3_UINT8) "'}'"
       };



// Forward declare the locally static matching functions we have generated.
//
static 
 void
	statement    (pUnQLParser ctx, uSQL::SQLParser *sqlParser);
static 
 void
	select_stmt    (pUnQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
	select_core    (pUnQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 uSQL::SQLFrom *
	from_section    (pUnQLParser ctx);
static 
 void
	table_name    (pUnQLParser ctx, uSQL::SQLFrom *sqlFrom);
static 
 uSQL::SQLDataSource *
	data_source    (pUnQLParser ctx);
static 
 uSQL::SQLGroupBy *
	grouping_section    (pUnQLParser ctx);
static 
 uSQL::SQLHaving *
	having_section    (pUnQLParser ctx);
static 
 uSQL::SQLOrderBy *
	sorting_section    (pUnQLParser ctx);
static 
 void
	sorting_item    (pUnQLParser ctx, uSQL::SQLOrderBy *sqlOrders);
static 
 UnQLParser_sorting_specification_return
	sorting_specification    (pUnQLParser ctx);
static 
 uSQL::SQLLimit *
	limit_section    (pUnQLParser ctx);
static 
 uSQL::SQLOffset *
	offset_section    (pUnQLParser ctx);
static 
 void
	create_collection_stmt    (pUnQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
	drop_collection_stmt    (pUnQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
	create_index_stmt    (pUnQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
	drop_index_stmt    (pUnQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
	insert_stmt    (pUnQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
	update_stmt    (pUnQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
	property_section    (pUnQLParser ctx, uSQL::SQLValue *sqlValue);
static 
 void
	delete_stmt    (pUnQLParser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
	expression    (pUnQLParser ctx, uSQL::SQLExpression *parentSqlExpr);
static 
 uSQL::SQLExpression *
	expression_atom    (pUnQLParser ctx);
static 
 UnQLParser_property_return
	property    (pUnQLParser ctx);
static 
 UnQLParser_integer_literal_return
	integer_literal    (pUnQLParser ctx);
static 
 UnQLParser_real_literal_return
	real_literal    (pUnQLParser ctx);
static 
 UnQLParser_string_literal_return
	string_literal    (pUnQLParser ctx);
static 
 UnQLParser_true_literal_return
	true_literal    (pUnQLParser ctx);
static 
 UnQLParser_false_literal_return
	false_literal    (pUnQLParser ctx);
static 
 void
	dictionary_literal    (pUnQLParser ctx, uSQL::SQLExpression *parentSqlExpr);
static 
 void
	array_literal    (pUnQLParser ctx, uSQL::SQLExpression *parentSqlExpr);
static 
 uSQL::SQLFunction *
	function_name    (pUnQLParser ctx);
static 
 void
	function_literal    (pUnQLParser ctx, uSQL::SQLExpression *parentSqlExpr);
static 
 uSQL::SQLOperator *
	binary_operator    (pUnQLParser ctx);
static 
 bool
	sync_operator    (pUnQLParser ctx);
static 
 void
	compound_operator    (pUnQLParser ctx);
static 
 void
	condition_operator    (pUnQLParser ctx);
static 
 void
	value    (pUnQLParser ctx);
static 
 UnQLParser_name_return
	name    (pUnQLParser ctx);
static 
 uSQL::SQLCollection *
	collection_section    (pUnQLParser ctx);
static 
 UnQLParser_collection_name_return
	collection_name    (pUnQLParser ctx);
static 
 uSQL::SQLIndex *
	index_section    (pUnQLParser ctx);
static 
 UnQLParser_index_name_return
	index_name    (pUnQLParser ctx);
static 
 uSQL::SQLWhere *
	where_section    (pUnQLParser ctx);
static void	UnQLParserFree(pUnQLParser ctx);
static void     UnQLParserReset (pUnQLParser ctx);

/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed.
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "UnQL.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new UnQLParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pUnQLParser
UnQLParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return UnQLParserNewSSD(instream, NULL);
}

/** \brief Create a new UnQLParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pUnQLParser
UnQLParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pUnQLParser ctx;	    /* Context structure we will build and return   */

    ctx	= (pUnQLParser) ANTLR3_CALLOC(1, sizeof(UnQLParser));

    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in UnQLParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our UnQLParser interface
     */
    ctx->statement	= statement;
    ctx->select_stmt	= select_stmt;
    ctx->select_core	= select_core;
    ctx->from_section	= from_section;
    ctx->table_name	= table_name;
    ctx->data_source	= data_source;
    ctx->grouping_section	= grouping_section;
    ctx->having_section	= having_section;
    ctx->sorting_section	= sorting_section;
    ctx->sorting_item	= sorting_item;
    ctx->sorting_specification	= sorting_specification;
    ctx->limit_section	= limit_section;
    ctx->offset_section	= offset_section;
    ctx->create_collection_stmt	= create_collection_stmt;
    ctx->drop_collection_stmt	= drop_collection_stmt;
    ctx->create_index_stmt	= create_index_stmt;
    ctx->drop_index_stmt	= drop_index_stmt;
    ctx->insert_stmt	= insert_stmt;
    ctx->update_stmt	= update_stmt;
    ctx->property_section	= property_section;
    ctx->delete_stmt	= delete_stmt;
    ctx->expression	= expression;
    ctx->expression_atom	= expression_atom;
    ctx->property	= property;
    ctx->integer_literal	= integer_literal;
    ctx->real_literal	= real_literal;
    ctx->string_literal	= string_literal;
    ctx->true_literal	= true_literal;
    ctx->false_literal	= false_literal;
    ctx->dictionary_literal	= dictionary_literal;
    ctx->array_literal	= array_literal;
    ctx->function_name	= function_name;
    ctx->function_literal	= function_literal;
    ctx->binary_operator	= binary_operator;
    ctx->sync_operator	= sync_operator;
    ctx->compound_operator	= compound_operator;
    ctx->condition_operator	= condition_operator;
    ctx->value	= value;
    ctx->name	= name;
    ctx->collection_section	= collection_section;
    ctx->collection_name	= collection_name;
    ctx->index_section	= index_section;
    ctx->index_name	= index_name;
    ctx->where_section	= where_section;
    ctx->free			= UnQLParserFree;
    ctx->reset			= UnQLParserReset;
    ctx->getGrammarFileName	= getGrammarFileName;

    /* Install the scope pushing methods.
     */

    /* Install the token table
     */
    PSRSTATE->tokenNames   = UnQLParserTokenNames;


    /* Return the newly built parser to the caller
     */
    return  ctx;
}

static void
UnQLParserReset (pUnQLParser ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** Free the parser resources
 */
 static void
 UnQLParserFree(pUnQLParser ctx)
 {
    /* Free any scope memory
     */

	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);


    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames()
{
        return UnQLParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: FOLLOW_select_stmt_in_statement61  */
static	ANTLR3_BITWORD FOLLOW_select_stmt_in_statement61_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_select_stmt_in_statement61	= { FOLLOW_select_stmt_in_statement61_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_create_collection_stmt_in_statement67  */
static	ANTLR3_BITWORD FOLLOW_create_collection_stmt_in_statement67_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_create_collection_stmt_in_statement67	= { FOLLOW_create_collection_stmt_in_statement67_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_drop_collection_stmt_in_statement73  */
static	ANTLR3_BITWORD FOLLOW_drop_collection_stmt_in_statement73_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_drop_collection_stmt_in_statement73	= { FOLLOW_drop_collection_stmt_in_statement73_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_create_index_stmt_in_statement79  */
static	ANTLR3_BITWORD FOLLOW_create_index_stmt_in_statement79_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_create_index_stmt_in_statement79	= { FOLLOW_create_index_stmt_in_statement79_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_drop_index_stmt_in_statement85  */
static	ANTLR3_BITWORD FOLLOW_drop_index_stmt_in_statement85_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_drop_index_stmt_in_statement85	= { FOLLOW_drop_index_stmt_in_statement85_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_insert_stmt_in_statement91  */
static	ANTLR3_BITWORD FOLLOW_insert_stmt_in_statement91_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_insert_stmt_in_statement91	= { FOLLOW_insert_stmt_in_statement91_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_update_stmt_in_statement97  */
static	ANTLR3_BITWORD FOLLOW_update_stmt_in_statement97_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_update_stmt_in_statement97	= { FOLLOW_update_stmt_in_statement97_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_delete_stmt_in_statement103  */
static	ANTLR3_BITWORD FOLLOW_delete_stmt_in_statement103_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_delete_stmt_in_statement103	= { FOLLOW_delete_stmt_in_statement103_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_select_core_in_select_stmt127  */
static	ANTLR3_BITWORD FOLLOW_select_core_in_select_stmt127_bits[]	= { ANTLR3_UINT64_LIT(0x0440100400000002), ANTLR3_UINT64_LIT(0x0000000060000102) };
static  ANTLR3_BITSET_LIST FOLLOW_select_core_in_select_stmt127	= { FOLLOW_select_core_in_select_stmt127_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sorting_section_in_select_stmt133  */
static	ANTLR3_BITWORD FOLLOW_sorting_section_in_select_stmt133_bits[]	= { ANTLR3_UINT64_LIT(0x0440100400000002), ANTLR3_UINT64_LIT(0x0000000060000100) };
static  ANTLR3_BITSET_LIST FOLLOW_sorting_section_in_select_stmt133	= { FOLLOW_sorting_section_in_select_stmt133_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_limit_section_in_select_stmt140  */
static	ANTLR3_BITWORD FOLLOW_limit_section_in_select_stmt140_bits[]	= { ANTLR3_UINT64_LIT(0x0400100400000002), ANTLR3_UINT64_LIT(0x0000000060000100) };
static  ANTLR3_BITSET_LIST FOLLOW_limit_section_in_select_stmt140	= { FOLLOW_limit_section_in_select_stmt140_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_offset_section_in_select_stmt147  */
static	ANTLR3_BITWORD FOLLOW_offset_section_in_select_stmt147_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_offset_section_in_select_stmt147	= { FOLLOW_offset_section_in_select_stmt147_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SELECT_in_select_core172  */
static	ANTLR3_BITWORD FOLLOW_SELECT_in_select_core172_bits[]	= { ANTLR3_UINT64_LIT(0x0400124C00800122), ANTLR3_UINT64_LIT(0x00000000E8040100) };
static  ANTLR3_BITSET_LIST FOLLOW_SELECT_in_select_core172	= { FOLLOW_SELECT_in_select_core172_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_select_core184  */
static	ANTLR3_BITWORD FOLLOW_expression_in_select_core184_bits[]	= { ANTLR3_UINT64_LIT(0x0000024800000102), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_select_core184	= { FOLLOW_expression_in_select_core184_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AS_in_select_core190  */
static	ANTLR3_BITWORD FOLLOW_AS_in_select_core190_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_AS_in_select_core190	= { FOLLOW_AS_in_select_core190_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_select_core192  */
static	ANTLR3_BITWORD FOLLOW_name_in_select_core192_bits[]	= { ANTLR3_UINT64_LIT(0x0000024800000002), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_select_core192	= { FOLLOW_name_in_select_core192_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_from_section_in_select_core205  */
static	ANTLR3_BITWORD FOLLOW_from_section_in_select_core205_bits[]	= { ANTLR3_UINT64_LIT(0x0000024000000002), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_from_section_in_select_core205	= { FOLLOW_from_section_in_select_core205_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_where_section_in_select_core218  */
static	ANTLR3_BITWORD FOLLOW_where_section_in_select_core218_bits[]	= { ANTLR3_UINT64_LIT(0x0000024000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_where_section_in_select_core218	= { FOLLOW_where_section_in_select_core218_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_grouping_section_in_select_core230  */
static	ANTLR3_BITWORD FOLLOW_grouping_section_in_select_core230_bits[]	= { ANTLR3_UINT64_LIT(0x0000020000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_grouping_section_in_select_core230	= { FOLLOW_grouping_section_in_select_core230_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_having_section_in_select_core243  */
static	ANTLR3_BITWORD FOLLOW_having_section_in_select_core243_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_having_section_in_select_core243	= { FOLLOW_having_section_in_select_core243_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FROM_in_from_section273  */
static	ANTLR3_BITWORD FOLLOW_FROM_in_from_section273_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_FROM_in_from_section273	= { FOLLOW_FROM_in_from_section273_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_table_name_in_from_section275  */
static	ANTLR3_BITWORD FOLLOW_table_name_in_from_section275_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_table_name_in_from_section275	= { FOLLOW_table_name_in_from_section275_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_from_section280  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_from_section280_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_from_section280	= { FOLLOW_COMMA_in_from_section280_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_table_name_in_from_section282  */
static	ANTLR3_BITWORD FOLLOW_table_name_in_from_section282_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_table_name_in_from_section282	= { FOLLOW_table_name_in_from_section282_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_data_source_in_table_name302  */
static	ANTLR3_BITWORD FOLLOW_data_source_in_table_name302_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_data_source_in_table_name302	= { FOLLOW_data_source_in_table_name302_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_collection_name_in_data_source325  */
static	ANTLR3_BITWORD FOLLOW_collection_name_in_data_source325_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_collection_name_in_data_source325	= { FOLLOW_collection_name_in_data_source325_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GROUP_in_grouping_section348  */
static	ANTLR3_BITWORD FOLLOW_GROUP_in_grouping_section348_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_GROUP_in_grouping_section348	= { FOLLOW_GROUP_in_grouping_section348_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BY_in_grouping_section350  */
static	ANTLR3_BITWORD FOLLOW_BY_in_grouping_section350_bits[]	= { ANTLR3_UINT64_LIT(0x0400100400000000), ANTLR3_UINT64_LIT(0x00000000E8000100) };
static  ANTLR3_BITSET_LIST FOLLOW_BY_in_grouping_section350	= { FOLLOW_BY_in_grouping_section350_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_grouping_section352  */
static	ANTLR3_BITWORD FOLLOW_expression_in_grouping_section352_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_grouping_section352	= { FOLLOW_expression_in_grouping_section352_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_grouping_section356  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_grouping_section356_bits[]	= { ANTLR3_UINT64_LIT(0x0400100400000000), ANTLR3_UINT64_LIT(0x00000000E8000100) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_grouping_section356	= { FOLLOW_COMMA_in_grouping_section356_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_grouping_section358  */
static	ANTLR3_BITWORD FOLLOW_expression_in_grouping_section358_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_grouping_section358	= { FOLLOW_expression_in_grouping_section358_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_HAVING_in_having_section383  */
static	ANTLR3_BITWORD FOLLOW_HAVING_in_having_section383_bits[]	= { ANTLR3_UINT64_LIT(0x0400100400000000), ANTLR3_UINT64_LIT(0x00000000E8000100) };
static  ANTLR3_BITSET_LIST FOLLOW_HAVING_in_having_section383	= { FOLLOW_HAVING_in_having_section383_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_having_section385  */
static	ANTLR3_BITWORD FOLLOW_expression_in_having_section385_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_having_section385	= { FOLLOW_expression_in_having_section385_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ORDER_in_sorting_section407  */
static	ANTLR3_BITWORD FOLLOW_ORDER_in_sorting_section407_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_ORDER_in_sorting_section407	= { FOLLOW_ORDER_in_sorting_section407_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BY_in_sorting_section409  */
static	ANTLR3_BITWORD FOLLOW_BY_in_sorting_section409_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_BY_in_sorting_section409	= { FOLLOW_BY_in_sorting_section409_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sorting_item_in_sorting_section411  */
static	ANTLR3_BITWORD FOLLOW_sorting_item_in_sorting_section411_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_sorting_item_in_sorting_section411	= { FOLLOW_sorting_item_in_sorting_section411_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_sorting_section415  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_sorting_section415_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_sorting_section415	= { FOLLOW_COMMA_in_sorting_section415_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sorting_item_in_sorting_section417  */
static	ANTLR3_BITWORD FOLLOW_sorting_item_in_sorting_section417_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_sorting_item_in_sorting_section417	= { FOLLOW_sorting_item_in_sorting_section417_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_property_in_sorting_item435  */
static	ANTLR3_BITWORD FOLLOW_property_in_sorting_item435_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000400202) };
static  ANTLR3_BITSET_LIST FOLLOW_property_in_sorting_item435	= { FOLLOW_property_in_sorting_item435_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sorting_specification_in_sorting_item438  */
static	ANTLR3_BITWORD FOLLOW_sorting_specification_in_sorting_item438_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_sorting_specification_in_sorting_item438	= { FOLLOW_sorting_specification_in_sorting_item438_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LIMIT_in_limit_section479  */
static	ANTLR3_BITWORD FOLLOW_LIMIT_in_limit_section479_bits[]	= { ANTLR3_UINT64_LIT(0x0400100400000000), ANTLR3_UINT64_LIT(0x0000000060000100) };
static  ANTLR3_BITSET_LIST FOLLOW_LIMIT_in_limit_section479	= { FOLLOW_LIMIT_in_limit_section479_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_atom_in_limit_section484  */
static	ANTLR3_BITWORD FOLLOW_expression_atom_in_limit_section484_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_atom_in_limit_section484	= { FOLLOW_expression_atom_in_limit_section484_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_limit_section486  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_limit_section486_bits[]	= { ANTLR3_UINT64_LIT(0x0400100400000000), ANTLR3_UINT64_LIT(0x0000000060000100) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_limit_section486	= { FOLLOW_COMMA_in_limit_section486_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_atom_in_limit_section492  */
static	ANTLR3_BITWORD FOLLOW_expression_atom_in_limit_section492_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_atom_in_limit_section492	= { FOLLOW_expression_atom_in_limit_section492_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_atom_in_offset_section517  */
static	ANTLR3_BITWORD FOLLOW_expression_atom_in_offset_section517_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_atom_in_offset_section517	= { FOLLOW_expression_atom_in_offset_section517_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CREATE_in_create_collection_stmt543  */
static	ANTLR3_BITWORD FOLLOW_CREATE_in_create_collection_stmt543_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_CREATE_in_create_collection_stmt543	= { FOLLOW_CREATE_in_create_collection_stmt543_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLLECTION_in_create_collection_stmt545  */
static	ANTLR3_BITWORD FOLLOW_COLLECTION_in_create_collection_stmt545_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_COLLECTION_in_create_collection_stmt545	= { FOLLOW_COLLECTION_in_create_collection_stmt545_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_collection_section_in_create_collection_stmt549  */
static	ANTLR3_BITWORD FOLLOW_collection_section_in_create_collection_stmt549_bits[]	= { ANTLR3_UINT64_LIT(0x4000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_collection_section_in_create_collection_stmt549	= { FOLLOW_collection_section_in_create_collection_stmt549_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OPTIONS_in_create_collection_stmt552  */
static	ANTLR3_BITWORD FOLLOW_OPTIONS_in_create_collection_stmt552_bits[]	= { ANTLR3_UINT64_LIT(0x0400100400000000), ANTLR3_UINT64_LIT(0x00000000E8000100) };
static  ANTLR3_BITSET_LIST FOLLOW_OPTIONS_in_create_collection_stmt552	= { FOLLOW_OPTIONS_in_create_collection_stmt552_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_create_collection_stmt554  */
static	ANTLR3_BITWORD FOLLOW_expression_in_create_collection_stmt554_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_create_collection_stmt554	= { FOLLOW_expression_in_create_collection_stmt554_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DROP_in_drop_collection_stmt581  */
static	ANTLR3_BITWORD FOLLOW_DROP_in_drop_collection_stmt581_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_DROP_in_drop_collection_stmt581	= { FOLLOW_DROP_in_drop_collection_stmt581_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLLECTION_in_drop_collection_stmt583  */
static	ANTLR3_BITWORD FOLLOW_COLLECTION_in_drop_collection_stmt583_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_COLLECTION_in_drop_collection_stmt583	= { FOLLOW_COLLECTION_in_drop_collection_stmt583_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_collection_section_in_drop_collection_stmt587  */
static	ANTLR3_BITWORD FOLLOW_collection_section_in_drop_collection_stmt587_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_collection_section_in_drop_collection_stmt587	= { FOLLOW_collection_section_in_drop_collection_stmt587_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CREATE_in_create_index_stmt612  */
static	ANTLR3_BITWORD FOLLOW_CREATE_in_create_index_stmt612_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_CREATE_in_create_index_stmt612	= { FOLLOW_CREATE_in_create_index_stmt612_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLLECTION_INDEX_in_create_index_stmt614  */
static	ANTLR3_BITWORD FOLLOW_COLLECTION_INDEX_in_create_index_stmt614_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_COLLECTION_INDEX_in_create_index_stmt614	= { FOLLOW_COLLECTION_INDEX_in_create_index_stmt614_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_index_section_in_create_index_stmt618  */
static	ANTLR3_BITWORD FOLLOW_index_section_in_create_index_stmt618_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_index_section_in_create_index_stmt618	= { FOLLOW_index_section_in_create_index_stmt618_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DROP_in_drop_index_stmt643  */
static	ANTLR3_BITWORD FOLLOW_DROP_in_drop_index_stmt643_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_DROP_in_drop_index_stmt643	= { FOLLOW_DROP_in_drop_index_stmt643_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLLECTION_INDEX_in_drop_index_stmt645  */
static	ANTLR3_BITWORD FOLLOW_COLLECTION_INDEX_in_drop_index_stmt645_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_COLLECTION_INDEX_in_drop_index_stmt645	= { FOLLOW_COLLECTION_INDEX_in_drop_index_stmt645_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_index_section_in_drop_index_stmt649  */
static	ANTLR3_BITWORD FOLLOW_index_section_in_drop_index_stmt649_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_index_section_in_drop_index_stmt649	= { FOLLOW_index_section_in_drop_index_stmt649_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sync_operator_in_insert_stmt677  */
static	ANTLR3_BITWORD FOLLOW_sync_operator_in_insert_stmt677_bits[]	= { ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_sync_operator_in_insert_stmt677	= { FOLLOW_sync_operator_in_insert_stmt677_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INSERT_in_insert_stmt681  */
static	ANTLR3_BITWORD FOLLOW_INSERT_in_insert_stmt681_bits[]	= { ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_INSERT_in_insert_stmt681	= { FOLLOW_INSERT_in_insert_stmt681_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INTO_in_insert_stmt683  */
static	ANTLR3_BITWORD FOLLOW_INTO_in_insert_stmt683_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_INTO_in_insert_stmt683	= { FOLLOW_INTO_in_insert_stmt683_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_collection_section_in_insert_stmt687  */
static	ANTLR3_BITWORD FOLLOW_collection_section_in_insert_stmt687_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_collection_section_in_insert_stmt687	= { FOLLOW_collection_section_in_insert_stmt687_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VALUE_in_insert_stmt689  */
static	ANTLR3_BITWORD FOLLOW_VALUE_in_insert_stmt689_bits[]	= { ANTLR3_UINT64_LIT(0x0400100400000000), ANTLR3_UINT64_LIT(0x00000000E8000100) };
static  ANTLR3_BITSET_LIST FOLLOW_VALUE_in_insert_stmt689	= { FOLLOW_VALUE_in_insert_stmt689_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_insert_stmt691  */
static	ANTLR3_BITWORD FOLLOW_expression_in_insert_stmt691_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_insert_stmt691	= { FOLLOW_expression_in_insert_stmt691_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sync_operator_in_update_stmt720  */
static	ANTLR3_BITWORD FOLLOW_sync_operator_in_update_stmt720_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_sync_operator_in_update_stmt720	= { FOLLOW_sync_operator_in_update_stmt720_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_UPDATE_in_update_stmt724  */
static	ANTLR3_BITWORD FOLLOW_UPDATE_in_update_stmt724_bits[]	= { ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_UPDATE_in_update_stmt724	= { FOLLOW_UPDATE_in_update_stmt724_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INTO_in_update_stmt726  */
static	ANTLR3_BITWORD FOLLOW_INTO_in_update_stmt726_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_INTO_in_update_stmt726	= { FOLLOW_INTO_in_update_stmt726_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_collection_section_in_update_stmt730  */
static	ANTLR3_BITWORD FOLLOW_collection_section_in_update_stmt730_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000080) };
static  ANTLR3_BITSET_LIST FOLLOW_collection_section_in_update_stmt730	= { FOLLOW_collection_section_in_update_stmt730_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SET_in_update_stmt732  */
static	ANTLR3_BITWORD FOLLOW_SET_in_update_stmt732_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_SET_in_update_stmt732	= { FOLLOW_SET_in_update_stmt732_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_property_section_in_update_stmt734  */
static	ANTLR3_BITWORD FOLLOW_property_section_in_update_stmt734_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000000002), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_property_section_in_update_stmt734	= { FOLLOW_property_section_in_update_stmt734_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_property_section_in_update_stmt738  */
static	ANTLR3_BITWORD FOLLOW_property_section_in_update_stmt738_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000000002), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_property_section_in_update_stmt738	= { FOLLOW_property_section_in_update_stmt738_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_where_section_in_update_stmt748  */
static	ANTLR3_BITWORD FOLLOW_where_section_in_update_stmt748_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_where_section_in_update_stmt748	= { FOLLOW_where_section_in_update_stmt748_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_property_in_property_section773  */
static	ANTLR3_BITWORD FOLLOW_property_in_property_section773_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_property_in_property_section773	= { FOLLOW_property_in_property_section773_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_90_in_property_section775  */
static	ANTLR3_BITWORD FOLLOW_90_in_property_section775_bits[]	= { ANTLR3_UINT64_LIT(0x0400100400000000), ANTLR3_UINT64_LIT(0x0000000060000100) };
static  ANTLR3_BITSET_LIST FOLLOW_90_in_property_section775	= { FOLLOW_90_in_property_section775_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_atom_in_property_section779  */
static	ANTLR3_BITWORD FOLLOW_expression_atom_in_property_section779_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_atom_in_property_section779	= { FOLLOW_expression_atom_in_property_section779_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sync_operator_in_delete_stmt808  */
static	ANTLR3_BITWORD FOLLOW_sync_operator_in_delete_stmt808_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000200000) };
static  ANTLR3_BITSET_LIST FOLLOW_sync_operator_in_delete_stmt808	= { FOLLOW_sync_operator_in_delete_stmt808_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DELETE_in_delete_stmt812  */
static	ANTLR3_BITWORD FOLLOW_DELETE_in_delete_stmt812_bits[]	= { ANTLR3_UINT64_LIT(0x0000000800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_DELETE_in_delete_stmt812	= { FOLLOW_DELETE_in_delete_stmt812_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FROM_in_delete_stmt814  */
static	ANTLR3_BITWORD FOLLOW_FROM_in_delete_stmt814_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000000000), ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_FROM_in_delete_stmt814	= { FOLLOW_FROM_in_delete_stmt814_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_collection_section_in_delete_stmt818  */
static	ANTLR3_BITWORD FOLLOW_collection_section_in_delete_stmt818_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_collection_section_in_delete_stmt818	= { FOLLOW_collection_section_in_delete_stmt818_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_where_section_in_delete_stmt825  */
static	ANTLR3_BITWORD FOLLOW_where_section_in_delete_stmt825_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_where_section_in_delete_stmt825	= { FOLLOW_where_section_in_delete_stmt825_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_atom_in_expression850  */
static	ANTLR3_BITWORD FOLLOW_expression_atom_in_expression850_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_atom_in_expression850	= { FOLLOW_expression_atom_in_expression850_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_95_in_expression857  */
static	ANTLR3_BITWORD FOLLOW_95_in_expression857_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_95_in_expression857	= { FOLLOW_95_in_expression857_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dictionary_literal_in_expression860  */
static	ANTLR3_BITWORD FOLLOW_dictionary_literal_in_expression860_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_dictionary_literal_in_expression860	= { FOLLOW_dictionary_literal_in_expression860_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_expression865  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_expression865_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_expression865	= { FOLLOW_COMMA_in_expression865_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dictionary_literal_in_expression867  */
static	ANTLR3_BITWORD FOLLOW_dictionary_literal_in_expression867_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000), ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_dictionary_literal_in_expression867	= { FOLLOW_dictionary_literal_in_expression867_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_96_in_expression872  */
static	ANTLR3_BITWORD FOLLOW_96_in_expression872_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_96_in_expression872	= { FOLLOW_96_in_expression872_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_91_in_expression877  */
static	ANTLR3_BITWORD FOLLOW_91_in_expression877_bits[]	= { ANTLR3_UINT64_LIT(0x0400100400000000), ANTLR3_UINT64_LIT(0x0000000060000100) };
static  ANTLR3_BITSET_LIST FOLLOW_91_in_expression877	= { FOLLOW_91_in_expression877_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_array_literal_in_expression879  */
static	ANTLR3_BITWORD FOLLOW_array_literal_in_expression879_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000), ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_array_literal_in_expression879	= { FOLLOW_array_literal_in_expression879_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_expression883  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_expression883_bits[]	= { ANTLR3_UINT64_LIT(0x0400100400000000), ANTLR3_UINT64_LIT(0x0000000060000100) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_expression883	= { FOLLOW_COMMA_in_expression883_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_array_literal_in_expression885  */
static	ANTLR3_BITWORD FOLLOW_array_literal_in_expression885_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000), ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_array_literal_in_expression885	= { FOLLOW_array_literal_in_expression885_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_92_in_expression891  */
static	ANTLR3_BITWORD FOLLOW_92_in_expression891_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_92_in_expression891	= { FOLLOW_92_in_expression891_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_name_in_expression898  */
static	ANTLR3_BITWORD FOLLOW_function_name_in_expression898_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000800000) };
static  ANTLR3_BITSET_LIST FOLLOW_function_name_in_expression898	= { FOLLOW_function_name_in_expression898_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_87_in_expression900  */
static	ANTLR3_BITWORD FOLLOW_87_in_expression900_bits[]	= { ANTLR3_UINT64_LIT(0x0400100400000000), ANTLR3_UINT64_LIT(0x0000000060000100) };
static  ANTLR3_BITSET_LIST FOLLOW_87_in_expression900	= { FOLLOW_87_in_expression900_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_array_literal_in_expression902  */
static	ANTLR3_BITWORD FOLLOW_array_literal_in_expression902_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000), ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_array_literal_in_expression902	= { FOLLOW_array_literal_in_expression902_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_expression906  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_expression906_bits[]	= { ANTLR3_UINT64_LIT(0x0400100400000000), ANTLR3_UINT64_LIT(0x0000000060000100) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_expression906	= { FOLLOW_COMMA_in_expression906_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_array_literal_in_expression908  */
static	ANTLR3_BITWORD FOLLOW_array_literal_in_expression908_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000), ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_array_literal_in_expression908	= { FOLLOW_array_literal_in_expression908_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_88_in_expression914  */
static	ANTLR3_BITWORD FOLLOW_88_in_expression914_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_88_in_expression914	= { FOLLOW_88_in_expression914_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_atom_in_expression923  */
static	ANTLR3_BITWORD FOLLOW_expression_atom_in_expression923_bits[]	= { ANTLR3_UINT64_LIT(0x822000A008000080), ANTLR3_UINT64_LIT(0x0000000000000001) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_atom_in_expression923	= { FOLLOW_expression_atom_in_expression923_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_binary_operator_in_expression927  */
static	ANTLR3_BITWORD FOLLOW_binary_operator_in_expression927_bits[]	= { ANTLR3_UINT64_LIT(0x0400100400000000), ANTLR3_UINT64_LIT(0x0000000060000100) };
static  ANTLR3_BITSET_LIST FOLLOW_binary_operator_in_expression927	= { FOLLOW_binary_operator_in_expression927_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_atom_in_expression931  */
static	ANTLR3_BITWORD FOLLOW_expression_atom_in_expression931_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_atom_in_expression931	= { FOLLOW_expression_atom_in_expression931_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_property_in_expression_atom955  */
static	ANTLR3_BITWORD FOLLOW_property_in_expression_atom955_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_property_in_expression_atom955	= { FOLLOW_property_in_expression_atom955_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_integer_literal_in_expression_atom962  */
static	ANTLR3_BITWORD FOLLOW_integer_literal_in_expression_atom962_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_integer_literal_in_expression_atom962	= { FOLLOW_integer_literal_in_expression_atom962_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_real_literal_in_expression_atom969  */
static	ANTLR3_BITWORD FOLLOW_real_literal_in_expression_atom969_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_real_literal_in_expression_atom969	= { FOLLOW_real_literal_in_expression_atom969_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_string_literal_in_expression_atom976  */
static	ANTLR3_BITWORD FOLLOW_string_literal_in_expression_atom976_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_string_literal_in_expression_atom976	= { FOLLOW_string_literal_in_expression_atom976_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_true_literal_in_expression_atom983  */
static	ANTLR3_BITWORD FOLLOW_true_literal_in_expression_atom983_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_true_literal_in_expression_atom983	= { FOLLOW_true_literal_in_expression_atom983_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_false_literal_in_expression_atom990  */
static	ANTLR3_BITWORD FOLLOW_false_literal_in_expression_atom990_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_false_literal_in_expression_atom990	= { FOLLOW_false_literal_in_expression_atom990_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_property1003  */
static	ANTLR3_BITWORD FOLLOW_ID_in_property1003_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_property1003	= { FOLLOW_ID_in_property1003_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_integer_literal1015  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_integer_literal1015_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_integer_literal1015	= { FOLLOW_NUMBER_in_integer_literal1015_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOAT_in_real_literal1026  */
static	ANTLR3_BITWORD FOLLOW_FLOAT_in_real_literal1026_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOAT_in_real_literal1026	= { FOLLOW_FLOAT_in_real_literal1026_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_string_literal1037  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_string_literal1037_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_string_literal1037	= { FOLLOW_STRING_in_string_literal1037_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_94_in_true_literal1048  */
static	ANTLR3_BITWORD FOLLOW_94_in_true_literal1048_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_94_in_true_literal1048	= { FOLLOW_94_in_true_literal1048_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_93_in_false_literal1060  */
static	ANTLR3_BITWORD FOLLOW_93_in_false_literal1060_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_93_in_false_literal1060	= { FOLLOW_93_in_false_literal1060_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_dictionary_literal1073  */
static	ANTLR3_BITWORD FOLLOW_name_in_dictionary_literal1073_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_dictionary_literal1073	= { FOLLOW_name_in_dictionary_literal1073_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_89_in_dictionary_literal1075  */
static	ANTLR3_BITWORD FOLLOW_89_in_dictionary_literal1075_bits[]	= { ANTLR3_UINT64_LIT(0x0400100400000000), ANTLR3_UINT64_LIT(0x0000000060000100) };
static  ANTLR3_BITSET_LIST FOLLOW_89_in_dictionary_literal1075	= { FOLLOW_89_in_dictionary_literal1075_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_atom_in_dictionary_literal1079  */
static	ANTLR3_BITWORD FOLLOW_expression_atom_in_dictionary_literal1079_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_atom_in_dictionary_literal1079	= { FOLLOW_expression_atom_in_dictionary_literal1079_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_atom_in_array_literal1096  */
static	ANTLR3_BITWORD FOLLOW_expression_atom_in_array_literal1096_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_atom_in_array_literal1096	= { FOLLOW_expression_atom_in_array_literal1096_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_function_name1119  */
static	ANTLR3_BITWORD FOLLOW_ID_in_function_name1119_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_function_name1119	= { FOLLOW_ID_in_function_name1119_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_function_literal1146  */
static	ANTLR3_BITWORD FOLLOW_expression_in_function_literal1146_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_function_literal1146	= { FOLLOW_expression_in_function_literal1146_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EQ_in_binary_operator1170  */
static	ANTLR3_BITWORD FOLLOW_EQ_in_binary_operator1170_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EQ_in_binary_operator1170	= { FOLLOW_EQ_in_binary_operator1170_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OP_LT_in_binary_operator1177  */
static	ANTLR3_BITWORD FOLLOW_OP_LT_in_binary_operator1177_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OP_LT_in_binary_operator1177	= { FOLLOW_OP_LT_in_binary_operator1177_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LE_in_binary_operator1184  */
static	ANTLR3_BITWORD FOLLOW_LE_in_binary_operator1184_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LE_in_binary_operator1184	= { FOLLOW_LE_in_binary_operator1184_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GT_in_binary_operator1191  */
static	ANTLR3_BITWORD FOLLOW_GT_in_binary_operator1191_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GT_in_binary_operator1191	= { FOLLOW_GT_in_binary_operator1191_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GE_in_binary_operator1198  */
static	ANTLR3_BITWORD FOLLOW_GE_in_binary_operator1198_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GE_in_binary_operator1198	= { FOLLOW_GE_in_binary_operator1198_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOTEQ_in_binary_operator1205  */
static	ANTLR3_BITWORD FOLLOW_NOTEQ_in_binary_operator1205_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NOTEQ_in_binary_operator1205	= { FOLLOW_NOTEQ_in_binary_operator1205_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AND_in_binary_operator1212  */
static	ANTLR3_BITWORD FOLLOW_AND_in_binary_operator1212_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_AND_in_binary_operator1212	= { FOLLOW_AND_in_binary_operator1212_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OR_in_binary_operator1219  */
static	ANTLR3_BITWORD FOLLOW_OR_in_binary_operator1219_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OR_in_binary_operator1219	= { FOLLOW_OR_in_binary_operator1219_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SYNC_in_sync_operator1239  */
static	ANTLR3_BITWORD FOLLOW_SYNC_in_sync_operator1239_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SYNC_in_sync_operator1239	= { FOLLOW_SYNC_in_sync_operator1239_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASYNC_in_sync_operator1246  */
static	ANTLR3_BITWORD FOLLOW_ASYNC_in_sync_operator1246_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ASYNC_in_sync_operator1246	= { FOLLOW_ASYNC_in_sync_operator1246_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_UNION_in_compound_operator1259  */
static	ANTLR3_BITWORD FOLLOW_UNION_in_compound_operator1259_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000022) };
static  ANTLR3_BITSET_LIST FOLLOW_UNION_in_compound_operator1259	= { FOLLOW_UNION_in_compound_operator1259_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ALL_in_compound_operator1262  */
static	ANTLR3_BITWORD FOLLOW_ALL_in_compound_operator1262_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ALL_in_compound_operator1262	= { FOLLOW_ALL_in_compound_operator1262_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INTERSECT_in_compound_operator1269  */
static	ANTLR3_BITWORD FOLLOW_INTERSECT_in_compound_operator1269_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_INTERSECT_in_compound_operator1269	= { FOLLOW_INTERSECT_in_compound_operator1269_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXCEPT_in_compound_operator1274  */
static	ANTLR3_BITWORD FOLLOW_EXCEPT_in_compound_operator1274_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EXCEPT_in_compound_operator1274	= { FOLLOW_EXCEPT_in_compound_operator1274_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_value1323  */
static	ANTLR3_BITWORD FOLLOW_ID_in_value1323_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_value1323	= { FOLLOW_ID_in_value1323_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_name1335  */
static	ANTLR3_BITWORD FOLLOW_ID_in_name1335_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_name1335	= { FOLLOW_ID_in_name1335_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_collection_name_in_collection_section1356  */
static	ANTLR3_BITWORD FOLLOW_collection_name_in_collection_section1356_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_collection_name_in_collection_section1356	= { FOLLOW_collection_name_in_collection_section1356_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_collection_name1369  */
static	ANTLR3_BITWORD FOLLOW_ID_in_collection_name1369_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_collection_name1369	= { FOLLOW_ID_in_collection_name1369_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_string_literal_in_collection_name1374  */
static	ANTLR3_BITWORD FOLLOW_string_literal_in_collection_name1374_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_string_literal_in_collection_name1374	= { FOLLOW_string_literal_in_collection_name1374_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_index_name_in_index_section1396  */
static	ANTLR3_BITWORD FOLLOW_index_name_in_index_section1396_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_index_name_in_index_section1396	= { FOLLOW_index_name_in_index_section1396_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_index_name1409  */
static	ANTLR3_BITWORD FOLLOW_ID_in_index_name1409_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_index_name1409	= { FOLLOW_ID_in_index_name1409_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_string_literal_in_index_name1414  */
static	ANTLR3_BITWORD FOLLOW_string_literal_in_index_name1414_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_string_literal_in_index_name1414	= { FOLLOW_string_literal_in_index_name1414_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WHERE_in_where_section1435  */
static	ANTLR3_BITWORD FOLLOW_WHERE_in_where_section1435_bits[]	= { ANTLR3_UINT64_LIT(0x0400100400000000), ANTLR3_UINT64_LIT(0x00000000E8000100) };
static  ANTLR3_BITSET_LIST FOLLOW_WHERE_in_where_section1435	= { FOLLOW_WHERE_in_where_section1435_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_where_section1437  */
static	ANTLR3_BITWORD FOLLOW_expression_in_where_section1437_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_where_section1437	= { FOLLOW_expression_in_where_section1437_bits, 1	};


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start statement
 * UnQL.g:39:1: statement[uSQL::SQLParser *sqlParser] : ( select_stmt[stmt] | create_collection_stmt[stmt] | drop_collection_stmt[stmt] | create_index_stmt[stmt] | drop_index_stmt[stmt] | insert_stmt[stmt] | update_stmt[stmt] | delete_stmt[stmt] );
 */
static void
statement(pUnQLParser ctx, uSQL::SQLParser *sqlParser)
{
    /* Initialize rule variables
     */


    		uSQL::SQLStatement *stmt = new uSQL::SQLStatement();
    		sqlParser->addStatement(stmt);
    	
    {
        {
            //  UnQL.g:44:2: ( select_stmt[stmt] | create_collection_stmt[stmt] | drop_collection_stmt[stmt] | create_index_stmt[stmt] | drop_index_stmt[stmt] | insert_stmt[stmt] | update_stmt[stmt] | delete_stmt[stmt] )

            ANTLR3_UINT32 alt1;

            alt1=8;

            switch ( LA(1) )
            {
            case SELECT:
            	{
            		alt1=1;
            	}
                break;
            case CREATE:
            	{
            		switch ( LA(2) )
            		{
            		case COLLECTION:
            			{
            				alt1=2;
            			}
            		    break;
            		case COLLECTION_INDEX:
            			{
            				alt1=4;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 1;
            		    EXCEPTION->state        = 2;


            		    goto rulestatementEx;

            		}

            	}
                break;
            case DROP:
            	{
            		switch ( LA(2) )
            		{
            		case COLLECTION:
            			{
            				alt1=3;
            			}
            		    break;
            		case COLLECTION_INDEX:
            			{
            				alt1=5;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 1;
            		    EXCEPTION->state        = 3;


            		    goto rulestatementEx;

            		}

            	}
                break;
            case SYNC:
            	{
            		switch ( LA(2) )
            		{
            		case INSERT:
            			{
            				alt1=6;
            			}
            		    break;
            		case UPDATE:
            			{
            				alt1=7;
            			}
            		    break;
            		case DELETE:
            			{
            				alt1=8;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 1;
            		    EXCEPTION->state        = 4;


            		    goto rulestatementEx;

            		}

            	}
                break;
            case ASYNC:
            	{
            		switch ( LA(2) )
            		{
            		case INSERT:
            			{
            				alt1=6;
            			}
            		    break;
            		case UPDATE:
            			{
            				alt1=7;
            			}
            		    break;
            		case DELETE:
            			{
            				alt1=8;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 1;
            		    EXCEPTION->state        = 5;


            		    goto rulestatementEx;

            		}

            	}
                break;
            case INSERT:
            	{
            		alt1=6;
            	}
                break;
            case UPDATE:
            	{
            		alt1=7;
            	}
                break;
            case DELETE:
            	{
            		alt1=8;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 1;
                EXCEPTION->state        = 0;


                goto rulestatementEx;

            }

            switch (alt1)
            {
        	case 1:
        	    // UnQL.g:44:4: select_stmt[stmt]
        	    {
        	        FOLLOWPUSH(FOLLOW_select_stmt_in_statement61);
        	        select_stmt(ctx, stmt);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // UnQL.g:45:4: create_collection_stmt[stmt]
        	    {
        	        FOLLOWPUSH(FOLLOW_create_collection_stmt_in_statement67);
        	        create_collection_stmt(ctx, stmt);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;
        	case 3:
        	    // UnQL.g:46:4: drop_collection_stmt[stmt]
        	    {
        	        FOLLOWPUSH(FOLLOW_drop_collection_stmt_in_statement73);
        	        drop_collection_stmt(ctx, stmt);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;
        	case 4:
        	    // UnQL.g:47:4: create_index_stmt[stmt]
        	    {
        	        FOLLOWPUSH(FOLLOW_create_index_stmt_in_statement79);
        	        create_index_stmt(ctx, stmt);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;
        	case 5:
        	    // UnQL.g:48:4: drop_index_stmt[stmt]
        	    {
        	        FOLLOWPUSH(FOLLOW_drop_index_stmt_in_statement85);
        	        drop_index_stmt(ctx, stmt);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;
        	case 6:
        	    // UnQL.g:49:4: insert_stmt[stmt]
        	    {
        	        FOLLOWPUSH(FOLLOW_insert_stmt_in_statement91);
        	        insert_stmt(ctx, stmt);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;
        	case 7:
        	    // UnQL.g:50:4: update_stmt[stmt]
        	    {
        	        FOLLOWPUSH(FOLLOW_update_stmt_in_statement97);
        	        update_stmt(ctx, stmt);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;
        	case 8:
        	    // UnQL.g:51:4: delete_stmt[stmt]
        	    {
        	        FOLLOWPUSH(FOLLOW_delete_stmt_in_statement103);
        	        delete_stmt(ctx, stmt);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end statement */

/**
 * $ANTLR start select_stmt
 * UnQL.g:60:1: select_stmt[uSQL::SQLStatement *sqlStmt] : select_core[sqlStmt] (sortingSection= sorting_section )? (limitSection= limit_section )? (offsetSection= offset_section )? ;
 */
static void
select_stmt(pUnQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
    uSQL::SQLOrderBy * sortingSection;
    #undef	RETURN_TYPE_sortingSection
    #define	RETURN_TYPE_sortingSection uSQL::SQLOrderBy *

    uSQL::SQLLimit * limitSection;
    #undef	RETURN_TYPE_limitSection
    #define	RETURN_TYPE_limitSection uSQL::SQLLimit *

    uSQL::SQLOffset * offsetSection;
    #undef	RETURN_TYPE_offsetSection
    #define	RETURN_TYPE_offsetSection uSQL::SQLOffset *

    /* Initialize rule variables
     */


    		// SELECT
    		uSQL::SQLSelect *sqlSelect = new uSQL::SQLSelect();
    		sqlStmt->addChildNode(sqlSelect);

    		sortingSection = NULL;
    		limitSection = NULL;
    		offsetSection = NULL;
    	
    {
        // UnQL.g:70:2: ( select_core[sqlStmt] (sortingSection= sorting_section )? (limitSection= limit_section )? (offsetSection= offset_section )? )
        // UnQL.g:70:4: select_core[sqlStmt] (sortingSection= sorting_section )? (limitSection= limit_section )? (offsetSection= offset_section )?
        {
            FOLLOWPUSH(FOLLOW_select_core_in_select_stmt127);
            select_core(ctx, sqlStmt);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleselect_stmtEx;
            }


            // UnQL.g:70:25: (sortingSection= sorting_section )?
            {
                int alt2=2;
                switch ( LA(1) )
                {
                    case ORDER:
                    	{
                    		alt2=1;
                    	}
                        break;
                }

                switch (alt2)
                {
            	case 1:
            	    // UnQL.g:70:26: sortingSection= sorting_section
            	    {
            	        FOLLOWPUSH(FOLLOW_sorting_section_in_select_stmt133);
            	        sortingSection=sorting_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_stmtEx;
            	        }


            	    }
            	    break;

                }
            }

            // UnQL.g:70:59: (limitSection= limit_section )?
            {
                int alt3=2;
                switch ( LA(1) )
                {
                    case LIMIT:
                    	{
                    		alt3=1;
                    	}
                        break;
                }

                switch (alt3)
                {
            	case 1:
            	    // UnQL.g:70:60: limitSection= limit_section
            	    {
            	        FOLLOWPUSH(FOLLOW_limit_section_in_select_stmt140);
            	        limitSection=limit_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_stmtEx;
            	        }


            	    }
            	    break;

                }
            }

            // UnQL.g:70:89: (offsetSection= offset_section )?
            {
                int alt4=2;
                switch ( LA(1) )
                {
                    case FLOAT:
                    case ID:
                    case NUMBER:
                    case STRING:
                    case 93:
                    case 94:
                    	{
                    		alt4=1;
                    	}
                        break;
                }

                switch (alt4)
                {
            	case 1:
            	    // UnQL.g:70:90: offsetSection= offset_section
            	    {
            	        FOLLOWPUSH(FOLLOW_offset_section_in_select_stmt147);
            	        offsetSection=offset_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_stmtEx;
            	        }


            	    }
            	    break;

                }
            }

            {

                		// ORDER BY		
                		if (sortingSection)
                			sqlStmt->addChildNode(sortingSection);
                			
                		// LIMIT		
                		if (limitSection)
                			sqlStmt->addChildNode(limitSection);

                		// OFFSET
                		if (offsetSection)
                			sqlStmt->addChildNode(offsetSection);
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleselect_stmtEx; /* Prevent compiler warnings */
    ruleselect_stmtEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end select_stmt */

/**
 * $ANTLR start select_core
 * UnQL.g:86:1: select_core[uSQL::SQLStatement *sqlStmt] : SELECT ( DISTINCT | ALL )? ( expression[sqlColumn] )? ( AS name )? (fromSection= from_section )? (whereSection= where_section )? (groupSection= grouping_section )? (havingSection= having_section )? ;
 */
static void
select_core(pUnQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
    uSQL::SQLFrom * fromSection;
    #undef	RETURN_TYPE_fromSection
    #define	RETURN_TYPE_fromSection uSQL::SQLFrom *

    uSQL::SQLWhere * whereSection;
    #undef	RETURN_TYPE_whereSection
    #define	RETURN_TYPE_whereSection uSQL::SQLWhere *

    uSQL::SQLGroupBy * groupSection;
    #undef	RETURN_TYPE_groupSection
    #define	RETURN_TYPE_groupSection uSQL::SQLGroupBy *

    uSQL::SQLHaving * havingSection;
    #undef	RETURN_TYPE_havingSection
    #define	RETURN_TYPE_havingSection uSQL::SQLHaving *

    /* Initialize rule variables
     */


    		uSQL::SQLColumn *sqlColumn = new uSQL::SQLColumn();
    		fromSection = NULL;
    		whereSection = NULL;
    		groupSection = NULL;
    		havingSection = NULL;
    	
    {
        // UnQL.g:94:2: ( SELECT ( DISTINCT | ALL )? ( expression[sqlColumn] )? ( AS name )? (fromSection= from_section )? (whereSection= where_section )? (groupSection= grouping_section )? (havingSection= having_section )? )
        // UnQL.g:94:4: SELECT ( DISTINCT | ALL )? ( expression[sqlColumn] )? ( AS name )? (fromSection= from_section )? (whereSection= where_section )? (groupSection= grouping_section )? (havingSection= having_section )?
        {
             MATCHT(SELECT, &FOLLOW_SELECT_in_select_core172);
            if  (HASEXCEPTION())
            {
                goto ruleselect_coreEx;
            }


            // UnQL.g:94:11: ( DISTINCT | ALL )?
            {
                int alt5=2;
                switch ( LA(1) )
                {
                    case ALL:
                    case DISTINCT:
                    	{
                    		alt5=1;
                    	}
                        break;
                }

                switch (alt5)
                {
            	case 1:
            	    // UnQL.g:
            	    {
            	        if ( LA(1) == ALL || LA(1) == DISTINCT )
            	        {
            	            CONSUME();
            	            PERRORRECOVERY=ANTLR3_FALSE;
            	        }
            	        else
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            	            EXCEPTION->expectingSet = NULL;

            	            goto ruleselect_coreEx;
            	        }


            	    }
            	    break;

                }
            }

            // UnQL.g:94:29: ( expression[sqlColumn] )?
            {
                int alt6=2;
                switch ( LA(1) )
                {
                    case ID:
                    	{
                    		alt6=1;
                    	}
                        break;
                    case NUMBER:
                    	{
                    		alt6=1;
                    	}
                        break;
                    case FLOAT:
                    	{
                    		alt6=1;
                    	}
                        break;
                    case STRING:
                    	{
                    		alt6=1;
                    	}
                        break;
                    case 94:
                    	{
                    		alt6=1;
                    	}
                        break;
                    case 91:
                    case 93:
                    case 95:
                    	{
                    		alt6=1;
                    	}
                        break;
                }

                switch (alt6)
                {
            	case 1:
            	    // UnQL.g:94:30: expression[sqlColumn]
            	    {
            	        FOLLOWPUSH(FOLLOW_expression_in_select_core184);
            	        expression(ctx, sqlColumn);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_coreEx;
            	        }


            	    }
            	    break;

                }
            }

            // UnQL.g:94:54: ( AS name )?
            {
                int alt7=2;
                switch ( LA(1) )
                {
                    case AS:
                    	{
                    		alt7=1;
                    	}
                        break;
                }

                switch (alt7)
                {
            	case 1:
            	    // UnQL.g:94:55: AS name
            	    {
            	         MATCHT(AS, &FOLLOW_AS_in_select_core190);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_coreEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_name_in_select_core192);
            	        name(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_coreEx;
            	        }


            	    }
            	    break;

                }
            }

            // UnQL.g:95:4: (fromSection= from_section )?
            {
                int alt8=2;
                switch ( LA(1) )
                {
                    case FROM:
                    	{
                    		alt8=1;
                    	}
                        break;
                }

                switch (alt8)
                {
            	case 1:
            	    // UnQL.g:95:5: fromSection= from_section
            	    {
            	        FOLLOWPUSH(FOLLOW_from_section_in_select_core205);
            	        fromSection=from_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_coreEx;
            	        }


            	    }
            	    break;

                }
            }

            // UnQL.g:96:4: (whereSection= where_section )?
            {
                int alt9=2;
                switch ( LA(1) )
                {
                    case WHERE:
                    	{
                    		alt9=1;
                    	}
                        break;
                }

                switch (alt9)
                {
            	case 1:
            	    // UnQL.g:96:5: whereSection= where_section
            	    {
            	        FOLLOWPUSH(FOLLOW_where_section_in_select_core218);
            	        whereSection=where_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_coreEx;
            	        }


            	    }
            	    break;

                }
            }

            // UnQL.g:97:4: (groupSection= grouping_section )?
            {
                int alt10=2;
                switch ( LA(1) )
                {
                    case GROUP:
                    	{
                    		alt10=1;
                    	}
                        break;
                }

                switch (alt10)
                {
            	case 1:
            	    // UnQL.g:97:5: groupSection= grouping_section
            	    {
            	        FOLLOWPUSH(FOLLOW_grouping_section_in_select_core230);
            	        groupSection=grouping_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_coreEx;
            	        }


            	    }
            	    break;

                }
            }

            // UnQL.g:98:4: (havingSection= having_section )?
            {
                int alt11=2;
                switch ( LA(1) )
                {
                    case HAVING:
                    	{
                    		alt11=1;
                    	}
                        break;
                }

                switch (alt11)
                {
            	case 1:
            	    // UnQL.g:98:5: havingSection= having_section
            	    {
            	        FOLLOWPUSH(FOLLOW_having_section_in_select_core243);
            	        havingSection=having_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_coreEx;
            	        }


            	    }
            	    break;

                }
            }

            {

                	  
                		// VALUE 
                		if (sqlColumn->hasExpressions())
                			sqlStmt->addChildNode(sqlColumn);
                		else 
                			delete sqlColumn;
                			
                		// FROM
                		if (fromSection)		
                			sqlStmt->addChildNode(fromSection);
                			
                		// WHERE
                		if (whereSection)		
                			sqlStmt->addChildNode(whereSection);

                		// GROUP BY
                		if (groupSection)		
                			sqlStmt->addChildNode(groupSection);

                		// HAVING
                		if (havingSection)		
                			sqlStmt->addChildNode(havingSection);
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleselect_coreEx; /* Prevent compiler warnings */
    ruleselect_coreEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end select_core */

/**
 * $ANTLR start from_section
 * UnQL.g:125:1: from_section returns [uSQL::SQLFrom *sqlFrom] : ( FROM table_name[sqlFrom] ) ( COMMA table_name[sqlFrom] )* ;
 */
static uSQL::SQLFrom *
from_section(pUnQLParser ctx)
{
    uSQL::SQLFrom * sqlFrom;


    /* Initialize rule variables
     */


    		sqlFrom = new uSQL::SQLFrom();
    	
    {
        // UnQL.g:129:2: ( ( FROM table_name[sqlFrom] ) ( COMMA table_name[sqlFrom] )* )
        // UnQL.g:129:4: ( FROM table_name[sqlFrom] ) ( COMMA table_name[sqlFrom] )*
        {
            // UnQL.g:129:4: ( FROM table_name[sqlFrom] )
            // UnQL.g:129:5: FROM table_name[sqlFrom]
            {
                 MATCHT(FROM, &FOLLOW_FROM_in_from_section273);
                if  (HASEXCEPTION())
                {
                    goto rulefrom_sectionEx;
                }


                FOLLOWPUSH(FOLLOW_table_name_in_from_section275);
                table_name(ctx, sqlFrom);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulefrom_sectionEx;
                }


            }


            // UnQL.g:129:31: ( COMMA table_name[sqlFrom] )*

            for (;;)
            {
                int alt12=2;
                switch ( LA(1) )
                {
                case COMMA:
                	{
                		alt12=1;
                	}
                    break;

                }

                switch (alt12)
                {
            	case 1:
            	    // UnQL.g:129:32: COMMA table_name[sqlFrom]
            	    {
            	         MATCHT(COMMA, &FOLLOW_COMMA_in_from_section280);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefrom_sectionEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_table_name_in_from_section282);
            	        table_name(ctx, sqlFrom);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefrom_sectionEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop12;	/* break out of the loop */
            	    break;
                }
            }
            loop12: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulefrom_sectionEx; /* Prevent compiler warnings */
    rulefrom_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlFrom;
}
/* $ANTLR end from_section */

/**
 * $ANTLR start table_name
 * UnQL.g:132:1: table_name[uSQL::SQLFrom *sqlFrom] : dataSource= data_source ;
 */
static void
table_name(pUnQLParser ctx, uSQL::SQLFrom *sqlFrom)
{
    uSQL::SQLDataSource * dataSource;
    #undef	RETURN_TYPE_dataSource
    #define	RETURN_TYPE_dataSource uSQL::SQLDataSource *

    /* Initialize rule variables
     */

    {
        // UnQL.g:133:2: (dataSource= data_source )
        // UnQL.g:133:4: dataSource= data_source
        {
            FOLLOWPUSH(FOLLOW_data_source_in_table_name302);
            dataSource=data_source(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletable_nameEx;
            }


            {

                		sqlFrom->addChildNode(dataSource);
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruletable_nameEx; /* Prevent compiler warnings */
    ruletable_nameEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end table_name */

/**
 * $ANTLR start data_source
 * UnQL.g:138:1: data_source returns [uSQL::SQLDataSource *sqlDataSource] : collection_name ;
 */
static uSQL::SQLDataSource *
data_source(pUnQLParser ctx)
{
    uSQL::SQLDataSource * sqlDataSource;


    UnQLParser_collection_name_return collection_name1;
    #undef	RETURN_TYPE_collection_name1
    #define	RETURN_TYPE_collection_name1 UnQLParser_collection_name_return

    /* Initialize rule variables
     */


    		sqlDataSource = new uSQL::SQLDataSource();
    	
    {
        // UnQL.g:142:2: ( collection_name )
        // UnQL.g:142:4: collection_name
        {
            FOLLOWPUSH(FOLLOW_collection_name_in_data_source325);
            collection_name1=collection_name(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledata_sourceEx;
            }


            {

                		// Collection
                		sqlDataSource->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, collection_name1.start, collection_name1.stop))
                ));
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruledata_sourceEx; /* Prevent compiler warnings */
    ruledata_sourceEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlDataSource;
}
/* $ANTLR end data_source */

/**
 * $ANTLR start grouping_section
 * UnQL.g:148:1: grouping_section returns [uSQL::SQLGroupBy *sqlGroupBy] : GROUP BY expression[sqlGroupBy] ( COMMA expression[sqlGroupBy] )* ;
 */
static uSQL::SQLGroupBy *
grouping_section(pUnQLParser ctx)
{
    uSQL::SQLGroupBy * sqlGroupBy;


    /* Initialize rule variables
     */


    		sqlGroupBy = new uSQL::SQLGroupBy();
    	
    {
        // UnQL.g:152:2: ( GROUP BY expression[sqlGroupBy] ( COMMA expression[sqlGroupBy] )* )
        // UnQL.g:152:4: GROUP BY expression[sqlGroupBy] ( COMMA expression[sqlGroupBy] )*
        {
             MATCHT(GROUP, &FOLLOW_GROUP_in_grouping_section348);
            if  (HASEXCEPTION())
            {
                goto rulegrouping_sectionEx;
            }


             MATCHT(BY, &FOLLOW_BY_in_grouping_section350);
            if  (HASEXCEPTION())
            {
                goto rulegrouping_sectionEx;
            }


            FOLLOWPUSH(FOLLOW_expression_in_grouping_section352);
            expression(ctx, sqlGroupBy);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulegrouping_sectionEx;
            }


            // UnQL.g:152:36: ( COMMA expression[sqlGroupBy] )*

            for (;;)
            {
                int alt13=2;
                switch ( LA(1) )
                {
                case COMMA:
                	{
                		alt13=1;
                	}
                    break;

                }

                switch (alt13)
                {
            	case 1:
            	    // UnQL.g:152:37: COMMA expression[sqlGroupBy]
            	    {
            	         MATCHT(COMMA, &FOLLOW_COMMA_in_grouping_section356);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulegrouping_sectionEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_expression_in_grouping_section358);
            	        expression(ctx, sqlGroupBy);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulegrouping_sectionEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop13;	/* break out of the loop */
            	    break;
                }
            }
            loop13: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulegrouping_sectionEx; /* Prevent compiler warnings */
    rulegrouping_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlGroupBy;
}
/* $ANTLR end grouping_section */

/**
 * $ANTLR start having_section
 * UnQL.g:155:1: having_section returns [uSQL::SQLHaving *sqlHaving] : HAVING expression[sqlHaving] ;
 */
static uSQL::SQLHaving *
having_section(pUnQLParser ctx)
{
    uSQL::SQLHaving * sqlHaving;


    /* Initialize rule variables
     */


    		sqlHaving = new uSQL::SQLHaving();
    	
    {
        // UnQL.g:159:2: ( HAVING expression[sqlHaving] )
        // UnQL.g:159:4: HAVING expression[sqlHaving]
        {
             MATCHT(HAVING, &FOLLOW_HAVING_in_having_section383);
            if  (HASEXCEPTION())
            {
                goto rulehaving_sectionEx;
            }


            FOLLOWPUSH(FOLLOW_expression_in_having_section385);
            expression(ctx, sqlHaving);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulehaving_sectionEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulehaving_sectionEx; /* Prevent compiler warnings */
    rulehaving_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlHaving;
}
/* $ANTLR end having_section */

/**
 * $ANTLR start sorting_section
 * UnQL.g:162:1: sorting_section returns [uSQL::SQLOrderBy *sqlOrders] : ORDER BY sorting_item[sqlOrders] ( COMMA sorting_item[sqlOrders] )* ;
 */
static uSQL::SQLOrderBy *
sorting_section(pUnQLParser ctx)
{
    uSQL::SQLOrderBy * sqlOrders;


    /* Initialize rule variables
     */


    		sqlOrders = new uSQL::SQLOrderBy();
    	
    {
        // UnQL.g:166:2: ( ORDER BY sorting_item[sqlOrders] ( COMMA sorting_item[sqlOrders] )* )
        // UnQL.g:166:4: ORDER BY sorting_item[sqlOrders] ( COMMA sorting_item[sqlOrders] )*
        {
             MATCHT(ORDER, &FOLLOW_ORDER_in_sorting_section407);
            if  (HASEXCEPTION())
            {
                goto rulesorting_sectionEx;
            }


             MATCHT(BY, &FOLLOW_BY_in_sorting_section409);
            if  (HASEXCEPTION())
            {
                goto rulesorting_sectionEx;
            }


            FOLLOWPUSH(FOLLOW_sorting_item_in_sorting_section411);
            sorting_item(ctx, sqlOrders);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesorting_sectionEx;
            }


            // UnQL.g:166:37: ( COMMA sorting_item[sqlOrders] )*

            for (;;)
            {
                int alt14=2;
                switch ( LA(1) )
                {
                case COMMA:
                	{
                		alt14=1;
                	}
                    break;

                }

                switch (alt14)
                {
            	case 1:
            	    // UnQL.g:166:38: COMMA sorting_item[sqlOrders]
            	    {
            	         MATCHT(COMMA, &FOLLOW_COMMA_in_sorting_section415);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesorting_sectionEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_sorting_item_in_sorting_section417);
            	        sorting_item(ctx, sqlOrders);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesorting_sectionEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop14;	/* break out of the loop */
            	    break;
                }
            }
            loop14: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulesorting_sectionEx; /* Prevent compiler warnings */
    rulesorting_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlOrders;
}
/* $ANTLR end sorting_section */

/**
 * $ANTLR start sorting_item
 * UnQL.g:169:1: sorting_item[uSQL::SQLOrderBy *sqlOrders] : property ( sorting_specification )? ;
 */
static void
sorting_item(pUnQLParser ctx, uSQL::SQLOrderBy *sqlOrders)
{
    UnQLParser_property_return property2;
    #undef	RETURN_TYPE_property2
    #define	RETURN_TYPE_property2 UnQLParser_property_return

    UnQLParser_sorting_specification_return sorting_specification3;
    #undef	RETURN_TYPE_sorting_specification3
    #define	RETURN_TYPE_sorting_specification3 UnQLParser_sorting_specification_return

    /* Initialize rule variables
     */

    {
        // UnQL.g:170:2: ( property ( sorting_specification )? )
        // UnQL.g:170:4: property ( sorting_specification )?
        {
            FOLLOWPUSH(FOLLOW_property_in_sorting_item435);
            property2=property(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesorting_itemEx;
            }


            // UnQL.g:170:13: ( sorting_specification )?
            {
                int alt15=2;
                switch ( LA(1) )
                {
                    case ASC:
                    case DESC:
                    	{
                    		alt15=1;
                    	}
                        break;
                }

                switch (alt15)
                {
            	case 1:
            	    // UnQL.g:170:14: sorting_specification
            	    {
            	        FOLLOWPUSH(FOLLOW_sorting_specification_in_sorting_item438);
            	        sorting_specification3=sorting_specification(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesorting_itemEx;
            	        }


            	    }
            	    break;

                }
            }

            {

                		uSQL::SQLOrder *sqlOrder = new uSQL::SQLOrder();
                		sqlOrder->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, property2.start, property2.stop))
                ));
                		if (sorting_specification)
                			sqlOrder->setOrder(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, sorting_specification3.start, sorting_specification3.stop))
                ));
                		sqlOrders->addChildNode(sqlOrder);
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulesorting_itemEx; /* Prevent compiler warnings */
    rulesorting_itemEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end sorting_item */

/**
 * $ANTLR start sorting_specification
 * UnQL.g:179:1: sorting_specification : ( ASC | DESC );
 */
static UnQLParser_sorting_specification_return
sorting_specification(pUnQLParser ctx)
{
    UnQLParser_sorting_specification_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // UnQL.g:180:2: ( ASC | DESC )
        // UnQL.g:
        {
            if ( LA(1) == ASC || LA(1) == DESC )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto rulesorting_specificationEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulesorting_specificationEx; /* Prevent compiler warnings */
    rulesorting_specificationEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end sorting_specification */

/**
 * $ANTLR start limit_section
 * UnQL.g:184:1: limit_section returns [uSQL::SQLLimit *sqlLimit] : LIMIT (offsetExpr= expression_atom COMMA )? countExpr= expression_atom ;
 */
static uSQL::SQLLimit *
limit_section(pUnQLParser ctx)
{
    uSQL::SQLLimit * sqlLimit;


    uSQL::SQLExpression * offsetExpr;
    #undef	RETURN_TYPE_offsetExpr
    #define	RETURN_TYPE_offsetExpr uSQL::SQLExpression *

    uSQL::SQLExpression * countExpr;
    #undef	RETURN_TYPE_countExpr
    #define	RETURN_TYPE_countExpr uSQL::SQLExpression *

    /* Initialize rule variables
     */


    		sqlLimit = new uSQL::SQLLimit();
    		offsetExpr = NULL;
    	
    {
        // UnQL.g:189:2: ( LIMIT (offsetExpr= expression_atom COMMA )? countExpr= expression_atom )
        // UnQL.g:189:4: LIMIT (offsetExpr= expression_atom COMMA )? countExpr= expression_atom
        {
             MATCHT(LIMIT, &FOLLOW_LIMIT_in_limit_section479);
            if  (HASEXCEPTION())
            {
                goto rulelimit_sectionEx;
            }


            // UnQL.g:189:10: (offsetExpr= expression_atom COMMA )?
            {
                int alt16=2;
                switch ( LA(1) )
                {
                    case ID:
                    	{
                    		switch ( LA(2) )
                    		{
                    		    case COMMA:
                    		    	{
                    		    		alt16=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                    case NUMBER:
                    	{
                    		switch ( LA(2) )
                    		{
                    		    case COMMA:
                    		    	{
                    		    		alt16=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                    case FLOAT:
                    	{
                    		switch ( LA(2) )
                    		{
                    		    case COMMA:
                    		    	{
                    		    		alt16=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                    case STRING:
                    	{
                    		switch ( LA(2) )
                    		{
                    		    case COMMA:
                    		    	{
                    		    		alt16=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                    case 94:
                    	{
                    		switch ( LA(2) )
                    		{
                    		    case COMMA:
                    		    	{
                    		    		alt16=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                    case 93:
                    	{
                    		switch ( LA(2) )
                    		{
                    		    case COMMA:
                    		    	{
                    		    		alt16=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                }

                switch (alt16)
                {
            	case 1:
            	    // UnQL.g:189:11: offsetExpr= expression_atom COMMA
            	    {
            	        FOLLOWPUSH(FOLLOW_expression_atom_in_limit_section484);
            	        offsetExpr=expression_atom(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelimit_sectionEx;
            	        }


            	         MATCHT(COMMA, &FOLLOW_COMMA_in_limit_section486);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelimit_sectionEx;
            	        }


            	    }
            	    break;

                }
            }

            FOLLOWPUSH(FOLLOW_expression_atom_in_limit_section492);
            countExpr=expression_atom(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulelimit_sectionEx;
            }


            {

                		if (offsetExpr)
                			sqlLimit->addChildNode(offsetExpr);
                		sqlLimit->addChildNode(countExpr);
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulelimit_sectionEx; /* Prevent compiler warnings */
    rulelimit_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlLimit;
}
/* $ANTLR end limit_section */

/**
 * $ANTLR start offset_section
 * UnQL.g:196:1: offset_section returns [uSQL::SQLOffset *sqlOffset] : offsetExpr= expression_atom ;
 */
static uSQL::SQLOffset *
offset_section(pUnQLParser ctx)
{
    uSQL::SQLOffset * sqlOffset;


    uSQL::SQLExpression * offsetExpr;
    #undef	RETURN_TYPE_offsetExpr
    #define	RETURN_TYPE_offsetExpr uSQL::SQLExpression *

    /* Initialize rule variables
     */


    		sqlOffset = new uSQL::SQLOffset();
    	
    {
        // UnQL.g:200:2: (offsetExpr= expression_atom )
        // UnQL.g:200:4: offsetExpr= expression_atom
        {
            FOLLOWPUSH(FOLLOW_expression_atom_in_offset_section517);
            offsetExpr=expression_atom(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleoffset_sectionEx;
            }


            {

                		sqlOffset->addChildNode(offsetExpr);
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleoffset_sectionEx; /* Prevent compiler warnings */
    ruleoffset_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlOffset;
}
/* $ANTLR end offset_section */

/**
 * $ANTLR start create_collection_stmt
 * UnQL.g:212:1: create_collection_stmt[uSQL::SQLStatement *sqlStmt] : CREATE COLLECTION collectionNode= collection_section ( OPTIONS expression[sqlOpt] )? ;
 */
static void
create_collection_stmt(pUnQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
    uSQL::SQLCollection * collectionNode;
    #undef	RETURN_TYPE_collectionNode
    #define	RETURN_TYPE_collectionNode uSQL::SQLCollection *

    /* Initialize rule variables
     */

    	
    		uSQL::SQLOption *sqlOpt = new uSQL::SQLOption();
    	
    {
        // UnQL.g:216:2: ( CREATE COLLECTION collectionNode= collection_section ( OPTIONS expression[sqlOpt] )? )
        // UnQL.g:216:4: CREATE COLLECTION collectionNode= collection_section ( OPTIONS expression[sqlOpt] )?
        {
             MATCHT(CREATE, &FOLLOW_CREATE_in_create_collection_stmt543);
            if  (HASEXCEPTION())
            {
                goto rulecreate_collection_stmtEx;
            }


             MATCHT(COLLECTION, &FOLLOW_COLLECTION_in_create_collection_stmt545);
            if  (HASEXCEPTION())
            {
                goto rulecreate_collection_stmtEx;
            }


            FOLLOWPUSH(FOLLOW_collection_section_in_create_collection_stmt549);
            collectionNode=collection_section(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecreate_collection_stmtEx;
            }


            // UnQL.g:216:56: ( OPTIONS expression[sqlOpt] )?
            {
                int alt17=2;
                switch ( LA(1) )
                {
                    case OPTIONS:
                    	{
                    		alt17=1;
                    	}
                        break;
                }

                switch (alt17)
                {
            	case 1:
            	    // UnQL.g:216:57: OPTIONS expression[sqlOpt]
            	    {
            	         MATCHT(OPTIONS, &FOLLOW_OPTIONS_in_create_collection_stmt552);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecreate_collection_stmtEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_expression_in_create_collection_stmt554);
            	        expression(ctx, sqlOpt);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecreate_collection_stmtEx;
            	        }


            	    }
            	    break;

                }
            }

            {

                		// CREATE
                		uSQL::SQLCreate *sqlCmd = new uSQL::SQLCreate();
                		sqlStmt->addChildNode(sqlCmd);
                		
                		// Collection
                		sqlCmd->addChildNode(collectionNode);

                		// Option 
                		if (sqlOpt->hasExpressions())
                			sqlCmd->addChildNode(sqlOpt);
                		else 
                			delete sqlOpt;
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulecreate_collection_stmtEx; /* Prevent compiler warnings */
    rulecreate_collection_stmtEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end create_collection_stmt */

/**
 * $ANTLR start drop_collection_stmt
 * UnQL.g:238:1: drop_collection_stmt[uSQL::SQLStatement *sqlStmt] : DROP COLLECTION collectionNode= collection_section ;
 */
static void
drop_collection_stmt(pUnQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
    uSQL::SQLCollection * collectionNode;
    #undef	RETURN_TYPE_collectionNode
    #define	RETURN_TYPE_collectionNode uSQL::SQLCollection *

    /* Initialize rule variables
     */

    	
    	
    {
        // UnQL.g:241:2: ( DROP COLLECTION collectionNode= collection_section )
        // UnQL.g:241:4: DROP COLLECTION collectionNode= collection_section
        {
             MATCHT(DROP, &FOLLOW_DROP_in_drop_collection_stmt581);
            if  (HASEXCEPTION())
            {
                goto ruledrop_collection_stmtEx;
            }


             MATCHT(COLLECTION, &FOLLOW_COLLECTION_in_drop_collection_stmt583);
            if  (HASEXCEPTION())
            {
                goto ruledrop_collection_stmtEx;
            }


            FOLLOWPUSH(FOLLOW_collection_section_in_drop_collection_stmt587);
            collectionNode=collection_section(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledrop_collection_stmtEx;
            }


            {

                		// DROP
                		uSQL::SQLDrop *sqlCmd = new uSQL::SQLDrop();
                		sqlStmt->addChildNode(sqlCmd);
                		
                		// Collection
                		sqlCmd->addChildNode(collectionNode);
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruledrop_collection_stmtEx; /* Prevent compiler warnings */
    ruledrop_collection_stmtEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end drop_collection_stmt */

/**
 * $ANTLR start create_index_stmt
 * UnQL.g:258:1: create_index_stmt[uSQL::SQLStatement *sqlStmt] : CREATE COLLECTION_INDEX indexNode= index_section ;
 */
static void
create_index_stmt(pUnQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
    uSQL::SQLIndex * indexNode;
    #undef	RETURN_TYPE_indexNode
    #define	RETURN_TYPE_indexNode uSQL::SQLIndex *

    /* Initialize rule variables
     */

    	
    	
    {
        // UnQL.g:261:2: ( CREATE COLLECTION_INDEX indexNode= index_section )
        // UnQL.g:261:4: CREATE COLLECTION_INDEX indexNode= index_section
        {
             MATCHT(CREATE, &FOLLOW_CREATE_in_create_index_stmt612);
            if  (HASEXCEPTION())
            {
                goto rulecreate_index_stmtEx;
            }


             MATCHT(COLLECTION_INDEX, &FOLLOW_COLLECTION_INDEX_in_create_index_stmt614);
            if  (HASEXCEPTION())
            {
                goto rulecreate_index_stmtEx;
            }


            FOLLOWPUSH(FOLLOW_index_section_in_create_index_stmt618);
            indexNode=index_section(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecreate_index_stmtEx;
            }


            {

                		// DROP
                		uSQL::SQLCreateIndex *sqlCmd = new uSQL::SQLCreateIndex();
                		sqlStmt->addChildNode(sqlCmd);
                		
                		// Collection
                		sqlCmd->addChildNode(indexNode);
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulecreate_index_stmtEx; /* Prevent compiler warnings */
    rulecreate_index_stmtEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end create_index_stmt */

/**
 * $ANTLR start drop_index_stmt
 * UnQL.g:278:1: drop_index_stmt[uSQL::SQLStatement *sqlStmt] : DROP COLLECTION_INDEX indexNode= index_section ;
 */
static void
drop_index_stmt(pUnQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
    uSQL::SQLIndex * indexNode;
    #undef	RETURN_TYPE_indexNode
    #define	RETURN_TYPE_indexNode uSQL::SQLIndex *

    /* Initialize rule variables
     */

    	
    	
    {
        // UnQL.g:281:2: ( DROP COLLECTION_INDEX indexNode= index_section )
        // UnQL.g:281:4: DROP COLLECTION_INDEX indexNode= index_section
        {
             MATCHT(DROP, &FOLLOW_DROP_in_drop_index_stmt643);
            if  (HASEXCEPTION())
            {
                goto ruledrop_index_stmtEx;
            }


             MATCHT(COLLECTION_INDEX, &FOLLOW_COLLECTION_INDEX_in_drop_index_stmt645);
            if  (HASEXCEPTION())
            {
                goto ruledrop_index_stmtEx;
            }


            FOLLOWPUSH(FOLLOW_index_section_in_drop_index_stmt649);
            indexNode=index_section(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledrop_index_stmtEx;
            }


            {

                		// DROP
                		uSQL::SQLDropIndex *sqlCmd = new uSQL::SQLDropIndex();
                		sqlStmt->addChildNode(sqlCmd);
                		
                		// Collection
                		sqlCmd->addChildNode(indexNode);
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruledrop_index_stmtEx; /* Prevent compiler warnings */
    ruledrop_index_stmtEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end drop_index_stmt */

/**
 * $ANTLR start insert_stmt
 * UnQL.g:298:1: insert_stmt[uSQL::SQLStatement *sqlStmt] : (isAsync= sync_operator )? INSERT INTO collectionNode= collection_section VALUE expression[sqlValue] ;
 */
static void
insert_stmt(pUnQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
    bool isAsync;
    #undef	RETURN_TYPE_isAsync
    #define	RETURN_TYPE_isAsync bool

    uSQL::SQLCollection * collectionNode;
    #undef	RETURN_TYPE_collectionNode
    #define	RETURN_TYPE_collectionNode uSQL::SQLCollection *

    /* Initialize rule variables
     */


    		uSQL::SQLValue *sqlValue = new uSQL::SQLValue();
    		isAsync = false;
    	
    {
        // UnQL.g:303:2: ( (isAsync= sync_operator )? INSERT INTO collectionNode= collection_section VALUE expression[sqlValue] )
        // UnQL.g:303:4: (isAsync= sync_operator )? INSERT INTO collectionNode= collection_section VALUE expression[sqlValue]
        {
            // UnQL.g:303:4: (isAsync= sync_operator )?
            {
                int alt18=2;
                switch ( LA(1) )
                {
                    case ASYNC:
                    case SYNC:
                    	{
                    		alt18=1;
                    	}
                        break;
                }

                switch (alt18)
                {
            	case 1:
            	    // UnQL.g:303:5: isAsync= sync_operator
            	    {
            	        FOLLOWPUSH(FOLLOW_sync_operator_in_insert_stmt677);
            	        isAsync=sync_operator(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleinsert_stmtEx;
            	        }


            	    }
            	    break;

                }
            }

             MATCHT(INSERT, &FOLLOW_INSERT_in_insert_stmt681);
            if  (HASEXCEPTION())
            {
                goto ruleinsert_stmtEx;
            }


             MATCHT(INTO, &FOLLOW_INTO_in_insert_stmt683);
            if  (HASEXCEPTION())
            {
                goto ruleinsert_stmtEx;
            }


            FOLLOWPUSH(FOLLOW_collection_section_in_insert_stmt687);
            collectionNode=collection_section(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinsert_stmtEx;
            }


             MATCHT(VALUE, &FOLLOW_VALUE_in_insert_stmt689);
            if  (HASEXCEPTION())
            {
                goto ruleinsert_stmtEx;
            }


            FOLLOWPUSH(FOLLOW_expression_in_insert_stmt691);
            expression(ctx, sqlValue);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinsert_stmtEx;
            }


            {

                		// INSERT
                		uSQL::SQLInsert *sqlCmd = new uSQL::SQLInsert();
                		sqlCmd->setAsyncEnabled(isAsync);
                		sqlStmt->addChildNode(sqlCmd);

                		// Collection
                		sqlCmd->addChildNode(collectionNode);
                		
                		// Value
                		sqlCmd->addChildNode(sqlValue);
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleinsert_stmtEx; /* Prevent compiler warnings */
    ruleinsert_stmtEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end insert_stmt */

/**
 * $ANTLR start update_stmt
 * UnQL.g:324:1: update_stmt[uSQL::SQLStatement *sqlStmt] : (isAsync= sync_operator )? UPDATE INTO collectionNode= collection_section SET property_section[sqlValue] ( property_section[sqlValue] )* (whereSection= where_section )? ;
 */
static void
update_stmt(pUnQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
    bool isAsync;
    #undef	RETURN_TYPE_isAsync
    #define	RETURN_TYPE_isAsync bool

    uSQL::SQLCollection * collectionNode;
    #undef	RETURN_TYPE_collectionNode
    #define	RETURN_TYPE_collectionNode uSQL::SQLCollection *

    uSQL::SQLWhere * whereSection;
    #undef	RETURN_TYPE_whereSection
    #define	RETURN_TYPE_whereSection uSQL::SQLWhere *

    /* Initialize rule variables
     */


    		uSQL::SQLValue *sqlValue = new uSQL::SQLValue();
    		isAsync = false;
    		whereSection = NULL;
    	
    {
        // UnQL.g:330:2: ( (isAsync= sync_operator )? UPDATE INTO collectionNode= collection_section SET property_section[sqlValue] ( property_section[sqlValue] )* (whereSection= where_section )? )
        // UnQL.g:330:4: (isAsync= sync_operator )? UPDATE INTO collectionNode= collection_section SET property_section[sqlValue] ( property_section[sqlValue] )* (whereSection= where_section )?
        {
            // UnQL.g:330:4: (isAsync= sync_operator )?
            {
                int alt19=2;
                switch ( LA(1) )
                {
                    case ASYNC:
                    case SYNC:
                    	{
                    		alt19=1;
                    	}
                        break;
                }

                switch (alt19)
                {
            	case 1:
            	    // UnQL.g:330:5: isAsync= sync_operator
            	    {
            	        FOLLOWPUSH(FOLLOW_sync_operator_in_update_stmt720);
            	        isAsync=sync_operator(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleupdate_stmtEx;
            	        }


            	    }
            	    break;

                }
            }

             MATCHT(UPDATE, &FOLLOW_UPDATE_in_update_stmt724);
            if  (HASEXCEPTION())
            {
                goto ruleupdate_stmtEx;
            }


             MATCHT(INTO, &FOLLOW_INTO_in_update_stmt726);
            if  (HASEXCEPTION())
            {
                goto ruleupdate_stmtEx;
            }


            FOLLOWPUSH(FOLLOW_collection_section_in_update_stmt730);
            collectionNode=collection_section(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleupdate_stmtEx;
            }


             MATCHT(SET, &FOLLOW_SET_in_update_stmt732);
            if  (HASEXCEPTION())
            {
                goto ruleupdate_stmtEx;
            }


            FOLLOWPUSH(FOLLOW_property_section_in_update_stmt734);
            property_section(ctx, sqlValue);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleupdate_stmtEx;
            }


            // UnQL.g:330:106: ( property_section[sqlValue] )*

            for (;;)
            {
                int alt20=2;
                switch ( LA(1) )
                {
                case ID:
                	{
                		alt20=1;
                	}
                    break;

                }

                switch (alt20)
                {
            	case 1:
            	    // UnQL.g:330:107: property_section[sqlValue]
            	    {
            	        FOLLOWPUSH(FOLLOW_property_section_in_update_stmt738);
            	        property_section(ctx, sqlValue);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleupdate_stmtEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop20;	/* break out of the loop */
            	    break;
                }
            }
            loop20: ; /* Jump out to here if this rule does not match */


            // UnQL.g:330:136: (whereSection= where_section )?
            {
                int alt21=2;
                switch ( LA(1) )
                {
                    case WHERE:
                    	{
                    		alt21=1;
                    	}
                        break;
                }

                switch (alt21)
                {
            	case 1:
            	    // UnQL.g:330:137: whereSection= where_section
            	    {
            	        FOLLOWPUSH(FOLLOW_where_section_in_update_stmt748);
            	        whereSection=where_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleupdate_stmtEx;
            	        }


            	    }
            	    break;

                }
            }

            {

                		// INSERT
                		uSQL::SQLUpdate *sqlCmd = new uSQL::SQLUpdate();
                		sqlCmd->setAsyncEnabled(isAsync);
                		sqlStmt->addChildNode(sqlCmd);

                		// Collection
                		sqlCmd->addChildNode(collectionNode);
                		
                		// Value
                		sqlCmd->addChildNode(sqlValue);

                		// WHERE
                		if (whereSection)		
                			sqlStmt->addChildNode(whereSection);
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleupdate_stmtEx; /* Prevent compiler warnings */
    ruleupdate_stmtEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end update_stmt */

/**
 * $ANTLR start property_section
 * UnQL.g:350:1: property_section[uSQL::SQLValue *sqlValue] : property '=' expr= expression_atom ;
 */
static void
property_section(pUnQLParser ctx, uSQL::SQLValue *sqlValue)
{
    uSQL::SQLExpression * expr;
    #undef	RETURN_TYPE_expr
    #define	RETURN_TYPE_expr uSQL::SQLExpression *

    UnQLParser_property_return property4;
    #undef	RETURN_TYPE_property4
    #define	RETURN_TYPE_property4 UnQLParser_property_return

    /* Initialize rule variables
     */


    		
    	
    {
        // UnQL.g:354:2: ( property '=' expr= expression_atom )
        // UnQL.g:354:4: property '=' expr= expression_atom
        {
            FOLLOWPUSH(FOLLOW_property_in_property_section773);
            property4=property(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleproperty_sectionEx;
            }


             MATCHT(90, &FOLLOW_90_in_property_section775);
            if  (HASEXCEPTION())
            {
                goto ruleproperty_sectionEx;
            }


            FOLLOWPUSH(FOLLOW_expression_atom_in_property_section779);
            expr=expression_atom(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleproperty_sectionEx;
            }


            {

                		expr->setName(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, property4.start, property4.stop))
                ));
                		sqlValue->addChildNode(expr);
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleproperty_sectionEx; /* Prevent compiler warnings */
    ruleproperty_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end property_section */

/**
 * $ANTLR start delete_stmt
 * UnQL.g:368:1: delete_stmt[uSQL::SQLStatement *sqlStmt] : (isAsync= sync_operator )? DELETE FROM collectionNode= collection_section (whereSection= where_section )? ;
 */
static void
delete_stmt(pUnQLParser ctx, uSQL::SQLStatement *sqlStmt)
{
    bool isAsync;
    #undef	RETURN_TYPE_isAsync
    #define	RETURN_TYPE_isAsync bool

    uSQL::SQLCollection * collectionNode;
    #undef	RETURN_TYPE_collectionNode
    #define	RETURN_TYPE_collectionNode uSQL::SQLCollection *

    uSQL::SQLWhere * whereSection;
    #undef	RETURN_TYPE_whereSection
    #define	RETURN_TYPE_whereSection uSQL::SQLWhere *

    /* Initialize rule variables
     */


    		uSQL::SQLValue *sqlValue = new uSQL::SQLValue();
    		isAsync = false;
    		whereSection = NULL;
    	
    {
        // UnQL.g:374:2: ( (isAsync= sync_operator )? DELETE FROM collectionNode= collection_section (whereSection= where_section )? )
        // UnQL.g:374:4: (isAsync= sync_operator )? DELETE FROM collectionNode= collection_section (whereSection= where_section )?
        {
            // UnQL.g:374:4: (isAsync= sync_operator )?
            {
                int alt22=2;
                switch ( LA(1) )
                {
                    case ASYNC:
                    case SYNC:
                    	{
                    		alt22=1;
                    	}
                        break;
                }

                switch (alt22)
                {
            	case 1:
            	    // UnQL.g:374:5: isAsync= sync_operator
            	    {
            	        FOLLOWPUSH(FOLLOW_sync_operator_in_delete_stmt808);
            	        isAsync=sync_operator(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledelete_stmtEx;
            	        }


            	    }
            	    break;

                }
            }

             MATCHT(DELETE, &FOLLOW_DELETE_in_delete_stmt812);
            if  (HASEXCEPTION())
            {
                goto ruledelete_stmtEx;
            }


             MATCHT(FROM, &FOLLOW_FROM_in_delete_stmt814);
            if  (HASEXCEPTION())
            {
                goto ruledelete_stmtEx;
            }


            FOLLOWPUSH(FOLLOW_collection_section_in_delete_stmt818);
            collectionNode=collection_section(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledelete_stmtEx;
            }


            // UnQL.g:374:75: (whereSection= where_section )?
            {
                int alt23=2;
                switch ( LA(1) )
                {
                    case WHERE:
                    	{
                    		alt23=1;
                    	}
                        break;
                }

                switch (alt23)
                {
            	case 1:
            	    // UnQL.g:374:76: whereSection= where_section
            	    {
            	        FOLLOWPUSH(FOLLOW_where_section_in_delete_stmt825);
            	        whereSection=where_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledelete_stmtEx;
            	        }


            	    }
            	    break;

                }
            }

            {

                		// DELETE
                		uSQL::SQLDelete *sqlCmd = new uSQL::SQLDelete();
                		sqlCmd->setAsyncEnabled(isAsync);
                		sqlStmt->addChildNode(sqlCmd);

                		// Collection
                		sqlCmd->addChildNode(collectionNode);
                		
                		// WHERE
                		if (whereSection)		
                			sqlStmt->addChildNode(whereSection);
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruledelete_stmtEx; /* Prevent compiler warnings */
    ruledelete_stmtEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end delete_stmt */

/**
 * $ANTLR start expression
 * UnQL.g:397:1: expression[uSQL::SQLExpression *parentSqlExpr] : (sqlExpr= expression_atom | '{' ( dictionary_literal[parentSqlExpr] ) ( COMMA dictionary_literal[parentSqlExpr] )* '}' | '[' array_literal[parentSqlExpr] ( COMMA array_literal[parentSqlExpr] )* ']' |sqlFunc= function_name '(' array_literal[sqlFunc] ( COMMA array_literal[sqlFunc] )* ')' |exprLeft= expression_atom binOper= binary_operator exprRight= expression_atom );
 */
static void
expression(pUnQLParser ctx, uSQL::SQLExpression *parentSqlExpr)
{
    uSQL::SQLExpression * sqlExpr;
    #undef	RETURN_TYPE_sqlExpr
    #define	RETURN_TYPE_sqlExpr uSQL::SQLExpression *

    uSQL::SQLFunction * sqlFunc;
    #undef	RETURN_TYPE_sqlFunc
    #define	RETURN_TYPE_sqlFunc uSQL::SQLFunction *

    uSQL::SQLExpression * exprLeft;
    #undef	RETURN_TYPE_exprLeft
    #define	RETURN_TYPE_exprLeft uSQL::SQLExpression *

    uSQL::SQLOperator * binOper;
    #undef	RETURN_TYPE_binOper
    #define	RETURN_TYPE_binOper uSQL::SQLOperator *

    uSQL::SQLExpression * exprRight;
    #undef	RETURN_TYPE_exprRight
    #define	RETURN_TYPE_exprRight uSQL::SQLExpression *

    /* Initialize rule variables
     */

    {
        {
            //  UnQL.g:398:3: (sqlExpr= expression_atom | '{' ( dictionary_literal[parentSqlExpr] ) ( COMMA dictionary_literal[parentSqlExpr] )* '}' | '[' array_literal[parentSqlExpr] ( COMMA array_literal[parentSqlExpr] )* ']' |sqlFunc= function_name '(' array_literal[sqlFunc] ( COMMA array_literal[sqlFunc] )* ')' |exprLeft= expression_atom binOper= binary_operator exprRight= expression_atom )

            ANTLR3_UINT32 alt27;

            alt27=5;

            switch ( LA(1) )
            {
            case ID:
            	{
            		switch ( LA(2) )
            		{
            		case EOF:
            		case AS:
            		case COMMA:
            		case FLOAT:
            		case FROM:
            		case GROUP:
            		case HAVING:
            		case ID:
            		case LIMIT:
            		case NUMBER:
            		case ORDER:
            		case STRING:
            		case WHERE:
            		case 93:
            		case 94:
            			{
            				alt27=1;
            			}
            		    break;
            		case 87:
            			{
            				alt27=4;
            			}
            		    break;
            		case AND:
            		case EQ:
            		case GE:
            		case GT:
            		case LE:
            		case NOTEQ:
            		case OP_LT:
            		case OR:
            			{
            				alt27=5;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 27;
            		    EXCEPTION->state        = 1;


            		    goto ruleexpressionEx;

            		}

            	}
                break;
            case NUMBER:
            	{
            		switch ( LA(2) )
            		{
            		case EOF:
            		case AS:
            		case COMMA:
            		case FLOAT:
            		case FROM:
            		case GROUP:
            		case HAVING:
            		case ID:
            		case LIMIT:
            		case NUMBER:
            		case ORDER:
            		case STRING:
            		case WHERE:
            		case 93:
            		case 94:
            			{
            				alt27=1;
            			}
            		    break;
            		case AND:
            		case EQ:
            		case GE:
            		case GT:
            		case LE:
            		case NOTEQ:
            		case OP_LT:
            		case OR:
            			{
            				alt27=5;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 27;
            		    EXCEPTION->state        = 2;


            		    goto ruleexpressionEx;

            		}

            	}
                break;
            case FLOAT:
            	{
            		switch ( LA(2) )
            		{
            		case EOF:
            		case AS:
            		case COMMA:
            		case FLOAT:
            		case FROM:
            		case GROUP:
            		case HAVING:
            		case ID:
            		case LIMIT:
            		case NUMBER:
            		case ORDER:
            		case STRING:
            		case WHERE:
            		case 93:
            		case 94:
            			{
            				alt27=1;
            			}
            		    break;
            		case AND:
            		case EQ:
            		case GE:
            		case GT:
            		case LE:
            		case NOTEQ:
            		case OP_LT:
            		case OR:
            			{
            				alt27=5;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 27;
            		    EXCEPTION->state        = 3;


            		    goto ruleexpressionEx;

            		}

            	}
                break;
            case STRING:
            	{
            		switch ( LA(2) )
            		{
            		case EOF:
            		case AS:
            		case COMMA:
            		case FLOAT:
            		case FROM:
            		case GROUP:
            		case HAVING:
            		case ID:
            		case LIMIT:
            		case NUMBER:
            		case ORDER:
            		case STRING:
            		case WHERE:
            		case 93:
            		case 94:
            			{
            				alt27=1;
            			}
            		    break;
            		case AND:
            		case EQ:
            		case GE:
            		case GT:
            		case LE:
            		case NOTEQ:
            		case OP_LT:
            		case OR:
            			{
            				alt27=5;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 27;
            		    EXCEPTION->state        = 4;


            		    goto ruleexpressionEx;

            		}

            	}
                break;
            case 94:
            	{
            		switch ( LA(2) )
            		{
            		case EOF:
            		case AS:
            		case COMMA:
            		case FLOAT:
            		case FROM:
            		case GROUP:
            		case HAVING:
            		case ID:
            		case LIMIT:
            		case NUMBER:
            		case ORDER:
            		case STRING:
            		case WHERE:
            		case 93:
            		case 94:
            			{
            				alt27=1;
            			}
            		    break;
            		case AND:
            		case EQ:
            		case GE:
            		case GT:
            		case LE:
            		case NOTEQ:
            		case OP_LT:
            		case OR:
            			{
            				alt27=5;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 27;
            		    EXCEPTION->state        = 5;


            		    goto ruleexpressionEx;

            		}

            	}
                break;
            case 93:
            	{
            		switch ( LA(2) )
            		{
            		case EOF:
            		case AS:
            		case COMMA:
            		case FLOAT:
            		case FROM:
            		case GROUP:
            		case HAVING:
            		case ID:
            		case LIMIT:
            		case NUMBER:
            		case ORDER:
            		case STRING:
            		case WHERE:
            		case 93:
            		case 94:
            			{
            				alt27=1;
            			}
            		    break;
            		case AND:
            		case EQ:
            		case GE:
            		case GT:
            		case LE:
            		case NOTEQ:
            		case OP_LT:
            		case OR:
            			{
            				alt27=5;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 27;
            		    EXCEPTION->state        = 6;


            		    goto ruleexpressionEx;

            		}

            	}
                break;
            case 95:
            	{
            		alt27=2;
            	}
                break;
            case 91:
            	{
            		alt27=3;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 27;
                EXCEPTION->state        = 0;


                goto ruleexpressionEx;

            }

            switch (alt27)
            {
        	case 1:
        	    // UnQL.g:398:5: sqlExpr= expression_atom
        	    {
        	        FOLLOWPUSH(FOLLOW_expression_atom_in_expression850);
        	        sqlExpr=expression_atom(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }


        	        {

        	            		parentSqlExpr->addExpression(sqlExpr);
        	            	  
        	        }


        	    }
        	    break;
        	case 2:
        	    // UnQL.g:401:4: '{' ( dictionary_literal[parentSqlExpr] ) ( COMMA dictionary_literal[parentSqlExpr] )* '}'
        	    {
        	         MATCHT(95, &FOLLOW_95_in_expression857);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }


        	        // UnQL.g:401:8: ( dictionary_literal[parentSqlExpr] )
        	        // UnQL.g:401:9: dictionary_literal[parentSqlExpr]
        	        {
        	            FOLLOWPUSH(FOLLOW_dictionary_literal_in_expression860);
        	            dictionary_literal(ctx, parentSqlExpr);

        	            FOLLOWPOP();
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleexpressionEx;
        	            }


        	        }


        	        // UnQL.g:401:44: ( COMMA dictionary_literal[parentSqlExpr] )*

        	        for (;;)
        	        {
        	            int alt24=2;
        	            switch ( LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt24=1;
        	            	}
        	                break;

        	            }

        	            switch (alt24)
        	            {
        	        	case 1:
        	        	    // UnQL.g:401:45: COMMA dictionary_literal[parentSqlExpr]
        	        	    {
        	        	         MATCHT(COMMA, &FOLLOW_COMMA_in_expression865);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexpressionEx;
        	        	        }


        	        	        FOLLOWPUSH(FOLLOW_dictionary_literal_in_expression867);
        	        	        dictionary_literal(ctx, parentSqlExpr);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexpressionEx;
        	        	        }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop24;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop24: ; /* Jump out to here if this rule does not match */


        	         MATCHT(96, &FOLLOW_96_in_expression872);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }


        	    }
        	    break;
        	case 3:
        	    // UnQL.g:402:4: '[' array_literal[parentSqlExpr] ( COMMA array_literal[parentSqlExpr] )* ']'
        	    {
        	         MATCHT(91, &FOLLOW_91_in_expression877);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_array_literal_in_expression879);
        	        array_literal(ctx, parentSqlExpr);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }


        	        // UnQL.g:402:37: ( COMMA array_literal[parentSqlExpr] )*

        	        for (;;)
        	        {
        	            int alt25=2;
        	            switch ( LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt25=1;
        	            	}
        	                break;

        	            }

        	            switch (alt25)
        	            {
        	        	case 1:
        	        	    // UnQL.g:402:38: COMMA array_literal[parentSqlExpr]
        	        	    {
        	        	         MATCHT(COMMA, &FOLLOW_COMMA_in_expression883);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexpressionEx;
        	        	        }


        	        	        FOLLOWPUSH(FOLLOW_array_literal_in_expression885);
        	        	        array_literal(ctx, parentSqlExpr);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexpressionEx;
        	        	        }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop25;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop25: ; /* Jump out to here if this rule does not match */


        	         MATCHT(92, &FOLLOW_92_in_expression891);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }


        	    }
        	    break;
        	case 4:
        	    // UnQL.g:403:4: sqlFunc= function_name '(' array_literal[sqlFunc] ( COMMA array_literal[sqlFunc] )* ')'
        	    {
        	        FOLLOWPUSH(FOLLOW_function_name_in_expression898);
        	        sqlFunc=function_name(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }


        	         MATCHT(87, &FOLLOW_87_in_expression900);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_array_literal_in_expression902);
        	        array_literal(ctx, sqlFunc);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }


        	        // UnQL.g:403:53: ( COMMA array_literal[sqlFunc] )*

        	        for (;;)
        	        {
        	            int alt26=2;
        	            switch ( LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt26=1;
        	            	}
        	                break;

        	            }

        	            switch (alt26)
        	            {
        	        	case 1:
        	        	    // UnQL.g:403:54: COMMA array_literal[sqlFunc]
        	        	    {
        	        	         MATCHT(COMMA, &FOLLOW_COMMA_in_expression906);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexpressionEx;
        	        	        }


        	        	        FOLLOWPUSH(FOLLOW_array_literal_in_expression908);
        	        	        array_literal(ctx, sqlFunc);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexpressionEx;
        	        	        }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop26;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop26: ; /* Jump out to here if this rule does not match */


        	         MATCHT(88, &FOLLOW_88_in_expression914);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }


        	        {

        	            		parentSqlExpr->addExpression(sqlFunc);
        	            	  
        	        }


        	    }
        	    break;
        	case 5:
        	    // UnQL.g:406:4: exprLeft= expression_atom binOper= binary_operator exprRight= expression_atom
        	    {
        	        FOLLOWPUSH(FOLLOW_expression_atom_in_expression923);
        	        exprLeft=expression_atom(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_binary_operator_in_expression927);
        	        binOper=binary_operator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_expression_atom_in_expression931);
        	        exprRight=expression_atom(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }


        	        {

        	            		parentSqlExpr->addExpression(binOper);
        	            		binOper->addExpression(exprLeft);
        	            		binOper->addExpression(exprRight);
        	            	  
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end expression */

/**
 * $ANTLR start expression_atom
 * UnQL.g:413:1: expression_atom returns [uSQL::SQLExpression *sqlExpr] : ( property | integer_literal | real_literal | string_literal | true_literal | false_literal );
 */
static uSQL::SQLExpression *
expression_atom(pUnQLParser ctx)
{
    uSQL::SQLExpression * sqlExpr;


    UnQLParser_property_return property5;
    #undef	RETURN_TYPE_property5
    #define	RETURN_TYPE_property5 UnQLParser_property_return

    UnQLParser_integer_literal_return integer_literal6;
    #undef	RETURN_TYPE_integer_literal6
    #define	RETURN_TYPE_integer_literal6 UnQLParser_integer_literal_return

    UnQLParser_real_literal_return real_literal7;
    #undef	RETURN_TYPE_real_literal7
    #define	RETURN_TYPE_real_literal7 UnQLParser_real_literal_return

    UnQLParser_string_literal_return string_literal8;
    #undef	RETURN_TYPE_string_literal8
    #define	RETURN_TYPE_string_literal8 UnQLParser_string_literal_return

    UnQLParser_true_literal_return true_literal9;
    #undef	RETURN_TYPE_true_literal9
    #define	RETURN_TYPE_true_literal9 UnQLParser_true_literal_return

    UnQLParser_false_literal_return false_literal10;
    #undef	RETURN_TYPE_false_literal10
    #define	RETURN_TYPE_false_literal10 UnQLParser_false_literal_return

    /* Initialize rule variables
     */


    		sqlExpr = new uSQL::SQLExpression();
    	
    {
        {
            //  UnQL.g:417:3: ( property | integer_literal | real_literal | string_literal | true_literal | false_literal )

            ANTLR3_UINT32 alt28;

            alt28=6;

            switch ( LA(1) )
            {
            case ID:
            	{
            		alt28=1;
            	}
                break;
            case NUMBER:
            	{
            		alt28=2;
            	}
                break;
            case FLOAT:
            	{
            		alt28=3;
            	}
                break;
            case STRING:
            	{
            		alt28=4;
            	}
                break;
            case 94:
            	{
            		alt28=5;
            	}
                break;
            case 93:
            	{
            		alt28=6;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 28;
                EXCEPTION->state        = 0;


                goto ruleexpression_atomEx;

            }

            switch (alt28)
            {
        	case 1:
        	    // UnQL.g:417:5: property
        	    {
        	        FOLLOWPUSH(FOLLOW_property_in_expression_atom955);
        	        property5=property(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpression_atomEx;
        	        }


        	        {

        	            		sqlExpr->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, property5.start, property5.stop))
        	            ));
        	            	  
        	        }


        	    }
        	    break;
        	case 2:
        	    // UnQL.g:420:4: integer_literal
        	    {
        	        FOLLOWPUSH(FOLLOW_integer_literal_in_expression_atom962);
        	        integer_literal6=integer_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpression_atomEx;
        	        }


        	        {

        	            		sqlExpr->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, integer_literal6.start, integer_literal6.stop))
        	            ));
        	            	  
        	        }


        	    }
        	    break;
        	case 3:
        	    // UnQL.g:423:4: real_literal
        	    {
        	        FOLLOWPUSH(FOLLOW_real_literal_in_expression_atom969);
        	        real_literal7=real_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpression_atomEx;
        	        }


        	        {

        	            		sqlExpr->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, real_literal7.start, real_literal7.stop))
        	            ));
        	            	  
        	        }


        	    }
        	    break;
        	case 4:
        	    // UnQL.g:426:4: string_literal
        	    {
        	        FOLLOWPUSH(FOLLOW_string_literal_in_expression_atom976);
        	        string_literal8=string_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpression_atomEx;
        	        }


        	        {

        	            		sqlExpr->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, string_literal8.start, string_literal8.stop))
        	            ));
        	            	  
        	        }


        	    }
        	    break;
        	case 5:
        	    // UnQL.g:429:4: true_literal
        	    {
        	        FOLLOWPUSH(FOLLOW_true_literal_in_expression_atom983);
        	        true_literal9=true_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpression_atomEx;
        	        }


        	        {

        	            		sqlExpr->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, true_literal9.start, true_literal9.stop))
        	            ));
        	            	  
        	        }


        	    }
        	    break;
        	case 6:
        	    // UnQL.g:432:4: false_literal
        	    {
        	        FOLLOWPUSH(FOLLOW_false_literal_in_expression_atom990);
        	        false_literal10=false_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpression_atomEx;
        	        }


        	        {

        	            		sqlExpr->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, false_literal10.start, false_literal10.stop))
        	            ));
        	            	  
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleexpression_atomEx; /* Prevent compiler warnings */
    ruleexpression_atomEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlExpr;
}
/* $ANTLR end expression_atom */

/**
 * $ANTLR start property
 * UnQL.g:437:1: property : ID ;
 */
static UnQLParser_property_return
property(pUnQLParser ctx)
{
    UnQLParser_property_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // UnQL.g:438:2: ( ID )
        // UnQL.g:438:4: ID
        {
             MATCHT(ID, &FOLLOW_ID_in_property1003);
            if  (HASEXCEPTION())
            {
                goto rulepropertyEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulepropertyEx; /* Prevent compiler warnings */
    rulepropertyEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end property */

/**
 * $ANTLR start integer_literal
 * UnQL.g:441:1: integer_literal : NUMBER ;
 */
static UnQLParser_integer_literal_return
integer_literal(pUnQLParser ctx)
{
    UnQLParser_integer_literal_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // UnQL.g:442:2: ( NUMBER )
        // UnQL.g:442:4: NUMBER
        {
             MATCHT(NUMBER, &FOLLOW_NUMBER_in_integer_literal1015);
            if  (HASEXCEPTION())
            {
                goto ruleinteger_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleinteger_literalEx; /* Prevent compiler warnings */
    ruleinteger_literalEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end integer_literal */

/**
 * $ANTLR start real_literal
 * UnQL.g:445:1: real_literal : FLOAT ;
 */
static UnQLParser_real_literal_return
real_literal(pUnQLParser ctx)
{
    UnQLParser_real_literal_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // UnQL.g:446:2: ( FLOAT )
        // UnQL.g:446:4: FLOAT
        {
             MATCHT(FLOAT, &FOLLOW_FLOAT_in_real_literal1026);
            if  (HASEXCEPTION())
            {
                goto rulereal_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulereal_literalEx; /* Prevent compiler warnings */
    rulereal_literalEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end real_literal */

/**
 * $ANTLR start string_literal
 * UnQL.g:449:1: string_literal : STRING ;
 */
static UnQLParser_string_literal_return
string_literal(pUnQLParser ctx)
{
    UnQLParser_string_literal_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // UnQL.g:450:2: ( STRING )
        // UnQL.g:450:4: STRING
        {
             MATCHT(STRING, &FOLLOW_STRING_in_string_literal1037);
            if  (HASEXCEPTION())
            {
                goto rulestring_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulestring_literalEx; /* Prevent compiler warnings */
    rulestring_literalEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end string_literal */

/**
 * $ANTLR start true_literal
 * UnQL.g:453:1: true_literal : 'true' ;
 */
static UnQLParser_true_literal_return
true_literal(pUnQLParser ctx)
{
    UnQLParser_true_literal_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // UnQL.g:454:2: ( 'true' )
        // UnQL.g:454:4: 'true'
        {
             MATCHT(94, &FOLLOW_94_in_true_literal1048);
            if  (HASEXCEPTION())
            {
                goto ruletrue_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruletrue_literalEx; /* Prevent compiler warnings */
    ruletrue_literalEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end true_literal */

/**
 * $ANTLR start false_literal
 * UnQL.g:457:1: false_literal : 'false' ;
 */
static UnQLParser_false_literal_return
false_literal(pUnQLParser ctx)
{
    UnQLParser_false_literal_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // UnQL.g:458:2: ( 'false' )
        // UnQL.g:458:4: 'false'
        {
             MATCHT(93, &FOLLOW_93_in_false_literal1060);
            if  (HASEXCEPTION())
            {
                goto rulefalse_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulefalse_literalEx; /* Prevent compiler warnings */
    rulefalse_literalEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end false_literal */

/**
 * $ANTLR start dictionary_literal
 * UnQL.g:461:1: dictionary_literal[uSQL::SQLExpression *parentSqlExpr] : name ':' sqlExpr= expression_atom ;
 */
static void
dictionary_literal(pUnQLParser ctx, uSQL::SQLExpression *parentSqlExpr)
{
    uSQL::SQLExpression * sqlExpr;
    #undef	RETURN_TYPE_sqlExpr
    #define	RETURN_TYPE_sqlExpr uSQL::SQLExpression *

    UnQLParser_name_return name11;
    #undef	RETURN_TYPE_name11
    #define	RETURN_TYPE_name11 UnQLParser_name_return

    /* Initialize rule variables
     */

    {
        // UnQL.g:462:2: ( name ':' sqlExpr= expression_atom )
        // UnQL.g:462:4: name ':' sqlExpr= expression_atom
        {
            FOLLOWPUSH(FOLLOW_name_in_dictionary_literal1073);
            name11=name(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledictionary_literalEx;
            }


             MATCHT(89, &FOLLOW_89_in_dictionary_literal1075);
            if  (HASEXCEPTION())
            {
                goto ruledictionary_literalEx;
            }


            FOLLOWPUSH(FOLLOW_expression_atom_in_dictionary_literal1079);
            sqlExpr=expression_atom(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledictionary_literalEx;
            }


            {

                		sqlExpr->setName(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, name11.start, name11.stop))
                ));
                		parentSqlExpr->addExpression(sqlExpr);
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruledictionary_literalEx; /* Prevent compiler warnings */
    ruledictionary_literalEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end dictionary_literal */

/**
 * $ANTLR start array_literal
 * UnQL.g:468:1: array_literal[uSQL::SQLExpression *parentSqlExpr] : sqlExpr= expression_atom ;
 */
static void
array_literal(pUnQLParser ctx, uSQL::SQLExpression *parentSqlExpr)
{
    uSQL::SQLExpression * sqlExpr;
    #undef	RETURN_TYPE_sqlExpr
    #define	RETURN_TYPE_sqlExpr uSQL::SQLExpression *

    /* Initialize rule variables
     */

    {
        // UnQL.g:469:2: (sqlExpr= expression_atom )
        // UnQL.g:469:4: sqlExpr= expression_atom
        {
            FOLLOWPUSH(FOLLOW_expression_atom_in_array_literal1096);
            sqlExpr=expression_atom(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulearray_literalEx;
            }


            {

                		parentSqlExpr->addExpression(sqlExpr);
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulearray_literalEx; /* Prevent compiler warnings */
    rulearray_literalEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end array_literal */

/**
 * $ANTLR start function_name
 * UnQL.g:474:1: function_name returns [uSQL::SQLFunction *sqlFunc] : ID ;
 */
static uSQL::SQLFunction *
function_name(pUnQLParser ctx)
{
    uSQL::SQLFunction * sqlFunc;


    pANTLR3_COMMON_TOKEN    ID12;

    /* Initialize rule variables
     */


    		sqlFunc = new uSQL::SQLFunction();
    	
    ID12       = NULL;

    {
        // UnQL.g:478:2: ( ID )
        // UnQL.g:478:4: ID
        {
            ID12 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_function_name1119);
            if  (HASEXCEPTION())
            {
                goto rulefunction_nameEx;
            }


            {

                		sqlFunc->setValue(CG_ANTLR3_STRING_2_UTF8((ID12->getText(ID12))));
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulefunction_nameEx; /* Prevent compiler warnings */
    rulefunction_nameEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlFunc;
}
/* $ANTLR end function_name */

/**
 * $ANTLR start function_literal
 * UnQL.g:483:1: function_literal[uSQL::SQLExpression *parentSqlExpr] : expression[valueParentExpr] ;
 */
static void
function_literal(pUnQLParser ctx, uSQL::SQLExpression *parentSqlExpr)
{
    /* Initialize rule variables
     */


    		uSQL::SQLExpression *valueParentExpr = new uSQL::SQLExpression();
    	
    {
        // UnQL.g:490:2: ( expression[valueParentExpr] )
        // UnQL.g:490:4: expression[valueParentExpr]
        {
            FOLLOWPUSH(FOLLOW_expression_in_function_literal1146);
            expression(ctx, valueParentExpr);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunction_literalEx;
            }


            {

                 		uSQL::SQLExpression *valueExpr = valueParentExpr->getExpression(0);
                		uSQL::SQLExpression *sqlExpr = new uSQL::SQLExpression();
                		sqlExpr->setValue(valueExpr ? valueExpr->getValue() : "");
                		parentSqlExpr->addExpression(sqlExpr);
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulefunction_literalEx; /* Prevent compiler warnings */
    rulefunction_literalEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
            else
            {
                {

                    		delete valueParentExpr;
                    	
                }
            }


    return ;
}
/* $ANTLR end function_literal */

/**
 * $ANTLR start binary_operator
 * UnQL.g:498:1: binary_operator returns [uSQL::SQLOperator *sqlOper] : ( EQ | OP_LT | LE | GT | GE | NOTEQ | AND | OR );
 */
static uSQL::SQLOperator *
binary_operator(pUnQLParser ctx)
{
    uSQL::SQLOperator * sqlOper;


    /* Initialize rule variables
     */


    		sqlOper = new uSQL::SQLOperator();
    	
    {
        {
            //  UnQL.g:502:2: ( EQ | OP_LT | LE | GT | GE | NOTEQ | AND | OR )

            ANTLR3_UINT32 alt29;

            alt29=8;

            switch ( LA(1) )
            {
            case EQ:
            	{
            		alt29=1;
            	}
                break;
            case OP_LT:
            	{
            		alt29=2;
            	}
                break;
            case LE:
            	{
            		alt29=3;
            	}
                break;
            case GT:
            	{
            		alt29=4;
            	}
                break;
            case GE:
            	{
            		alt29=5;
            	}
                break;
            case NOTEQ:
            	{
            		alt29=6;
            	}
                break;
            case AND:
            	{
            		alt29=7;
            	}
                break;
            case OR:
            	{
            		alt29=8;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 29;
                EXCEPTION->state        = 0;


                goto rulebinary_operatorEx;

            }

            switch (alt29)
            {
        	case 1:
        	    // UnQL.g:502:4: EQ
        	    {
        	         MATCHT(EQ, &FOLLOW_EQ_in_binary_operator1170);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinary_operatorEx;
        	        }


        	        {

        	            		sqlOper->setValue(1/*uSQL::SQLOperator::EQ*/);
        	            	  
        	        }


        	    }
        	    break;
        	case 2:
        	    // UnQL.g:505:4: OP_LT
        	    {
        	         MATCHT(OP_LT, &FOLLOW_OP_LT_in_binary_operator1177);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinary_operatorEx;
        	        }


        	        {

        	            		sqlOper->setValue(2/*uSQL::SQLOperator::LT*/);
        	            	  
        	        }


        	    }
        	    break;
        	case 3:
        	    // UnQL.g:508:4: LE
        	    {
        	         MATCHT(LE, &FOLLOW_LE_in_binary_operator1184);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinary_operatorEx;
        	        }


        	        {

        	            		sqlOper->setValue(3/*uSQL::SQLOperator::GT*/);
        	            	  
        	        }


        	    }
        	    break;
        	case 4:
        	    // UnQL.g:511:4: GT
        	    {
        	         MATCHT(GT, &FOLLOW_GT_in_binary_operator1191);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinary_operatorEx;
        	        }


        	        {

        	            		sqlOper->setValue(4/*uSQL::SQLOperator::LE*/);
        	            	  
        	        }


        	    }
        	    break;
        	case 5:
        	    // UnQL.g:514:4: GE
        	    {
        	         MATCHT(GE, &FOLLOW_GE_in_binary_operator1198);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinary_operatorEx;
        	        }


        	        {

        	            		sqlOper->setValue(5/*uSQL::SQLOperator::GE*/);
        	            	  
        	        }


        	    }
        	    break;
        	case 6:
        	    // UnQL.g:517:4: NOTEQ
        	    {
        	         MATCHT(NOTEQ, &FOLLOW_NOTEQ_in_binary_operator1205);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinary_operatorEx;
        	        }


        	        {

        	            		sqlOper->setValue(6/*uSQL::SQLOperator::NOTEQ*/);
        	            	  
        	        }


        	    }
        	    break;
        	case 7:
        	    // UnQL.g:520:4: AND
        	    {
        	         MATCHT(AND, &FOLLOW_AND_in_binary_operator1212);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinary_operatorEx;
        	        }


        	        {

        	            		sqlOper->setValue(7/*uSQL::SQLOperator::AND*/);
        	            	  
        	        }


        	    }
        	    break;
        	case 8:
        	    // UnQL.g:523:4: OR
        	    {
        	         MATCHT(OR, &FOLLOW_OR_in_binary_operator1219);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinary_operatorEx;
        	        }


        	        {

        	            		sqlOper->setValue(8/*uSQL::SQLOperator::OR*/);
        	            	  
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulebinary_operatorEx; /* Prevent compiler warnings */
    rulebinary_operatorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlOper;
}
/* $ANTLR end binary_operator */

/**
 * $ANTLR start sync_operator
 * UnQL.g:534:1: sync_operator returns [bool isAync] : ( SYNC | ASYNC );
 */
static bool
sync_operator(pUnQLParser ctx)
{
    bool isAync;


    /* Initialize rule variables
     */

    {
        {
            //  UnQL.g:535:2: ( SYNC | ASYNC )

            ANTLR3_UINT32 alt30;

            alt30=2;

            switch ( LA(1) )
            {
            case SYNC:
            	{
            		alt30=1;
            	}
                break;
            case ASYNC:
            	{
            		alt30=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 30;
                EXCEPTION->state        = 0;


                goto rulesync_operatorEx;

            }

            switch (alt30)
            {
        	case 1:
        	    // UnQL.g:535:4: SYNC
        	    {
        	         MATCHT(SYNC, &FOLLOW_SYNC_in_sync_operator1239);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesync_operatorEx;
        	        }


        	        {

        	            		isAync = false;
        	            	  
        	        }


        	    }
        	    break;
        	case 2:
        	    // UnQL.g:538:4: ASYNC
        	    {
        	         MATCHT(ASYNC, &FOLLOW_ASYNC_in_sync_operator1246);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesync_operatorEx;
        	        }


        	        {

        	            		isAync = true;
        	            	  
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulesync_operatorEx; /* Prevent compiler warnings */
    rulesync_operatorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return isAync;
}
/* $ANTLR end sync_operator */

/**
 * $ANTLR start compound_operator
 * UnQL.g:543:1: compound_operator : ( UNION ( ALL )? | INTERSECT | EXCEPT );
 */
static void
compound_operator(pUnQLParser ctx)
{
    /* Initialize rule variables
     */

    {
        {
            //  UnQL.g:544:2: ( UNION ( ALL )? | INTERSECT | EXCEPT )

            ANTLR3_UINT32 alt32;

            alt32=3;

            switch ( LA(1) )
            {
            case UNION:
            	{
            		alt32=1;
            	}
                break;
            case INTERSECT:
            	{
            		alt32=2;
            	}
                break;
            case EXCEPT:
            	{
            		alt32=3;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 32;
                EXCEPTION->state        = 0;


                goto rulecompound_operatorEx;

            }

            switch (alt32)
            {
        	case 1:
        	    // UnQL.g:544:4: UNION ( ALL )?
        	    {
        	         MATCHT(UNION, &FOLLOW_UNION_in_compound_operator1259);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecompound_operatorEx;
        	        }


        	        // UnQL.g:544:10: ( ALL )?
        	        {
        	            int alt31=2;
        	            switch ( LA(1) )
        	            {
        	                case ALL:
        	                	{
        	                		alt31=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt31)
        	            {
        	        	case 1:
        	        	    // UnQL.g:544:11: ALL
        	        	    {
        	        	         MATCHT(ALL, &FOLLOW_ALL_in_compound_operator1262);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecompound_operatorEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // UnQL.g:545:4: INTERSECT
        	    {
        	         MATCHT(INTERSECT, &FOLLOW_INTERSECT_in_compound_operator1269);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecompound_operatorEx;
        	        }


        	    }
        	    break;
        	case 3:
        	    // UnQL.g:546:4: EXCEPT
        	    {
        	         MATCHT(EXCEPT, &FOLLOW_EXCEPT_in_compound_operator1274);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecompound_operatorEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulecompound_operatorEx; /* Prevent compiler warnings */
    rulecompound_operatorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end compound_operator */

/**
 * $ANTLR start condition_operator
 * UnQL.g:549:1: condition_operator : ( EQ | OP_LT | LE | GT | GE | NOTEQ );
 */
static void
condition_operator(pUnQLParser ctx)
{
    /* Initialize rule variables
     */

    {
        // UnQL.g:550:2: ( EQ | OP_LT | LE | GT | GE | NOTEQ )
        // UnQL.g:
        {
            if ( LA(1) == EQ || LA(1) == GE || LA(1) == GT || LA(1) == LE || LA(1) == NOTEQ || LA(1) == OP_LT )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto rulecondition_operatorEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulecondition_operatorEx; /* Prevent compiler warnings */
    rulecondition_operatorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end condition_operator */

/**
 * $ANTLR start value
 * UnQL.g:558:1: value : ID ;
 */
static void
value(pUnQLParser ctx)
{
    /* Initialize rule variables
     */

    {
        // UnQL.g:559:2: ( ID )
        // UnQL.g:559:4: ID
        {
             MATCHT(ID, &FOLLOW_ID_in_value1323);
            if  (HASEXCEPTION())
            {
                goto rulevalueEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulevalueEx; /* Prevent compiler warnings */
    rulevalueEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end value */

/**
 * $ANTLR start name
 * UnQL.g:562:1: name : ID ;
 */
static UnQLParser_name_return
name(pUnQLParser ctx)
{
    UnQLParser_name_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // UnQL.g:563:2: ( ID )
        // UnQL.g:563:4: ID
        {
             MATCHT(ID, &FOLLOW_ID_in_name1335);
            if  (HASEXCEPTION())
            {
                goto rulenameEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulenameEx; /* Prevent compiler warnings */
    rulenameEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end name */

/**
 * $ANTLR start collection_section
 * UnQL.g:566:1: collection_section returns [uSQL::SQLCollection *sqlCollection] : collection_name ;
 */
static uSQL::SQLCollection *
collection_section(pUnQLParser ctx)
{
    uSQL::SQLCollection * sqlCollection;


    UnQLParser_collection_name_return collection_name13;
    #undef	RETURN_TYPE_collection_name13
    #define	RETURN_TYPE_collection_name13 UnQLParser_collection_name_return

    /* Initialize rule variables
     */


    		sqlCollection = new uSQL::SQLCollection();
    	
    {
        // UnQL.g:570:2: ( collection_name )
        // UnQL.g:570:4: collection_name
        {
            FOLLOWPUSH(FOLLOW_collection_name_in_collection_section1356);
            collection_name13=collection_name(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecollection_sectionEx;
            }


            {

                		sqlCollection->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, collection_name13.start, collection_name13.stop))
                ));
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulecollection_sectionEx; /* Prevent compiler warnings */
    rulecollection_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlCollection;
}
/* $ANTLR end collection_section */

/**
 * $ANTLR start collection_name
 * UnQL.g:575:1: collection_name : ( ID | string_literal );
 */
static UnQLParser_collection_name_return
collection_name(pUnQLParser ctx)
{
    UnQLParser_collection_name_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        {
            //  UnQL.g:576:2: ( ID | string_literal )

            ANTLR3_UINT32 alt33;

            alt33=2;

            switch ( LA(1) )
            {
            case ID:
            	{
            		alt33=1;
            	}
                break;
            case STRING:
            	{
            		alt33=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 33;
                EXCEPTION->state        = 0;


                goto rulecollection_nameEx;

            }

            switch (alt33)
            {
        	case 1:
        	    // UnQL.g:576:4: ID
        	    {
        	         MATCHT(ID, &FOLLOW_ID_in_collection_name1369);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecollection_nameEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // UnQL.g:577:4: string_literal
        	    {
        	        FOLLOWPUSH(FOLLOW_string_literal_in_collection_name1374);
        	        string_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecollection_nameEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulecollection_nameEx; /* Prevent compiler warnings */
    rulecollection_nameEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end collection_name */

/**
 * $ANTLR start index_section
 * UnQL.g:580:1: index_section returns [uSQL::SQLIndex *sqlIndex] : index_name ;
 */
static uSQL::SQLIndex *
index_section(pUnQLParser ctx)
{
    uSQL::SQLIndex * sqlIndex;


    UnQLParser_index_name_return index_name14;
    #undef	RETURN_TYPE_index_name14
    #define	RETURN_TYPE_index_name14 UnQLParser_index_name_return

    /* Initialize rule variables
     */


    		sqlIndex = new uSQL::SQLIndex();
    	
    {
        // UnQL.g:584:2: ( index_name )
        // UnQL.g:584:4: index_name
        {
            FOLLOWPUSH(FOLLOW_index_name_in_index_section1396);
            index_name14=index_name(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleindex_sectionEx;
            }


            {

                		sqlIndex->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, index_name14.start, index_name14.stop))
                ));
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleindex_sectionEx; /* Prevent compiler warnings */
    ruleindex_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlIndex;
}
/* $ANTLR end index_section */

/**
 * $ANTLR start index_name
 * UnQL.g:589:1: index_name : ( ID | string_literal );
 */
static UnQLParser_index_name_return
index_name(pUnQLParser ctx)
{
    UnQLParser_index_name_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        {
            //  UnQL.g:590:2: ( ID | string_literal )

            ANTLR3_UINT32 alt34;

            alt34=2;

            switch ( LA(1) )
            {
            case ID:
            	{
            		alt34=1;
            	}
                break;
            case STRING:
            	{
            		alt34=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 34;
                EXCEPTION->state        = 0;


                goto ruleindex_nameEx;

            }

            switch (alt34)
            {
        	case 1:
        	    // UnQL.g:590:4: ID
        	    {
        	         MATCHT(ID, &FOLLOW_ID_in_index_name1409);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleindex_nameEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // UnQL.g:591:4: string_literal
        	    {
        	        FOLLOWPUSH(FOLLOW_string_literal_in_index_name1414);
        	        string_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleindex_nameEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleindex_nameEx; /* Prevent compiler warnings */
    ruleindex_nameEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end index_name */

/**
 * $ANTLR start where_section
 * UnQL.g:594:1: where_section returns [uSQL::SQLWhere *sqlWhere] : WHERE expression[sqlWhere] ;
 */
static uSQL::SQLWhere *
where_section(pUnQLParser ctx)
{
    uSQL::SQLWhere * sqlWhere;


    /* Initialize rule variables
     */


    		sqlWhere = new uSQL::SQLWhere();
    	
    {
        // UnQL.g:598:2: ( WHERE expression[sqlWhere] )
        // UnQL.g:598:4: WHERE expression[sqlWhere]
        {
             MATCHT(WHERE, &FOLLOW_WHERE_in_where_section1435);
            if  (HASEXCEPTION())
            {
                goto rulewhere_sectionEx;
            }


            FOLLOWPUSH(FOLLOW_expression_in_where_section1437);
            expression(ctx, sqlWhere);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhere_sectionEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulewhere_sectionEx; /* Prevent compiler warnings */
    rulewhere_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlWhere;
}
/* $ANTLR end where_section */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */






/* End of code
 * =============================================================================
 */
