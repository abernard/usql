/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : SQL92.g
 *     -                            On : 2011-12-06 01:24:00
 *     -                 for the lexer : SQL92LexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
SQL92Lexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pSQL92Lexer, which is returned from a call to SQL92LexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pSQL92Lexer are  as follows:
 *
 *  - 
 void
      pSQL92Lexer->T__93(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->T__94(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->T__95(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->ASTERISK(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->PERIOD(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->EQ(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->OP_LT(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->LE(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->GT(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->GE(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->NOTEQ(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->AND(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->OR(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->COMMA(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->SEMICOLON(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->A(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->B(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->C(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->D(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->E(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->F(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->G(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->H(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->I(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->J(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->K(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->L(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->M(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->N(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->O(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->P(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->Q(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->R(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->S(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->T(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->U(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->V(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->W(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->X(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->Y(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->Z(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->ALL(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->ANCESTOR(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->AS(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->ASC(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->ASYNC(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->BY(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->CREATE(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->COLLECTION(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->DESC(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->DELETE(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->DISTINCT(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->DROP(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->EACH(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->EXCEPT(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->FLATTEN(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->FROM(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->GROUP(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->HAVING(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->IN(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->COLLECTION_INDEX(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->CURRENT_DATE(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->CURRENT_TIME(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->CURRENT_TIMESTAMP(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->INSERT(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->INTERSECT(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->INTO(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->IS(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->LIMIT(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->NIL(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->OFFSET(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->OPTIONS(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->ORDER(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->SELECT(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->SET(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->SYNC(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->UNION(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->UPDATE(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->WHERE(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->VALUE(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->WS(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->ID(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->NUMBER(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->FLOAT(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->STRING(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->EscapeSequence(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->CHAR(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->EXPONENT(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->HEX_DIGIT(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->ESC_SEQ(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->OCTAL_ESC(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->UNICODE_ESC(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->Tokens(pSQL92Lexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_SQL92Lexer_H
#define _SQL92Lexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */



#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct SQL92Lexer_Ctx_struct SQL92Lexer, * pSQL92Lexer;



/******************************************************************
*
* uSQL for C++
*
* SQL92Lexer for ANTLR
*
* Copyright (C) Satoshi Konno 2011
*
* This is licensed under BSD-style license, see file COPYING.
*
******************************************************************/


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
SQL92Lexer

 */
struct SQL92Lexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mT__93)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mT__94)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mT__95)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mASTERISK)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mPERIOD)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mEQ)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mOP_LT)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mLE)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mGT)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mGE)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mNOTEQ)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mAND)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mOR)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mCOMMA)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mSEMICOLON)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mA)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mB)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mC)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mD)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mE)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mF)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mG)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mH)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mI)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mJ)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mK)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mL)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mM)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mN)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mO)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mP)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mQ)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mR)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mS)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mT)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mU)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mV)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mW)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mX)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mY)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mZ)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mALL)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mANCESTOR)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mAS)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mASC)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mASYNC)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mBY)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mCREATE)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mCOLLECTION)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mDESC)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mDELETE)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mDISTINCT)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mDROP)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mEACH)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mEXCEPT)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mFLATTEN)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mFROM)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mGROUP)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mHAVING)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mIN)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mCOLLECTION_INDEX)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mCURRENT_DATE)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mCURRENT_TIME)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mCURRENT_TIMESTAMP)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mINSERT)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mINTERSECT)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mINTO)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mIS)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mLIMIT)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mNIL)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mOFFSET)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mOPTIONS)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mORDER)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mSELECT)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mSET)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mSYNC)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mUNION)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mUPDATE)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mWHERE)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mVALUE)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mWS)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mID)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mNUMBER)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mFLOAT)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mSTRING)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mEscapeSequence)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mCHAR)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mEXPONENT)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mHEX_DIGIT)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mESC_SEQ)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mOCTAL_ESC)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mUNICODE_ESC)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct SQL92Lexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct SQL92Lexer_Ctx_struct * ctx);
    void	    (*free)   (struct SQL92Lexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pSQL92Lexer SQL92LexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pSQL92Lexer SQL92LexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__93      93
#define T__94      94
#define T__95      95
#define A      4
#define ALL      5
#define ANCESTOR      6
#define AND      7
#define AS      8
#define ASC      9
#define ASTERISK      10
#define ASYNC      11
#define B      12
#define BY      13
#define C      14
#define CHAR      15
#define COLLECTION      16
#define COLLECTION_INDEX      17
#define COMMA      18
#define CREATE      19
#define CURRENT_DATE      20
#define CURRENT_TIME      21
#define CURRENT_TIMESTAMP      22
#define D      23
#define DELETE      24
#define DESC      25
#define DISTINCT      26
#define DROP      27
#define E      28
#define EACH      29
#define EQ      30
#define ESC_SEQ      31
#define EXCEPT      32
#define EXPONENT      33
#define EscapeSequence      34
#define F      35
#define FLATTEN      36
#define FLOAT      37
#define FROM      38
#define G      39
#define GE      40
#define GROUP      41
#define GT      42
#define H      43
#define HAVING      44
#define HEX_DIGIT      45
#define I      46
#define ID      47
#define IN      48
#define INSERT      49
#define INTERSECT      50
#define INTO      51
#define IS      52
#define J      53
#define K      54
#define L      55
#define LE      56
#define LIMIT      57
#define M      58
#define N      59
#define NIL      60
#define NOTEQ      61
#define NUMBER      62
#define O      63
#define OCTAL_ESC      64
#define OFFSET      65
#define OPTIONS      66
#define OP_LT      67
#define OR      68
#define ORDER      69
#define P      70
#define PERIOD      71
#define Q      72
#define R      73
#define S      74
#define SELECT      75
#define SEMICOLON      76
#define SET      77
#define STRING      78
#define SYNC      79
#define T      80
#define U      81
#define UNICODE_ESC      82
#define UNION      83
#define UPDATE      84
#define V      85
#define VALUE      86
#define W      87
#define WHERE      88
#define WS      89
#define X      90
#define Y      91
#define Z      92
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for SQL92Lexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
