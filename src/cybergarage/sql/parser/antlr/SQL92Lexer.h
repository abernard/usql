/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : SQL92.g
 *     -                            On : 2011-11-28 23:53:40
 *     -                 for the lexer : SQL92LexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
SQL92Lexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pSQL92Lexer, which is returned from a call to SQL92LexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pSQL92Lexer are  as follows:
 *
 *  - 
 void
      pSQL92Lexer->COMMENT(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->A(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->B(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->C(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->D(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->E(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->F(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->G(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->H(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->I(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->J(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->K(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->L(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->M(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->N(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->O(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->P(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->Q(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->R(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->S(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->T(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->U(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->V(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->W(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->X(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->Y(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->Z(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->ADD(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->ALL(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->ALLOCATE(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->ALTER(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->AND(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->ANY(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->ARE(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->AS(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->ASC(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->ASSERTION(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->AT(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->AUTHORIZATION(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->AVG(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->BEGIN(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->BETWEEN(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->BIGINT(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->BIT(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->BOOLEAN(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->BOTH(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->BY(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->CALL(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->CASCADE(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->CASCADED(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->CASE(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->CAST(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->CHARACTER(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->FROM(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->SELECT(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->WHERE(pSQL92Lexer)
 *  - 
 void
      pSQL92Lexer->Tokens(pSQL92Lexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_SQL92Lexer_H
#define _SQL92Lexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

    #include <cybergarage/sql/SQLParser.h>


#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct SQL92Lexer_Ctx_struct SQL92Lexer, * pSQL92Lexer;



/******************************************************************
*
* uSQL for C++
*
* SQL92Lexer for ANTLR
*
* Copyright (C) Satoshi Konno 2011
*
* This is licensed under BSD-style license, see file COPYING.
*
******************************************************************/


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
SQL92Lexer

 */
struct SQL92Lexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mCOMMENT)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mA)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mB)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mC)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mD)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mE)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mF)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mG)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mH)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mI)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mJ)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mK)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mL)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mM)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mN)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mO)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mP)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mQ)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mR)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mS)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mT)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mU)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mV)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mW)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mX)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mY)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mZ)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mADD)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mALL)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mALLOCATE)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mALTER)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mAND)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mANY)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mARE)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mAS)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mASC)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mASSERTION)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mAT)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mAUTHORIZATION)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mAVG)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mBEGIN)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mBETWEEN)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mBIGINT)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mBIT)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mBOOLEAN)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mBOTH)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mBY)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mCALL)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mCASCADE)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mCASCADED)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mCASE)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mCAST)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mCHARACTER)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mFROM)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mSELECT)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mWHERE)	(struct SQL92Lexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct SQL92Lexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct SQL92Lexer_Ctx_struct * ctx);
    void	    (*free)   (struct SQL92Lexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pSQL92Lexer SQL92LexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pSQL92Lexer SQL92LexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define A      4
#define ADD      5
#define ALL      6
#define ALLOCATE      7
#define ALTER      8
#define AND      9
#define ANY      10
#define ARE      11
#define AS      12
#define ASC      13
#define ASSERTION      14
#define AT      15
#define AUTHORIZATION      16
#define AVG      17
#define B      18
#define BEGIN      19
#define BETWEEN      20
#define BIGINT      21
#define BIT      22
#define BOOLEAN      23
#define BOTH      24
#define BY      25
#define C      26
#define CALL      27
#define CASCADE      28
#define CASCADED      29
#define CASE      30
#define CAST      31
#define CHARACTER      32
#define COMMENT      33
#define D      34
#define E      35
#define F      36
#define FROM      37
#define G      38
#define H      39
#define I      40
#define J      41
#define K      42
#define L      43
#define M      44
#define N      45
#define O      46
#define P      47
#define Q      48
#define R      49
#define S      50
#define SELECT      51
#define T      52
#define U      53
#define V      54
#define W      55
#define WHERE      56
#define X      57
#define Y      58
#define Z      59
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for SQL92Lexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
