/** \file
 *  This C source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : SQL92.g
 *     -                            On : 2011-12-06 01:23:57
 *     -                for the parser : SQL92ParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */

/******************************************************************
*
* uSQL for C++
*
* SQL92Parser for ANTLR
*
* Copyright (C) Satoshi Konno 2011
*
* This is licensed under BSD-style license, see file COPYING.
*
******************************************************************/

/* End of Header action.
 * =============================================================================
 */

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "SQL92Parser.h"
/* ----------------------------------------- */

/******************************************************************
*
* uSQL for C++
*
* SQL92.g
*
* Copyright (C) Satoshi Konno 2011
*
* This is licensed under BSD-style license, see file COPYING.
*
******************************************************************/




/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pSQL92Parser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pSQL92Parser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pSQL92Parser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pSQL92Parser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */

#undef	    PARSER
#undef	    RECOGNIZER
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO
#undef		DBG

#define	    PARSER				ctx->pParser
#define	    RECOGNIZER				PARSER->rec
#define	    PSRSTATE				RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)			RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT				PARSER->tstream
#define	    STRSTREAM				INPUT
#define	    ISTREAM				INPUT->istream
#define	    INDEX()				ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()			(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				PSRSTATE->exception
#define	    MATCHT(t, fs)			RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()				RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK				PSRSTATE->following
#ifdef  SKIP_FOLLOW_SETS
#define	    FOLLOWPUSH(x)
#define	    FOLLOWPOP()
#else
#define	    FOLLOWPUSH(x)			FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()				FOLLOWSTACK->pop(FOLLOWSTACK)
#endif
#define	    PRECOVER()				RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()			RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)				INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)				INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()				ISTREAM->consume(ISTREAM)
#define	    MARK()				ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define	    SEEK(n)				ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY			PSRSTATE->errorRecovery
#define	    FAILEDFLAG				PSRSTATE->failed
#define	    HASFAILED()				(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING			PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger


#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   SQL92ParserTokenNames[92+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>",
        (pANTLR3_UINT8) "<UP>",
        (pANTLR3_UINT8) "A",
        (pANTLR3_UINT8) "ALL",
        (pANTLR3_UINT8) "ANCESTOR",
        (pANTLR3_UINT8) "AND",
        (pANTLR3_UINT8) "AS",
        (pANTLR3_UINT8) "ASC",
        (pANTLR3_UINT8) "ASTERISK",
        (pANTLR3_UINT8) "ASYNC",
        (pANTLR3_UINT8) "B",
        (pANTLR3_UINT8) "BY",
        (pANTLR3_UINT8) "C",
        (pANTLR3_UINT8) "CHAR",
        (pANTLR3_UINT8) "COLLECTION",
        (pANTLR3_UINT8) "COLLECTION_INDEX",
        (pANTLR3_UINT8) "COMMA",
        (pANTLR3_UINT8) "CREATE",
        (pANTLR3_UINT8) "CURRENT_DATE",
        (pANTLR3_UINT8) "CURRENT_TIME",
        (pANTLR3_UINT8) "CURRENT_TIMESTAMP",
        (pANTLR3_UINT8) "D",
        (pANTLR3_UINT8) "DELETE",
        (pANTLR3_UINT8) "DESC",
        (pANTLR3_UINT8) "DISTINCT",
        (pANTLR3_UINT8) "DROP",
        (pANTLR3_UINT8) "E",
        (pANTLR3_UINT8) "EACH",
        (pANTLR3_UINT8) "EQ",
        (pANTLR3_UINT8) "ESC_SEQ",
        (pANTLR3_UINT8) "EXCEPT",
        (pANTLR3_UINT8) "EXPONENT",
        (pANTLR3_UINT8) "EscapeSequence",
        (pANTLR3_UINT8) "F",
        (pANTLR3_UINT8) "FLATTEN",
        (pANTLR3_UINT8) "FLOAT",
        (pANTLR3_UINT8) "FROM",
        (pANTLR3_UINT8) "G",
        (pANTLR3_UINT8) "GE",
        (pANTLR3_UINT8) "GROUP",
        (pANTLR3_UINT8) "GT",
        (pANTLR3_UINT8) "H",
        (pANTLR3_UINT8) "HAVING",
        (pANTLR3_UINT8) "HEX_DIGIT",
        (pANTLR3_UINT8) "I",
        (pANTLR3_UINT8) "ID",
        (pANTLR3_UINT8) "IN",
        (pANTLR3_UINT8) "INSERT",
        (pANTLR3_UINT8) "INTERSECT",
        (pANTLR3_UINT8) "INTO",
        (pANTLR3_UINT8) "IS",
        (pANTLR3_UINT8) "J",
        (pANTLR3_UINT8) "K",
        (pANTLR3_UINT8) "L",
        (pANTLR3_UINT8) "LE",
        (pANTLR3_UINT8) "LIMIT",
        (pANTLR3_UINT8) "M",
        (pANTLR3_UINT8) "N",
        (pANTLR3_UINT8) "NIL",
        (pANTLR3_UINT8) "NOTEQ",
        (pANTLR3_UINT8) "NUMBER",
        (pANTLR3_UINT8) "O",
        (pANTLR3_UINT8) "OCTAL_ESC",
        (pANTLR3_UINT8) "OFFSET",
        (pANTLR3_UINT8) "OPTIONS",
        (pANTLR3_UINT8) "OP_LT",
        (pANTLR3_UINT8) "OR",
        (pANTLR3_UINT8) "ORDER",
        (pANTLR3_UINT8) "P",
        (pANTLR3_UINT8) "PERIOD",
        (pANTLR3_UINT8) "Q",
        (pANTLR3_UINT8) "R",
        (pANTLR3_UINT8) "S",
        (pANTLR3_UINT8) "SELECT",
        (pANTLR3_UINT8) "SEMICOLON",
        (pANTLR3_UINT8) "SET",
        (pANTLR3_UINT8) "STRING",
        (pANTLR3_UINT8) "SYNC",
        (pANTLR3_UINT8) "T",
        (pANTLR3_UINT8) "U",
        (pANTLR3_UINT8) "UNICODE_ESC",
        (pANTLR3_UINT8) "UNION",
        (pANTLR3_UINT8) "UPDATE",
        (pANTLR3_UINT8) "V",
        (pANTLR3_UINT8) "VALUE",
        (pANTLR3_UINT8) "W",
        (pANTLR3_UINT8) "WHERE",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "X",
        (pANTLR3_UINT8) "Y",
        (pANTLR3_UINT8) "Z",
        (pANTLR3_UINT8) "'('",
        (pANTLR3_UINT8) "')'",
        (pANTLR3_UINT8) "'='"
       };



// Forward declare the locally static matching functions we have generated.
//
static 
 void
	statement_list    (pSQL92Parser ctx, uSQL::SQLParser *sqlParser);
static 
 void
	statement    (pSQL92Parser ctx, uSQL::SQLParser *sqlParser);
static 
 void
	select_stmt    (pSQL92Parser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
	select_core    (pSQL92Parser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
	result_column    (pSQL92Parser ctx, uSQL::SQLColumn *sqlColumn);
static 
 void
	column_alias    (pSQL92Parser ctx);
static 
 uSQL::SQLFrom *
	from_section    (pSQL92Parser ctx);
static 
 void
	table_name    (pSQL92Parser ctx, uSQL::SQLFrom *sqlFrom);
static 
 uSQL::SQLDataSource *
	data_source    (pSQL92Parser ctx);
static 
 uSQL::SQLGroupBy *
	grouping_section    (pSQL92Parser ctx);
static 
 uSQL::SQLHaving *
	having_section    (pSQL92Parser ctx);
static 
 uSQL::SQLOrderBy *
	sorting_section    (pSQL92Parser ctx);
static 
 void
	sorting_item    (pSQL92Parser ctx, uSQL::SQLOrderBy *sqlOrders);
static 
 SQL92Parser_sorting_specification_return
	sorting_specification    (pSQL92Parser ctx);
static 
 uSQL::SQLLimit *
	limit_section    (pSQL92Parser ctx);
static 
 uSQL::SQLOffset *
	offset_section    (pSQL92Parser ctx);
static 
 void
	create_collection_stmt    (pSQL92Parser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
	drop_collection_stmt    (pSQL92Parser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
	create_index_stmt    (pSQL92Parser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
	drop_index_stmt    (pSQL92Parser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
	insert_stmt    (pSQL92Parser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
	update_stmt    (pSQL92Parser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
	property_section    (pSQL92Parser ctx, uSQL::SQLValue *sqlValue);
static 
 void
	delete_stmt    (pSQL92Parser ctx, uSQL::SQLStatement *sqlStmt);
static 
 void
	expression    (pSQL92Parser ctx, uSQL::SQLExpression *parentSqlExpr);
static 
 uSQL::SQLExpression *
	expression_literal    (pSQL92Parser ctx);
static 
 void
	expression_literal_value    (pSQL92Parser ctx, uSQL::SQLExpression *sqlExpr);
static 
 uSQL::SQLFunction *
	function_name    (pSQL92Parser ctx);
static 
 void
	function_value    (pSQL92Parser ctx, uSQL::SQLFunction *sqlFunc);
static 
 uSQL::SQLOperator *
	binary_operator    (pSQL92Parser ctx);
static 
 SQL92Parser_property_literal_return
	property_literal    (pSQL92Parser ctx);
static 
 SQL92Parser_integer_literal_return
	integer_literal    (pSQL92Parser ctx);
static 
 SQL92Parser_real_literal_return
	real_literal    (pSQL92Parser ctx);
static 
 SQL92Parser_string_literal_return
	string_literal    (pSQL92Parser ctx);
static 
 void
	true_literal    (pSQL92Parser ctx);
static 
 void
	false_literal    (pSQL92Parser ctx);
static 
 bool
	sync_operator    (pSQL92Parser ctx);
static 
 void
	compound_operator    (pSQL92Parser ctx);
static 
 void
	condition_operator    (pSQL92Parser ctx);
static 
 SQL92Parser_property_return
	property    (pSQL92Parser ctx);
static 
 void
	value    (pSQL92Parser ctx);
static 
 void
	name    (pSQL92Parser ctx);
static 
 uSQL::SQLCollection *
	collection_section    (pSQL92Parser ctx);
static 
 SQL92Parser_collection_name_return
	collection_name    (pSQL92Parser ctx);
static 
 uSQL::SQLIndex *
	index_section    (pSQL92Parser ctx);
static 
 SQL92Parser_index_name_return
	index_name    (pSQL92Parser ctx);
static 
 uSQL::SQLWhere *
	where_section    (pSQL92Parser ctx);
static void	SQL92ParserFree(pSQL92Parser ctx);
static void     SQL92ParserReset (pSQL92Parser ctx);

/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed.
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "SQL92.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new SQL92Parser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pSQL92Parser
SQL92ParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return SQL92ParserNewSSD(instream, NULL);
}

/** \brief Create a new SQL92Parser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pSQL92Parser
SQL92ParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pSQL92Parser ctx;	    /* Context structure we will build and return   */

    ctx	= (pSQL92Parser) ANTLR3_CALLOC(1, sizeof(SQL92Parser));

    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in SQL92Parser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our SQL92Parser interface
     */
    ctx->statement_list	= statement_list;
    ctx->statement	= statement;
    ctx->select_stmt	= select_stmt;
    ctx->select_core	= select_core;
    ctx->result_column	= result_column;
    ctx->column_alias	= column_alias;
    ctx->from_section	= from_section;
    ctx->table_name	= table_name;
    ctx->data_source	= data_source;
    ctx->grouping_section	= grouping_section;
    ctx->having_section	= having_section;
    ctx->sorting_section	= sorting_section;
    ctx->sorting_item	= sorting_item;
    ctx->sorting_specification	= sorting_specification;
    ctx->limit_section	= limit_section;
    ctx->offset_section	= offset_section;
    ctx->create_collection_stmt	= create_collection_stmt;
    ctx->drop_collection_stmt	= drop_collection_stmt;
    ctx->create_index_stmt	= create_index_stmt;
    ctx->drop_index_stmt	= drop_index_stmt;
    ctx->insert_stmt	= insert_stmt;
    ctx->update_stmt	= update_stmt;
    ctx->property_section	= property_section;
    ctx->delete_stmt	= delete_stmt;
    ctx->expression	= expression;
    ctx->expression_literal	= expression_literal;
    ctx->expression_literal_value	= expression_literal_value;
    ctx->function_name	= function_name;
    ctx->function_value	= function_value;
    ctx->binary_operator	= binary_operator;
    ctx->property_literal	= property_literal;
    ctx->integer_literal	= integer_literal;
    ctx->real_literal	= real_literal;
    ctx->string_literal	= string_literal;
    ctx->true_literal	= true_literal;
    ctx->false_literal	= false_literal;
    ctx->sync_operator	= sync_operator;
    ctx->compound_operator	= compound_operator;
    ctx->condition_operator	= condition_operator;
    ctx->property	= property;
    ctx->value	= value;
    ctx->name	= name;
    ctx->collection_section	= collection_section;
    ctx->collection_name	= collection_name;
    ctx->index_section	= index_section;
    ctx->index_name	= index_name;
    ctx->where_section	= where_section;
    ctx->free			= SQL92ParserFree;
    ctx->reset			= SQL92ParserReset;
    ctx->getGrammarFileName	= getGrammarFileName;

    /* Install the scope pushing methods.
     */

    /* Install the token table
     */
    PSRSTATE->tokenNames   = SQL92ParserTokenNames;


    /* Return the newly built parser to the caller
     */
    return  ctx;
}

static void
SQL92ParserReset (pSQL92Parser ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** Free the parser resources
 */
 static void
 SQL92ParserFree(pSQL92Parser ctx)
 {
    /* Free any scope memory
     */

	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);


    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames()
{
        return SQL92ParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_statement_list69  */
static	ANTLR3_BITWORD FOLLOW_statement_in_statement_list69_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_statement_list69	= { FOLLOW_statement_in_statement_list69_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_statement_list73  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_statement_list73_bits[]	= { ANTLR3_UINT64_LIT(0x0002000009080800), ANTLR3_UINT64_LIT(0x0000000000108800) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_statement_list73	= { FOLLOW_SEMICOLON_in_statement_list73_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_statement_list75  */
static	ANTLR3_BITWORD FOLLOW_statement_in_statement_list75_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000001000) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_statement_list75	= { FOLLOW_statement_in_statement_list75_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_select_stmt_in_statement98  */
static	ANTLR3_BITWORD FOLLOW_select_stmt_in_statement98_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_select_stmt_in_statement98	= { FOLLOW_select_stmt_in_statement98_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_create_collection_stmt_in_statement104  */
static	ANTLR3_BITWORD FOLLOW_create_collection_stmt_in_statement104_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_create_collection_stmt_in_statement104	= { FOLLOW_create_collection_stmt_in_statement104_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_drop_collection_stmt_in_statement110  */
static	ANTLR3_BITWORD FOLLOW_drop_collection_stmt_in_statement110_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_drop_collection_stmt_in_statement110	= { FOLLOW_drop_collection_stmt_in_statement110_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_create_index_stmt_in_statement116  */
static	ANTLR3_BITWORD FOLLOW_create_index_stmt_in_statement116_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_create_index_stmt_in_statement116	= { FOLLOW_create_index_stmt_in_statement116_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_drop_index_stmt_in_statement122  */
static	ANTLR3_BITWORD FOLLOW_drop_index_stmt_in_statement122_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_drop_index_stmt_in_statement122	= { FOLLOW_drop_index_stmt_in_statement122_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_insert_stmt_in_statement128  */
static	ANTLR3_BITWORD FOLLOW_insert_stmt_in_statement128_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_insert_stmt_in_statement128	= { FOLLOW_insert_stmt_in_statement128_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_update_stmt_in_statement134  */
static	ANTLR3_BITWORD FOLLOW_update_stmt_in_statement134_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_update_stmt_in_statement134	= { FOLLOW_update_stmt_in_statement134_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_delete_stmt_in_statement140  */
static	ANTLR3_BITWORD FOLLOW_delete_stmt_in_statement140_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_delete_stmt_in_statement140	= { FOLLOW_delete_stmt_in_statement140_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_select_core_in_select_stmt164  */
static	ANTLR3_BITWORD FOLLOW_select_core_in_select_stmt164_bits[]	= { ANTLR3_UINT64_LIT(0x5200802000700002), ANTLR3_UINT64_LIT(0x0000000000004020) };
static  ANTLR3_BITSET_LIST FOLLOW_select_core_in_select_stmt164	= { FOLLOW_select_core_in_select_stmt164_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sorting_section_in_select_stmt170  */
static	ANTLR3_BITWORD FOLLOW_sorting_section_in_select_stmt170_bits[]	= { ANTLR3_UINT64_LIT(0x5200802000700002), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_sorting_section_in_select_stmt170	= { FOLLOW_sorting_section_in_select_stmt170_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_limit_section_in_select_stmt177  */
static	ANTLR3_BITWORD FOLLOW_limit_section_in_select_stmt177_bits[]	= { ANTLR3_UINT64_LIT(0x5000802000700002), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_limit_section_in_select_stmt177	= { FOLLOW_limit_section_in_select_stmt177_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_offset_section_in_select_stmt184  */
static	ANTLR3_BITWORD FOLLOW_offset_section_in_select_stmt184_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_offset_section_in_select_stmt184	= { FOLLOW_offset_section_in_select_stmt184_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SELECT_in_select_core209  */
static	ANTLR3_BITWORD FOLLOW_SELECT_in_select_core209_bits[]	= { ANTLR3_UINT64_LIT(0x5000926004700122), ANTLR3_UINT64_LIT(0x0000000001004000) };
static  ANTLR3_BITSET_LIST FOLLOW_SELECT_in_select_core209	= { FOLLOW_SELECT_in_select_core209_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_select_core221  */
static	ANTLR3_BITWORD FOLLOW_expression_in_select_core221_bits[]	= { ANTLR3_UINT64_LIT(0x0000124000000102), ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_select_core221	= { FOLLOW_expression_in_select_core221_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AS_in_select_core227  */
static	ANTLR3_BITWORD FOLLOW_AS_in_select_core227_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_AS_in_select_core227	= { FOLLOW_AS_in_select_core227_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_name_in_select_core229  */
static	ANTLR3_BITWORD FOLLOW_name_in_select_core229_bits[]	= { ANTLR3_UINT64_LIT(0x0000124000000002), ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_name_in_select_core229	= { FOLLOW_name_in_select_core229_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_from_section_in_select_core242  */
static	ANTLR3_BITWORD FOLLOW_from_section_in_select_core242_bits[]	= { ANTLR3_UINT64_LIT(0x0000120000000002), ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_from_section_in_select_core242	= { FOLLOW_from_section_in_select_core242_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_where_section_in_select_core255  */
static	ANTLR3_BITWORD FOLLOW_where_section_in_select_core255_bits[]	= { ANTLR3_UINT64_LIT(0x0000120000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_where_section_in_select_core255	= { FOLLOW_where_section_in_select_core255_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_grouping_section_in_select_core267  */
static	ANTLR3_BITWORD FOLLOW_grouping_section_in_select_core267_bits[]	= { ANTLR3_UINT64_LIT(0x0000100000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_grouping_section_in_select_core267	= { FOLLOW_grouping_section_in_select_core267_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_having_section_in_select_core280  */
static	ANTLR3_BITWORD FOLLOW_having_section_in_select_core280_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_having_section_in_select_core280	= { FOLLOW_having_section_in_select_core280_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASTERISK_in_result_column301  */
static	ANTLR3_BITWORD FOLLOW_ASTERISK_in_result_column301_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ASTERISK_in_result_column301	= { FOLLOW_ASTERISK_in_result_column301_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_literal_in_result_column308  */
static	ANTLR3_BITWORD FOLLOW_expression_literal_in_result_column308_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000100) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_literal_in_result_column308	= { FOLLOW_expression_literal_in_result_column308_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AS_in_result_column310  */
static	ANTLR3_BITWORD FOLLOW_AS_in_result_column310_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_AS_in_result_column310	= { FOLLOW_AS_in_result_column310_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_column_alias_in_result_column312  */
static	ANTLR3_BITWORD FOLLOW_column_alias_in_result_column312_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_column_alias_in_result_column312	= { FOLLOW_column_alias_in_result_column312_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_column_alias325  */
static	ANTLR3_BITWORD FOLLOW_ID_in_column_alias325_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_column_alias325	= { FOLLOW_ID_in_column_alias325_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FROM_in_from_section348  */
static	ANTLR3_BITWORD FOLLOW_FROM_in_from_section348_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_FROM_in_from_section348	= { FOLLOW_FROM_in_from_section348_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_table_name_in_from_section350  */
static	ANTLR3_BITWORD FOLLOW_table_name_in_from_section350_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_table_name_in_from_section350	= { FOLLOW_table_name_in_from_section350_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_from_section355  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_from_section355_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_from_section355	= { FOLLOW_COMMA_in_from_section355_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_table_name_in_from_section357  */
static	ANTLR3_BITWORD FOLLOW_table_name_in_from_section357_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_table_name_in_from_section357	= { FOLLOW_table_name_in_from_section357_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_data_source_in_table_name377  */
static	ANTLR3_BITWORD FOLLOW_data_source_in_table_name377_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_data_source_in_table_name377	= { FOLLOW_data_source_in_table_name377_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_collection_name_in_data_source400  */
static	ANTLR3_BITWORD FOLLOW_collection_name_in_data_source400_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_collection_name_in_data_source400	= { FOLLOW_collection_name_in_data_source400_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GROUP_in_grouping_section423  */
static	ANTLR3_BITWORD FOLLOW_GROUP_in_grouping_section423_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_GROUP_in_grouping_section423	= { FOLLOW_GROUP_in_grouping_section423_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BY_in_grouping_section425  */
static	ANTLR3_BITWORD FOLLOW_BY_in_grouping_section425_bits[]	= { ANTLR3_UINT64_LIT(0x5000802000700000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_BY_in_grouping_section425	= { FOLLOW_BY_in_grouping_section425_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_grouping_section427  */
static	ANTLR3_BITWORD FOLLOW_expression_in_grouping_section427_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_grouping_section427	= { FOLLOW_expression_in_grouping_section427_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_grouping_section431  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_grouping_section431_bits[]	= { ANTLR3_UINT64_LIT(0x5000802000700000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_grouping_section431	= { FOLLOW_COMMA_in_grouping_section431_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_grouping_section433  */
static	ANTLR3_BITWORD FOLLOW_expression_in_grouping_section433_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_grouping_section433	= { FOLLOW_expression_in_grouping_section433_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_HAVING_in_having_section458  */
static	ANTLR3_BITWORD FOLLOW_HAVING_in_having_section458_bits[]	= { ANTLR3_UINT64_LIT(0x5000802000700000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_HAVING_in_having_section458	= { FOLLOW_HAVING_in_having_section458_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_having_section460  */
static	ANTLR3_BITWORD FOLLOW_expression_in_having_section460_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_having_section460	= { FOLLOW_expression_in_having_section460_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ORDER_in_sorting_section482  */
static	ANTLR3_BITWORD FOLLOW_ORDER_in_sorting_section482_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_ORDER_in_sorting_section482	= { FOLLOW_ORDER_in_sorting_section482_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BY_in_sorting_section484  */
static	ANTLR3_BITWORD FOLLOW_BY_in_sorting_section484_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_BY_in_sorting_section484	= { FOLLOW_BY_in_sorting_section484_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sorting_item_in_sorting_section486  */
static	ANTLR3_BITWORD FOLLOW_sorting_item_in_sorting_section486_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_sorting_item_in_sorting_section486	= { FOLLOW_sorting_item_in_sorting_section486_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_sorting_section490  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_sorting_section490_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_sorting_section490	= { FOLLOW_COMMA_in_sorting_section490_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sorting_item_in_sorting_section492  */
static	ANTLR3_BITWORD FOLLOW_sorting_item_in_sorting_section492_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_sorting_item_in_sorting_section492	= { FOLLOW_sorting_item_in_sorting_section492_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_property_in_sorting_item510  */
static	ANTLR3_BITWORD FOLLOW_property_in_sorting_item510_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000202) };
static  ANTLR3_BITSET_LIST FOLLOW_property_in_sorting_item510	= { FOLLOW_property_in_sorting_item510_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sorting_specification_in_sorting_item513  */
static	ANTLR3_BITWORD FOLLOW_sorting_specification_in_sorting_item513_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_sorting_specification_in_sorting_item513	= { FOLLOW_sorting_specification_in_sorting_item513_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LIMIT_in_limit_section554  */
static	ANTLR3_BITWORD FOLLOW_LIMIT_in_limit_section554_bits[]	= { ANTLR3_UINT64_LIT(0x5000802000700000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_LIMIT_in_limit_section554	= { FOLLOW_LIMIT_in_limit_section554_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_literal_in_limit_section559  */
static	ANTLR3_BITWORD FOLLOW_expression_literal_in_limit_section559_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_literal_in_limit_section559	= { FOLLOW_expression_literal_in_limit_section559_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_limit_section561  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_limit_section561_bits[]	= { ANTLR3_UINT64_LIT(0x5000802000700000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_limit_section561	= { FOLLOW_COMMA_in_limit_section561_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_literal_in_limit_section567  */
static	ANTLR3_BITWORD FOLLOW_expression_literal_in_limit_section567_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_literal_in_limit_section567	= { FOLLOW_expression_literal_in_limit_section567_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_literal_in_offset_section592  */
static	ANTLR3_BITWORD FOLLOW_expression_literal_in_offset_section592_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_literal_in_offset_section592	= { FOLLOW_expression_literal_in_offset_section592_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CREATE_in_create_collection_stmt618  */
static	ANTLR3_BITWORD FOLLOW_CREATE_in_create_collection_stmt618_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_CREATE_in_create_collection_stmt618	= { FOLLOW_CREATE_in_create_collection_stmt618_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLLECTION_in_create_collection_stmt620  */
static	ANTLR3_BITWORD FOLLOW_COLLECTION_in_create_collection_stmt620_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_COLLECTION_in_create_collection_stmt620	= { FOLLOW_COLLECTION_in_create_collection_stmt620_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_collection_section_in_create_collection_stmt624  */
static	ANTLR3_BITWORD FOLLOW_collection_section_in_create_collection_stmt624_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000000000004) };
static  ANTLR3_BITSET_LIST FOLLOW_collection_section_in_create_collection_stmt624	= { FOLLOW_collection_section_in_create_collection_stmt624_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OPTIONS_in_create_collection_stmt627  */
static	ANTLR3_BITWORD FOLLOW_OPTIONS_in_create_collection_stmt627_bits[]	= { ANTLR3_UINT64_LIT(0x5000802000700000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_OPTIONS_in_create_collection_stmt627	= { FOLLOW_OPTIONS_in_create_collection_stmt627_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_create_collection_stmt629  */
static	ANTLR3_BITWORD FOLLOW_expression_in_create_collection_stmt629_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_create_collection_stmt629	= { FOLLOW_expression_in_create_collection_stmt629_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DROP_in_drop_collection_stmt656  */
static	ANTLR3_BITWORD FOLLOW_DROP_in_drop_collection_stmt656_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000010000) };
static  ANTLR3_BITSET_LIST FOLLOW_DROP_in_drop_collection_stmt656	= { FOLLOW_DROP_in_drop_collection_stmt656_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLLECTION_in_drop_collection_stmt658  */
static	ANTLR3_BITWORD FOLLOW_COLLECTION_in_drop_collection_stmt658_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_COLLECTION_in_drop_collection_stmt658	= { FOLLOW_COLLECTION_in_drop_collection_stmt658_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_collection_section_in_drop_collection_stmt662  */
static	ANTLR3_BITWORD FOLLOW_collection_section_in_drop_collection_stmt662_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_collection_section_in_drop_collection_stmt662	= { FOLLOW_collection_section_in_drop_collection_stmt662_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CREATE_in_create_index_stmt687  */
static	ANTLR3_BITWORD FOLLOW_CREATE_in_create_index_stmt687_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_CREATE_in_create_index_stmt687	= { FOLLOW_CREATE_in_create_index_stmt687_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLLECTION_INDEX_in_create_index_stmt689  */
static	ANTLR3_BITWORD FOLLOW_COLLECTION_INDEX_in_create_index_stmt689_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_COLLECTION_INDEX_in_create_index_stmt689	= { FOLLOW_COLLECTION_INDEX_in_create_index_stmt689_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_index_section_in_create_index_stmt693  */
static	ANTLR3_BITWORD FOLLOW_index_section_in_create_index_stmt693_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_index_section_in_create_index_stmt693	= { FOLLOW_index_section_in_create_index_stmt693_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DROP_in_drop_index_stmt718  */
static	ANTLR3_BITWORD FOLLOW_DROP_in_drop_index_stmt718_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_DROP_in_drop_index_stmt718	= { FOLLOW_DROP_in_drop_index_stmt718_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLLECTION_INDEX_in_drop_index_stmt720  */
static	ANTLR3_BITWORD FOLLOW_COLLECTION_INDEX_in_drop_index_stmt720_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_COLLECTION_INDEX_in_drop_index_stmt720	= { FOLLOW_COLLECTION_INDEX_in_drop_index_stmt720_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_index_section_in_drop_index_stmt724  */
static	ANTLR3_BITWORD FOLLOW_index_section_in_drop_index_stmt724_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_index_section_in_drop_index_stmt724	= { FOLLOW_index_section_in_drop_index_stmt724_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sync_operator_in_insert_stmt752  */
static	ANTLR3_BITWORD FOLLOW_sync_operator_in_insert_stmt752_bits[]	= { ANTLR3_UINT64_LIT(0x0002000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_sync_operator_in_insert_stmt752	= { FOLLOW_sync_operator_in_insert_stmt752_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INSERT_in_insert_stmt756  */
static	ANTLR3_BITWORD FOLLOW_INSERT_in_insert_stmt756_bits[]	= { ANTLR3_UINT64_LIT(0x0008000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_INSERT_in_insert_stmt756	= { FOLLOW_INSERT_in_insert_stmt756_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INTO_in_insert_stmt758  */
static	ANTLR3_BITWORD FOLLOW_INTO_in_insert_stmt758_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_INTO_in_insert_stmt758	= { FOLLOW_INTO_in_insert_stmt758_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_collection_section_in_insert_stmt762  */
static	ANTLR3_BITWORD FOLLOW_collection_section_in_insert_stmt762_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000400000) };
static  ANTLR3_BITSET_LIST FOLLOW_collection_section_in_insert_stmt762	= { FOLLOW_collection_section_in_insert_stmt762_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_VALUE_in_insert_stmt764  */
static	ANTLR3_BITWORD FOLLOW_VALUE_in_insert_stmt764_bits[]	= { ANTLR3_UINT64_LIT(0x5000802000700000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_VALUE_in_insert_stmt764	= { FOLLOW_VALUE_in_insert_stmt764_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_insert_stmt766  */
static	ANTLR3_BITWORD FOLLOW_expression_in_insert_stmt766_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_insert_stmt766	= { FOLLOW_expression_in_insert_stmt766_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sync_operator_in_update_stmt795  */
static	ANTLR3_BITWORD FOLLOW_sync_operator_in_update_stmt795_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000100000) };
static  ANTLR3_BITSET_LIST FOLLOW_sync_operator_in_update_stmt795	= { FOLLOW_sync_operator_in_update_stmt795_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_UPDATE_in_update_stmt799  */
static	ANTLR3_BITWORD FOLLOW_UPDATE_in_update_stmt799_bits[]	= { ANTLR3_UINT64_LIT(0x0008000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_UPDATE_in_update_stmt799	= { FOLLOW_UPDATE_in_update_stmt799_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INTO_in_update_stmt801  */
static	ANTLR3_BITWORD FOLLOW_INTO_in_update_stmt801_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_INTO_in_update_stmt801	= { FOLLOW_INTO_in_update_stmt801_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_collection_section_in_update_stmt805  */
static	ANTLR3_BITWORD FOLLOW_collection_section_in_update_stmt805_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000002000) };
static  ANTLR3_BITSET_LIST FOLLOW_collection_section_in_update_stmt805	= { FOLLOW_collection_section_in_update_stmt805_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SET_in_update_stmt807  */
static	ANTLR3_BITWORD FOLLOW_SET_in_update_stmt807_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_SET_in_update_stmt807	= { FOLLOW_SET_in_update_stmt807_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_property_section_in_update_stmt809  */
static	ANTLR3_BITWORD FOLLOW_property_section_in_update_stmt809_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000002), ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_property_section_in_update_stmt809	= { FOLLOW_property_section_in_update_stmt809_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_property_section_in_update_stmt813  */
static	ANTLR3_BITWORD FOLLOW_property_section_in_update_stmt813_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000002), ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_property_section_in_update_stmt813	= { FOLLOW_property_section_in_update_stmt813_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_where_section_in_update_stmt823  */
static	ANTLR3_BITWORD FOLLOW_where_section_in_update_stmt823_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_where_section_in_update_stmt823	= { FOLLOW_where_section_in_update_stmt823_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_property_in_property_section848  */
static	ANTLR3_BITWORD FOLLOW_property_in_property_section848_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000080000000) };
static  ANTLR3_BITSET_LIST FOLLOW_property_in_property_section848	= { FOLLOW_property_in_property_section848_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_95_in_property_section850  */
static	ANTLR3_BITWORD FOLLOW_95_in_property_section850_bits[]	= { ANTLR3_UINT64_LIT(0x5000802000700000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_95_in_property_section850	= { FOLLOW_95_in_property_section850_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_literal_in_property_section854  */
static	ANTLR3_BITWORD FOLLOW_expression_literal_in_property_section854_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_literal_in_property_section854	= { FOLLOW_expression_literal_in_property_section854_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_sync_operator_in_delete_stmt883  */
static	ANTLR3_BITWORD FOLLOW_sync_operator_in_delete_stmt883_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_sync_operator_in_delete_stmt883	= { FOLLOW_sync_operator_in_delete_stmt883_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DELETE_in_delete_stmt887  */
static	ANTLR3_BITWORD FOLLOW_DELETE_in_delete_stmt887_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_DELETE_in_delete_stmt887	= { FOLLOW_DELETE_in_delete_stmt887_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FROM_in_delete_stmt889  */
static	ANTLR3_BITWORD FOLLOW_FROM_in_delete_stmt889_bits[]	= { ANTLR3_UINT64_LIT(0x0000800000000000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_FROM_in_delete_stmt889	= { FOLLOW_FROM_in_delete_stmt889_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_collection_section_in_delete_stmt893  */
static	ANTLR3_BITWORD FOLLOW_collection_section_in_delete_stmt893_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_collection_section_in_delete_stmt893	= { FOLLOW_collection_section_in_delete_stmt893_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_where_section_in_delete_stmt900  */
static	ANTLR3_BITWORD FOLLOW_where_section_in_delete_stmt900_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_where_section_in_delete_stmt900	= { FOLLOW_where_section_in_delete_stmt900_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_literal_in_expression931  */
static	ANTLR3_BITWORD FOLLOW_expression_literal_in_expression931_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_literal_in_expression931	= { FOLLOW_expression_literal_in_expression931_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_name_in_expression940  */
static	ANTLR3_BITWORD FOLLOW_function_name_in_expression940_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_function_name_in_expression940	= { FOLLOW_function_name_in_expression940_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_93_in_expression942  */
static	ANTLR3_BITWORD FOLLOW_93_in_expression942_bits[]	= { ANTLR3_UINT64_LIT(0x5000802000700400), ANTLR3_UINT64_LIT(0x0000000040004000) };
static  ANTLR3_BITSET_LIST FOLLOW_93_in_expression942	= { FOLLOW_93_in_expression942_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_value_in_expression945  */
static	ANTLR3_BITWORD FOLLOW_function_value_in_expression945_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_function_value_in_expression945	= { FOLLOW_function_value_in_expression945_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_94_in_expression950  */
static	ANTLR3_BITWORD FOLLOW_94_in_expression950_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_94_in_expression950	= { FOLLOW_94_in_expression950_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_literal_in_expression959  */
static	ANTLR3_BITWORD FOLLOW_expression_literal_in_expression959_bits[]	= { ANTLR3_UINT64_LIT(0x2100050040000080), ANTLR3_UINT64_LIT(0x0000000000000018) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_literal_in_expression959	= { FOLLOW_expression_literal_in_expression959_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_binary_operator_in_expression963  */
static	ANTLR3_BITWORD FOLLOW_binary_operator_in_expression963_bits[]	= { ANTLR3_UINT64_LIT(0x5000802000700000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_binary_operator_in_expression963	= { FOLLOW_binary_operator_in_expression963_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_literal_in_expression967  */
static	ANTLR3_BITWORD FOLLOW_expression_literal_in_expression967_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_literal_in_expression967	= { FOLLOW_expression_literal_in_expression967_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_literal_value_in_expression_literal991  */
static	ANTLR3_BITWORD FOLLOW_expression_literal_value_in_expression_literal991_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_literal_value_in_expression_literal991	= { FOLLOW_expression_literal_value_in_expression_literal991_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_property_literal_in_expression_literal_value1007  */
static	ANTLR3_BITWORD FOLLOW_property_literal_in_expression_literal_value1007_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_property_literal_in_expression_literal_value1007	= { FOLLOW_property_literal_in_expression_literal_value1007_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_integer_literal_in_expression_literal_value1014  */
static	ANTLR3_BITWORD FOLLOW_integer_literal_in_expression_literal_value1014_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_integer_literal_in_expression_literal_value1014	= { FOLLOW_integer_literal_in_expression_literal_value1014_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_real_literal_in_expression_literal_value1021  */
static	ANTLR3_BITWORD FOLLOW_real_literal_in_expression_literal_value1021_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_real_literal_in_expression_literal_value1021	= { FOLLOW_real_literal_in_expression_literal_value1021_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_string_literal_in_expression_literal_value1028  */
static	ANTLR3_BITWORD FOLLOW_string_literal_in_expression_literal_value1028_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_string_literal_in_expression_literal_value1028	= { FOLLOW_string_literal_in_expression_literal_value1028_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NIL_in_expression_literal_value1035  */
static	ANTLR3_BITWORD FOLLOW_NIL_in_expression_literal_value1035_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NIL_in_expression_literal_value1035	= { FOLLOW_NIL_in_expression_literal_value1035_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CURRENT_TIME_in_expression_literal_value1042  */
static	ANTLR3_BITWORD FOLLOW_CURRENT_TIME_in_expression_literal_value1042_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_CURRENT_TIME_in_expression_literal_value1042	= { FOLLOW_CURRENT_TIME_in_expression_literal_value1042_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CURRENT_DATE_in_expression_literal_value1049  */
static	ANTLR3_BITWORD FOLLOW_CURRENT_DATE_in_expression_literal_value1049_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_CURRENT_DATE_in_expression_literal_value1049	= { FOLLOW_CURRENT_DATE_in_expression_literal_value1049_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CURRENT_TIMESTAMP_in_expression_literal_value1056  */
static	ANTLR3_BITWORD FOLLOW_CURRENT_TIMESTAMP_in_expression_literal_value1056_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_CURRENT_TIMESTAMP_in_expression_literal_value1056	= { FOLLOW_CURRENT_TIMESTAMP_in_expression_literal_value1056_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_function_name1079  */
static	ANTLR3_BITWORD FOLLOW_ID_in_function_name1079_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_function_name1079	= { FOLLOW_ID_in_function_name1079_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_function_value1095  */
static	ANTLR3_BITWORD FOLLOW_expression_in_function_value1095_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_function_value1095	= { FOLLOW_expression_in_function_value1095_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_function_value1099  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_function_value1099_bits[]	= { ANTLR3_UINT64_LIT(0x5000802000700000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_function_value1099	= { FOLLOW_COMMA_in_function_value1099_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_function_value1101  */
static	ANTLR3_BITWORD FOLLOW_expression_in_function_value1101_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_function_value1101	= { FOLLOW_expression_in_function_value1101_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASTERISK_in_function_value1109  */
static	ANTLR3_BITWORD FOLLOW_ASTERISK_in_function_value1109_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ASTERISK_in_function_value1109	= { FOLLOW_ASTERISK_in_function_value1109_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EQ_in_binary_operator1133  */
static	ANTLR3_BITWORD FOLLOW_EQ_in_binary_operator1133_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EQ_in_binary_operator1133	= { FOLLOW_EQ_in_binary_operator1133_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OP_LT_in_binary_operator1140  */
static	ANTLR3_BITWORD FOLLOW_OP_LT_in_binary_operator1140_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OP_LT_in_binary_operator1140	= { FOLLOW_OP_LT_in_binary_operator1140_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LE_in_binary_operator1147  */
static	ANTLR3_BITWORD FOLLOW_LE_in_binary_operator1147_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_LE_in_binary_operator1147	= { FOLLOW_LE_in_binary_operator1147_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GT_in_binary_operator1154  */
static	ANTLR3_BITWORD FOLLOW_GT_in_binary_operator1154_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GT_in_binary_operator1154	= { FOLLOW_GT_in_binary_operator1154_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GE_in_binary_operator1161  */
static	ANTLR3_BITWORD FOLLOW_GE_in_binary_operator1161_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_GE_in_binary_operator1161	= { FOLLOW_GE_in_binary_operator1161_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOTEQ_in_binary_operator1168  */
static	ANTLR3_BITWORD FOLLOW_NOTEQ_in_binary_operator1168_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NOTEQ_in_binary_operator1168	= { FOLLOW_NOTEQ_in_binary_operator1168_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AND_in_binary_operator1175  */
static	ANTLR3_BITWORD FOLLOW_AND_in_binary_operator1175_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_AND_in_binary_operator1175	= { FOLLOW_AND_in_binary_operator1175_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OR_in_binary_operator1182  */
static	ANTLR3_BITWORD FOLLOW_OR_in_binary_operator1182_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_OR_in_binary_operator1182	= { FOLLOW_OR_in_binary_operator1182_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_property_literal1195  */
static	ANTLR3_BITWORD FOLLOW_ID_in_property_literal1195_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_property_literal1195	= { FOLLOW_ID_in_property_literal1195_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NUMBER_in_integer_literal1207  */
static	ANTLR3_BITWORD FOLLOW_NUMBER_in_integer_literal1207_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_NUMBER_in_integer_literal1207	= { FOLLOW_NUMBER_in_integer_literal1207_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLOAT_in_real_literal1218  */
static	ANTLR3_BITWORD FOLLOW_FLOAT_in_real_literal1218_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_FLOAT_in_real_literal1218	= { FOLLOW_FLOAT_in_real_literal1218_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_string_literal1229  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_string_literal1229_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_string_literal1229	= { FOLLOW_STRING_in_string_literal1229_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_T_in_true_literal1240  */
static	ANTLR3_BITWORD FOLLOW_T_in_true_literal1240_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_T_in_true_literal1240	= { FOLLOW_T_in_true_literal1240_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_R_in_true_literal1242  */
static	ANTLR3_BITWORD FOLLOW_R_in_true_literal1242_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_R_in_true_literal1242	= { FOLLOW_R_in_true_literal1242_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_U_in_true_literal1244  */
static	ANTLR3_BITWORD FOLLOW_U_in_true_literal1244_bits[]	= { ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_U_in_true_literal1244	= { FOLLOW_U_in_true_literal1244_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_E_in_true_literal1246  */
static	ANTLR3_BITWORD FOLLOW_E_in_true_literal1246_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_E_in_true_literal1246	= { FOLLOW_E_in_true_literal1246_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_F_in_false_literal1258  */
static	ANTLR3_BITWORD FOLLOW_F_in_false_literal1258_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000010) };
static  ANTLR3_BITSET_LIST FOLLOW_F_in_false_literal1258	= { FOLLOW_F_in_false_literal1258_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_A_in_false_literal1260  */
static	ANTLR3_BITWORD FOLLOW_A_in_false_literal1260_bits[]	= { ANTLR3_UINT64_LIT(0x0080000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_A_in_false_literal1260	= { FOLLOW_A_in_false_literal1260_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_L_in_false_literal1262  */
static	ANTLR3_BITWORD FOLLOW_L_in_false_literal1262_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000000000400) };
static  ANTLR3_BITSET_LIST FOLLOW_L_in_false_literal1262	= { FOLLOW_L_in_false_literal1262_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_S_in_false_literal1264  */
static	ANTLR3_BITWORD FOLLOW_S_in_false_literal1264_bits[]	= { ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_S_in_false_literal1264	= { FOLLOW_S_in_false_literal1264_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_E_in_false_literal1266  */
static	ANTLR3_BITWORD FOLLOW_E_in_false_literal1266_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_E_in_false_literal1266	= { FOLLOW_E_in_false_literal1266_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SYNC_in_sync_operator1284  */
static	ANTLR3_BITWORD FOLLOW_SYNC_in_sync_operator1284_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SYNC_in_sync_operator1284	= { FOLLOW_SYNC_in_sync_operator1284_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ASYNC_in_sync_operator1291  */
static	ANTLR3_BITWORD FOLLOW_ASYNC_in_sync_operator1291_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ASYNC_in_sync_operator1291	= { FOLLOW_ASYNC_in_sync_operator1291_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_UNION_in_compound_operator1304  */
static	ANTLR3_BITWORD FOLLOW_UNION_in_compound_operator1304_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000022) };
static  ANTLR3_BITSET_LIST FOLLOW_UNION_in_compound_operator1304	= { FOLLOW_UNION_in_compound_operator1304_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ALL_in_compound_operator1307  */
static	ANTLR3_BITWORD FOLLOW_ALL_in_compound_operator1307_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ALL_in_compound_operator1307	= { FOLLOW_ALL_in_compound_operator1307_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INTERSECT_in_compound_operator1314  */
static	ANTLR3_BITWORD FOLLOW_INTERSECT_in_compound_operator1314_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_INTERSECT_in_compound_operator1314	= { FOLLOW_INTERSECT_in_compound_operator1314_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EXCEPT_in_compound_operator1319  */
static	ANTLR3_BITWORD FOLLOW_EXCEPT_in_compound_operator1319_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_EXCEPT_in_compound_operator1319	= { FOLLOW_EXCEPT_in_compound_operator1319_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_property1366  */
static	ANTLR3_BITWORD FOLLOW_ID_in_property1366_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_property1366	= { FOLLOW_ID_in_property1366_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_value1381  */
static	ANTLR3_BITWORD FOLLOW_ID_in_value1381_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_value1381	= { FOLLOW_ID_in_value1381_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_name1393  */
static	ANTLR3_BITWORD FOLLOW_ID_in_name1393_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_name1393	= { FOLLOW_ID_in_name1393_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_collection_name_in_collection_section1414  */
static	ANTLR3_BITWORD FOLLOW_collection_name_in_collection_section1414_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_collection_name_in_collection_section1414	= { FOLLOW_collection_name_in_collection_section1414_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_collection_name1427  */
static	ANTLR3_BITWORD FOLLOW_ID_in_collection_name1427_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_collection_name1427	= { FOLLOW_ID_in_collection_name1427_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_string_literal_in_collection_name1432  */
static	ANTLR3_BITWORD FOLLOW_string_literal_in_collection_name1432_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_string_literal_in_collection_name1432	= { FOLLOW_string_literal_in_collection_name1432_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_index_name_in_index_section1454  */
static	ANTLR3_BITWORD FOLLOW_index_name_in_index_section1454_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_index_name_in_index_section1454	= { FOLLOW_index_name_in_index_section1454_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_index_name1467  */
static	ANTLR3_BITWORD FOLLOW_ID_in_index_name1467_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_index_name1467	= { FOLLOW_ID_in_index_name1467_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_string_literal_in_index_name1472  */
static	ANTLR3_BITWORD FOLLOW_string_literal_in_index_name1472_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_string_literal_in_index_name1472	= { FOLLOW_string_literal_in_index_name1472_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WHERE_in_where_section1493  */
static	ANTLR3_BITWORD FOLLOW_WHERE_in_where_section1493_bits[]	= { ANTLR3_UINT64_LIT(0x5000802000700000), ANTLR3_UINT64_LIT(0x0000000000004000) };
static  ANTLR3_BITSET_LIST FOLLOW_WHERE_in_where_section1493	= { FOLLOW_WHERE_in_where_section1493_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_where_section1495  */
static	ANTLR3_BITWORD FOLLOW_expression_in_where_section1495_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_where_section1495	= { FOLLOW_expression_in_where_section1495_bits, 1	};


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start statement_list
 * SQL92.g:68:1: statement_list[uSQL::SQLParser *sqlParser] : statement[sqlParser] ( SEMICOLON statement[sqlParser] )* ;
 */
static void
statement_list(pSQL92Parser ctx, uSQL::SQLParser *sqlParser)
{
    /* Initialize rule variables
     */

    {
        // SQL92.g:69:2: ( statement[sqlParser] ( SEMICOLON statement[sqlParser] )* )
        // SQL92.g:69:4: statement[sqlParser] ( SEMICOLON statement[sqlParser] )*
        {
            FOLLOWPUSH(FOLLOW_statement_in_statement_list69);
            statement(ctx, sqlParser);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulestatement_listEx;
            }


            // SQL92.g:69:25: ( SEMICOLON statement[sqlParser] )*

            for (;;)
            {
                int alt1=2;
                switch ( LA(1) )
                {
                case SEMICOLON:
                	{
                		alt1=1;
                	}
                    break;

                }

                switch (alt1)
                {
            	case 1:
            	    // SQL92.g:69:26: SEMICOLON statement[sqlParser]
            	    {
            	         MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_statement_list73);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestatement_listEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_statement_in_statement_list75);
            	        statement(ctx, sqlParser);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulestatement_listEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulestatement_listEx; /* Prevent compiler warnings */
    rulestatement_listEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end statement_list */

/**
 * $ANTLR start statement
 * SQL92.g:72:1: statement[uSQL::SQLParser *sqlParser] : ( select_stmt[stmt] | create_collection_stmt[stmt] | drop_collection_stmt[stmt] | create_index_stmt[stmt] | drop_index_stmt[stmt] | insert_stmt[stmt] | update_stmt[stmt] | delete_stmt[stmt] );
 */
static void
statement(pSQL92Parser ctx, uSQL::SQLParser *sqlParser)
{
    /* Initialize rule variables
     */


    		uSQL::SQLStatement *stmt = new uSQL::SQLStatement();
    		sqlParser->addStatement(stmt);
    	
    {
        {
            //  SQL92.g:77:2: ( select_stmt[stmt] | create_collection_stmt[stmt] | drop_collection_stmt[stmt] | create_index_stmt[stmt] | drop_index_stmt[stmt] | insert_stmt[stmt] | update_stmt[stmt] | delete_stmt[stmt] )

            ANTLR3_UINT32 alt2;

            alt2=8;

            switch ( LA(1) )
            {
            case SELECT:
            	{
            		alt2=1;
            	}
                break;
            case CREATE:
            	{
            		switch ( LA(2) )
            		{
            		case COLLECTION:
            			{
            				alt2=2;
            			}
            		    break;
            		case COLLECTION_INDEX:
            			{
            				alt2=4;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 2;
            		    EXCEPTION->state        = 2;


            		    goto rulestatementEx;

            		}

            	}
                break;
            case DROP:
            	{
            		switch ( LA(2) )
            		{
            		case COLLECTION:
            			{
            				alt2=3;
            			}
            		    break;
            		case COLLECTION_INDEX:
            			{
            				alt2=5;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 2;
            		    EXCEPTION->state        = 3;


            		    goto rulestatementEx;

            		}

            	}
                break;
            case SYNC:
            	{
            		switch ( LA(2) )
            		{
            		case INSERT:
            			{
            				alt2=6;
            			}
            		    break;
            		case UPDATE:
            			{
            				alt2=7;
            			}
            		    break;
            		case DELETE:
            			{
            				alt2=8;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 2;
            		    EXCEPTION->state        = 4;


            		    goto rulestatementEx;

            		}

            	}
                break;
            case ASYNC:
            	{
            		switch ( LA(2) )
            		{
            		case INSERT:
            			{
            				alt2=6;
            			}
            		    break;
            		case UPDATE:
            			{
            				alt2=7;
            			}
            		    break;
            		case DELETE:
            			{
            				alt2=8;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 2;
            		    EXCEPTION->state        = 5;


            		    goto rulestatementEx;

            		}

            	}
                break;
            case INSERT:
            	{
            		alt2=6;
            	}
                break;
            case UPDATE:
            	{
            		alt2=7;
            	}
                break;
            case DELETE:
            	{
            		alt2=8;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 2;
                EXCEPTION->state        = 0;


                goto rulestatementEx;

            }

            switch (alt2)
            {
        	case 1:
        	    // SQL92.g:77:4: select_stmt[stmt]
        	    {
        	        FOLLOWPUSH(FOLLOW_select_stmt_in_statement98);
        	        select_stmt(ctx, stmt);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // SQL92.g:78:4: create_collection_stmt[stmt]
        	    {
        	        FOLLOWPUSH(FOLLOW_create_collection_stmt_in_statement104);
        	        create_collection_stmt(ctx, stmt);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;
        	case 3:
        	    // SQL92.g:79:4: drop_collection_stmt[stmt]
        	    {
        	        FOLLOWPUSH(FOLLOW_drop_collection_stmt_in_statement110);
        	        drop_collection_stmt(ctx, stmt);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;
        	case 4:
        	    // SQL92.g:80:4: create_index_stmt[stmt]
        	    {
        	        FOLLOWPUSH(FOLLOW_create_index_stmt_in_statement116);
        	        create_index_stmt(ctx, stmt);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;
        	case 5:
        	    // SQL92.g:81:4: drop_index_stmt[stmt]
        	    {
        	        FOLLOWPUSH(FOLLOW_drop_index_stmt_in_statement122);
        	        drop_index_stmt(ctx, stmt);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;
        	case 6:
        	    // SQL92.g:82:4: insert_stmt[stmt]
        	    {
        	        FOLLOWPUSH(FOLLOW_insert_stmt_in_statement128);
        	        insert_stmt(ctx, stmt);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;
        	case 7:
        	    // SQL92.g:83:4: update_stmt[stmt]
        	    {
        	        FOLLOWPUSH(FOLLOW_update_stmt_in_statement134);
        	        update_stmt(ctx, stmt);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;
        	case 8:
        	    // SQL92.g:84:4: delete_stmt[stmt]
        	    {
        	        FOLLOWPUSH(FOLLOW_delete_stmt_in_statement140);
        	        delete_stmt(ctx, stmt);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end statement */

/**
 * $ANTLR start select_stmt
 * SQL92.g:93:1: select_stmt[uSQL::SQLStatement *sqlStmt] : select_core[sqlStmt] (sortingSection= sorting_section )? (limitSection= limit_section )? (offsetSection= offset_section )? ;
 */
static void
select_stmt(pSQL92Parser ctx, uSQL::SQLStatement *sqlStmt)
{
    uSQL::SQLOrderBy * sortingSection;
    #undef	RETURN_TYPE_sortingSection
    #define	RETURN_TYPE_sortingSection uSQL::SQLOrderBy *

    uSQL::SQLLimit * limitSection;
    #undef	RETURN_TYPE_limitSection
    #define	RETURN_TYPE_limitSection uSQL::SQLLimit *

    uSQL::SQLOffset * offsetSection;
    #undef	RETURN_TYPE_offsetSection
    #define	RETURN_TYPE_offsetSection uSQL::SQLOffset *

    /* Initialize rule variables
     */


    		// SELECT
    		uSQL::SQLSelect *sqlSelect = new uSQL::SQLSelect();
    		sqlStmt->addChildNode(sqlSelect);

    		sortingSection = NULL;
    		limitSection = NULL;
    		offsetSection = NULL;
    	
    {
        // SQL92.g:103:2: ( select_core[sqlStmt] (sortingSection= sorting_section )? (limitSection= limit_section )? (offsetSection= offset_section )? )
        // SQL92.g:103:4: select_core[sqlStmt] (sortingSection= sorting_section )? (limitSection= limit_section )? (offsetSection= offset_section )?
        {
            FOLLOWPUSH(FOLLOW_select_core_in_select_stmt164);
            select_core(ctx, sqlStmt);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleselect_stmtEx;
            }


            // SQL92.g:103:25: (sortingSection= sorting_section )?
            {
                int alt3=2;
                switch ( LA(1) )
                {
                    case ORDER:
                    	{
                    		alt3=1;
                    	}
                        break;
                }

                switch (alt3)
                {
            	case 1:
            	    // SQL92.g:103:26: sortingSection= sorting_section
            	    {
            	        FOLLOWPUSH(FOLLOW_sorting_section_in_select_stmt170);
            	        sortingSection=sorting_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_stmtEx;
            	        }


            	    }
            	    break;

                }
            }

            // SQL92.g:103:59: (limitSection= limit_section )?
            {
                int alt4=2;
                switch ( LA(1) )
                {
                    case LIMIT:
                    	{
                    		alt4=1;
                    	}
                        break;
                }

                switch (alt4)
                {
            	case 1:
            	    // SQL92.g:103:60: limitSection= limit_section
            	    {
            	        FOLLOWPUSH(FOLLOW_limit_section_in_select_stmt177);
            	        limitSection=limit_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_stmtEx;
            	        }


            	    }
            	    break;

                }
            }

            // SQL92.g:103:89: (offsetSection= offset_section )?
            {
                int alt5=2;
                switch ( LA(1) )
                {
                    case CURRENT_DATE:
                    case CURRENT_TIME:
                    case CURRENT_TIMESTAMP:
                    case FLOAT:
                    case ID:
                    case NIL:
                    case NUMBER:
                    case STRING:
                    	{
                    		alt5=1;
                    	}
                        break;
                }

                switch (alt5)
                {
            	case 1:
            	    // SQL92.g:103:90: offsetSection= offset_section
            	    {
            	        FOLLOWPUSH(FOLLOW_offset_section_in_select_stmt184);
            	        offsetSection=offset_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_stmtEx;
            	        }


            	    }
            	    break;

                }
            }

            {

                		// ORDER BY		
                		if (sortingSection)
                			sqlStmt->addChildNode(sortingSection);
                			
                		// LIMIT		
                		if (limitSection)
                			sqlStmt->addChildNode(limitSection);

                		// OFFSET
                		if (offsetSection)
                			sqlStmt->addChildNode(offsetSection);
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleselect_stmtEx; /* Prevent compiler warnings */
    ruleselect_stmtEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end select_stmt */

/**
 * $ANTLR start select_core
 * SQL92.g:119:1: select_core[uSQL::SQLStatement *sqlStmt] : SELECT ( DISTINCT | ALL )? ( expression[sqlColumn] )? ( AS name )? (fromSection= from_section )? (whereSection= where_section )? (groupSection= grouping_section )? (havingSection= having_section )? ;
 */
static void
select_core(pSQL92Parser ctx, uSQL::SQLStatement *sqlStmt)
{
    uSQL::SQLFrom * fromSection;
    #undef	RETURN_TYPE_fromSection
    #define	RETURN_TYPE_fromSection uSQL::SQLFrom *

    uSQL::SQLWhere * whereSection;
    #undef	RETURN_TYPE_whereSection
    #define	RETURN_TYPE_whereSection uSQL::SQLWhere *

    uSQL::SQLGroupBy * groupSection;
    #undef	RETURN_TYPE_groupSection
    #define	RETURN_TYPE_groupSection uSQL::SQLGroupBy *

    uSQL::SQLHaving * havingSection;
    #undef	RETURN_TYPE_havingSection
    #define	RETURN_TYPE_havingSection uSQL::SQLHaving *

    /* Initialize rule variables
     */


    		uSQL::SQLColumn *sqlColumn = new uSQL::SQLColumn();
    		fromSection = NULL;
    		whereSection = NULL;
    		groupSection = NULL;
    		havingSection = NULL;
    	
    {
        // SQL92.g:127:2: ( SELECT ( DISTINCT | ALL )? ( expression[sqlColumn] )? ( AS name )? (fromSection= from_section )? (whereSection= where_section )? (groupSection= grouping_section )? (havingSection= having_section )? )
        // SQL92.g:127:4: SELECT ( DISTINCT | ALL )? ( expression[sqlColumn] )? ( AS name )? (fromSection= from_section )? (whereSection= where_section )? (groupSection= grouping_section )? (havingSection= having_section )?
        {
             MATCHT(SELECT, &FOLLOW_SELECT_in_select_core209);
            if  (HASEXCEPTION())
            {
                goto ruleselect_coreEx;
            }


            // SQL92.g:127:11: ( DISTINCT | ALL )?
            {
                int alt6=2;
                switch ( LA(1) )
                {
                    case ALL:
                    case DISTINCT:
                    	{
                    		alt6=1;
                    	}
                        break;
                }

                switch (alt6)
                {
            	case 1:
            	    // SQL92.g:
            	    {
            	        if ( LA(1) == ALL || LA(1) == DISTINCT )
            	        {
            	            CONSUME();
            	            PERRORRECOVERY=ANTLR3_FALSE;
            	        }
            	        else
            	        {
            	            CONSTRUCTEX();
            	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
            	            EXCEPTION->expectingSet = NULL;

            	            goto ruleselect_coreEx;
            	        }


            	    }
            	    break;

                }
            }

            // SQL92.g:127:29: ( expression[sqlColumn] )?
            {
                int alt7=2;
                switch ( LA(1) )
                {
                    case ID:
                    	{
                    		alt7=1;
                    	}
                        break;
                    case NUMBER:
                    	{
                    		alt7=1;
                    	}
                        break;
                    case FLOAT:
                    	{
                    		alt7=1;
                    	}
                        break;
                    case STRING:
                    	{
                    		alt7=1;
                    	}
                        break;
                    case NIL:
                    	{
                    		alt7=1;
                    	}
                        break;
                    case CURRENT_TIME:
                    	{
                    		alt7=1;
                    	}
                        break;
                    case CURRENT_DATE:
                    	{
                    		alt7=1;
                    	}
                        break;
                    case CURRENT_TIMESTAMP:
                    	{
                    		alt7=1;
                    	}
                        break;
                }

                switch (alt7)
                {
            	case 1:
            	    // SQL92.g:127:30: expression[sqlColumn]
            	    {
            	        FOLLOWPUSH(FOLLOW_expression_in_select_core221);
            	        expression(ctx, sqlColumn);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_coreEx;
            	        }


            	    }
            	    break;

                }
            }

            // SQL92.g:127:54: ( AS name )?
            {
                int alt8=2;
                switch ( LA(1) )
                {
                    case AS:
                    	{
                    		alt8=1;
                    	}
                        break;
                }

                switch (alt8)
                {
            	case 1:
            	    // SQL92.g:127:55: AS name
            	    {
            	         MATCHT(AS, &FOLLOW_AS_in_select_core227);
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_coreEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_name_in_select_core229);
            	        name(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_coreEx;
            	        }


            	    }
            	    break;

                }
            }

            // SQL92.g:128:4: (fromSection= from_section )?
            {
                int alt9=2;
                switch ( LA(1) )
                {
                    case FROM:
                    	{
                    		alt9=1;
                    	}
                        break;
                }

                switch (alt9)
                {
            	case 1:
            	    // SQL92.g:128:5: fromSection= from_section
            	    {
            	        FOLLOWPUSH(FOLLOW_from_section_in_select_core242);
            	        fromSection=from_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_coreEx;
            	        }


            	    }
            	    break;

                }
            }

            // SQL92.g:129:4: (whereSection= where_section )?
            {
                int alt10=2;
                switch ( LA(1) )
                {
                    case WHERE:
                    	{
                    		alt10=1;
                    	}
                        break;
                }

                switch (alt10)
                {
            	case 1:
            	    // SQL92.g:129:5: whereSection= where_section
            	    {
            	        FOLLOWPUSH(FOLLOW_where_section_in_select_core255);
            	        whereSection=where_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_coreEx;
            	        }


            	    }
            	    break;

                }
            }

            // SQL92.g:130:4: (groupSection= grouping_section )?
            {
                int alt11=2;
                switch ( LA(1) )
                {
                    case GROUP:
                    	{
                    		alt11=1;
                    	}
                        break;
                }

                switch (alt11)
                {
            	case 1:
            	    // SQL92.g:130:5: groupSection= grouping_section
            	    {
            	        FOLLOWPUSH(FOLLOW_grouping_section_in_select_core267);
            	        groupSection=grouping_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_coreEx;
            	        }


            	    }
            	    break;

                }
            }

            // SQL92.g:131:4: (havingSection= having_section )?
            {
                int alt12=2;
                switch ( LA(1) )
                {
                    case HAVING:
                    	{
                    		alt12=1;
                    	}
                        break;
                }

                switch (alt12)
                {
            	case 1:
            	    // SQL92.g:131:5: havingSection= having_section
            	    {
            	        FOLLOWPUSH(FOLLOW_having_section_in_select_core280);
            	        havingSection=having_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselect_coreEx;
            	        }


            	    }
            	    break;

                }
            }

            {

                	  
                		// VALUE 
                		if (sqlColumn->hasExpressions())
                			sqlStmt->addChildNode(sqlColumn);
                		else 
                			delete sqlColumn;
                			
                		// FROM
                		if (fromSection)		
                			sqlStmt->addChildNode(fromSection);
                			
                		// WHERE
                		if (whereSection)		
                			sqlStmt->addChildNode(whereSection);

                		// GROUP BY
                		if (groupSection)		
                			sqlStmt->addChildNode(groupSection);

                		// HAVING
                		if (havingSection)		
                			sqlStmt->addChildNode(havingSection);
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleselect_coreEx; /* Prevent compiler warnings */
    ruleselect_coreEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end select_core */

/**
 * $ANTLR start result_column
 * SQL92.g:158:1: result_column[uSQL::SQLColumn *sqlColumn] : ( ASTERISK | expression_literal AS column_alias );
 */
static void
result_column(pSQL92Parser ctx, uSQL::SQLColumn *sqlColumn)
{
    /* Initialize rule variables
     */

    {
        {
            //  SQL92.g:159:2: ( ASTERISK | expression_literal AS column_alias )

            ANTLR3_UINT32 alt13;

            alt13=2;

            switch ( LA(1) )
            {
            case ASTERISK:
            	{
            		alt13=1;
            	}
                break;
            case CURRENT_DATE:
            case CURRENT_TIME:
            case CURRENT_TIMESTAMP:
            case FLOAT:
            case ID:
            case NIL:
            case NUMBER:
            case STRING:
            	{
            		alt13=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 13;
                EXCEPTION->state        = 0;


                goto ruleresult_columnEx;

            }

            switch (alt13)
            {
        	case 1:
        	    // SQL92.g:159:4: ASTERISK
        	    {
        	         MATCHT(ASTERISK, &FOLLOW_ASTERISK_in_result_column301);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleresult_columnEx;
        	        }


        	        {

        	            	  
        	        }


        	    }
        	    break;
        	case 2:
        	    // SQL92.g:161:4: expression_literal AS column_alias
        	    {
        	        FOLLOWPUSH(FOLLOW_expression_literal_in_result_column308);
        	        expression_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleresult_columnEx;
        	        }


        	         MATCHT(AS, &FOLLOW_AS_in_result_column310);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleresult_columnEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_column_alias_in_result_column312);
        	        column_alias(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleresult_columnEx;
        	        }


        	        {

        	            	  
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleresult_columnEx; /* Prevent compiler warnings */
    ruleresult_columnEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end result_column */

/**
 * $ANTLR start column_alias
 * SQL92.g:165:1: column_alias : ID ;
 */
static void
column_alias(pSQL92Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // SQL92.g:166:2: ( ID )
        // SQL92.g:166:4: ID
        {
             MATCHT(ID, &FOLLOW_ID_in_column_alias325);
            if  (HASEXCEPTION())
            {
                goto rulecolumn_aliasEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulecolumn_aliasEx; /* Prevent compiler warnings */
    rulecolumn_aliasEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end column_alias */

/**
 * $ANTLR start from_section
 * SQL92.g:169:1: from_section returns [uSQL::SQLFrom *sqlFrom] : ( FROM table_name[sqlFrom] ) ( COMMA table_name[sqlFrom] )* ;
 */
static uSQL::SQLFrom *
from_section(pSQL92Parser ctx)
{
    uSQL::SQLFrom * sqlFrom;


    /* Initialize rule variables
     */


    		sqlFrom = new uSQL::SQLFrom();
    	
    {
        // SQL92.g:173:2: ( ( FROM table_name[sqlFrom] ) ( COMMA table_name[sqlFrom] )* )
        // SQL92.g:173:4: ( FROM table_name[sqlFrom] ) ( COMMA table_name[sqlFrom] )*
        {
            // SQL92.g:173:4: ( FROM table_name[sqlFrom] )
            // SQL92.g:173:5: FROM table_name[sqlFrom]
            {
                 MATCHT(FROM, &FOLLOW_FROM_in_from_section348);
                if  (HASEXCEPTION())
                {
                    goto rulefrom_sectionEx;
                }


                FOLLOWPUSH(FOLLOW_table_name_in_from_section350);
                table_name(ctx, sqlFrom);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulefrom_sectionEx;
                }


            }


            // SQL92.g:173:31: ( COMMA table_name[sqlFrom] )*

            for (;;)
            {
                int alt14=2;
                switch ( LA(1) )
                {
                case COMMA:
                	{
                		alt14=1;
                	}
                    break;

                }

                switch (alt14)
                {
            	case 1:
            	    // SQL92.g:173:32: COMMA table_name[sqlFrom]
            	    {
            	         MATCHT(COMMA, &FOLLOW_COMMA_in_from_section355);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefrom_sectionEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_table_name_in_from_section357);
            	        table_name(ctx, sqlFrom);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulefrom_sectionEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop14;	/* break out of the loop */
            	    break;
                }
            }
            loop14: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulefrom_sectionEx; /* Prevent compiler warnings */
    rulefrom_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlFrom;
}
/* $ANTLR end from_section */

/**
 * $ANTLR start table_name
 * SQL92.g:176:1: table_name[uSQL::SQLFrom *sqlFrom] : dataSource= data_source ;
 */
static void
table_name(pSQL92Parser ctx, uSQL::SQLFrom *sqlFrom)
{
    uSQL::SQLDataSource * dataSource;
    #undef	RETURN_TYPE_dataSource
    #define	RETURN_TYPE_dataSource uSQL::SQLDataSource *

    /* Initialize rule variables
     */

    {
        // SQL92.g:177:2: (dataSource= data_source )
        // SQL92.g:177:4: dataSource= data_source
        {
            FOLLOWPUSH(FOLLOW_data_source_in_table_name377);
            dataSource=data_source(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletable_nameEx;
            }


            {

                		sqlFrom->addChildNode(dataSource);
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruletable_nameEx; /* Prevent compiler warnings */
    ruletable_nameEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end table_name */

/**
 * $ANTLR start data_source
 * SQL92.g:182:1: data_source returns [uSQL::SQLDataSource *sqlDataSource] : collection_name ;
 */
static uSQL::SQLDataSource *
data_source(pSQL92Parser ctx)
{
    uSQL::SQLDataSource * sqlDataSource;


    SQL92Parser_collection_name_return collection_name1;
    #undef	RETURN_TYPE_collection_name1
    #define	RETURN_TYPE_collection_name1 SQL92Parser_collection_name_return

    /* Initialize rule variables
     */


    		sqlDataSource = new uSQL::SQLDataSource();
    	
    {
        // SQL92.g:186:2: ( collection_name )
        // SQL92.g:186:4: collection_name
        {
            FOLLOWPUSH(FOLLOW_collection_name_in_data_source400);
            collection_name1=collection_name(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledata_sourceEx;
            }


            {

                		// Collection
                		sqlDataSource->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, collection_name1.start, collection_name1.stop))
                ));
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruledata_sourceEx; /* Prevent compiler warnings */
    ruledata_sourceEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlDataSource;
}
/* $ANTLR end data_source */

/**
 * $ANTLR start grouping_section
 * SQL92.g:192:1: grouping_section returns [uSQL::SQLGroupBy *sqlGroupBy] : GROUP BY expression[sqlGroupBy] ( COMMA expression[sqlGroupBy] )* ;
 */
static uSQL::SQLGroupBy *
grouping_section(pSQL92Parser ctx)
{
    uSQL::SQLGroupBy * sqlGroupBy;


    /* Initialize rule variables
     */


    		sqlGroupBy = new uSQL::SQLGroupBy();
    	
    {
        // SQL92.g:196:2: ( GROUP BY expression[sqlGroupBy] ( COMMA expression[sqlGroupBy] )* )
        // SQL92.g:196:4: GROUP BY expression[sqlGroupBy] ( COMMA expression[sqlGroupBy] )*
        {
             MATCHT(GROUP, &FOLLOW_GROUP_in_grouping_section423);
            if  (HASEXCEPTION())
            {
                goto rulegrouping_sectionEx;
            }


             MATCHT(BY, &FOLLOW_BY_in_grouping_section425);
            if  (HASEXCEPTION())
            {
                goto rulegrouping_sectionEx;
            }


            FOLLOWPUSH(FOLLOW_expression_in_grouping_section427);
            expression(ctx, sqlGroupBy);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulegrouping_sectionEx;
            }


            // SQL92.g:196:36: ( COMMA expression[sqlGroupBy] )*

            for (;;)
            {
                int alt15=2;
                switch ( LA(1) )
                {
                case COMMA:
                	{
                		alt15=1;
                	}
                    break;

                }

                switch (alt15)
                {
            	case 1:
            	    // SQL92.g:196:37: COMMA expression[sqlGroupBy]
            	    {
            	         MATCHT(COMMA, &FOLLOW_COMMA_in_grouping_section431);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulegrouping_sectionEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_expression_in_grouping_section433);
            	        expression(ctx, sqlGroupBy);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulegrouping_sectionEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop15;	/* break out of the loop */
            	    break;
                }
            }
            loop15: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulegrouping_sectionEx; /* Prevent compiler warnings */
    rulegrouping_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlGroupBy;
}
/* $ANTLR end grouping_section */

/**
 * $ANTLR start having_section
 * SQL92.g:199:1: having_section returns [uSQL::SQLHaving *sqlHaving] : HAVING expression[sqlHaving] ;
 */
static uSQL::SQLHaving *
having_section(pSQL92Parser ctx)
{
    uSQL::SQLHaving * sqlHaving;


    /* Initialize rule variables
     */


    		sqlHaving = new uSQL::SQLHaving();
    	
    {
        // SQL92.g:203:2: ( HAVING expression[sqlHaving] )
        // SQL92.g:203:4: HAVING expression[sqlHaving]
        {
             MATCHT(HAVING, &FOLLOW_HAVING_in_having_section458);
            if  (HASEXCEPTION())
            {
                goto rulehaving_sectionEx;
            }


            FOLLOWPUSH(FOLLOW_expression_in_having_section460);
            expression(ctx, sqlHaving);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulehaving_sectionEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulehaving_sectionEx; /* Prevent compiler warnings */
    rulehaving_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlHaving;
}
/* $ANTLR end having_section */

/**
 * $ANTLR start sorting_section
 * SQL92.g:206:1: sorting_section returns [uSQL::SQLOrderBy *sqlOrders] : ORDER BY sorting_item[sqlOrders] ( COMMA sorting_item[sqlOrders] )* ;
 */
static uSQL::SQLOrderBy *
sorting_section(pSQL92Parser ctx)
{
    uSQL::SQLOrderBy * sqlOrders;


    /* Initialize rule variables
     */


    		sqlOrders = new uSQL::SQLOrderBy();
    	
    {
        // SQL92.g:210:2: ( ORDER BY sorting_item[sqlOrders] ( COMMA sorting_item[sqlOrders] )* )
        // SQL92.g:210:4: ORDER BY sorting_item[sqlOrders] ( COMMA sorting_item[sqlOrders] )*
        {
             MATCHT(ORDER, &FOLLOW_ORDER_in_sorting_section482);
            if  (HASEXCEPTION())
            {
                goto rulesorting_sectionEx;
            }


             MATCHT(BY, &FOLLOW_BY_in_sorting_section484);
            if  (HASEXCEPTION())
            {
                goto rulesorting_sectionEx;
            }


            FOLLOWPUSH(FOLLOW_sorting_item_in_sorting_section486);
            sorting_item(ctx, sqlOrders);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesorting_sectionEx;
            }


            // SQL92.g:210:37: ( COMMA sorting_item[sqlOrders] )*

            for (;;)
            {
                int alt16=2;
                switch ( LA(1) )
                {
                case COMMA:
                	{
                		alt16=1;
                	}
                    break;

                }

                switch (alt16)
                {
            	case 1:
            	    // SQL92.g:210:38: COMMA sorting_item[sqlOrders]
            	    {
            	         MATCHT(COMMA, &FOLLOW_COMMA_in_sorting_section490);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesorting_sectionEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_sorting_item_in_sorting_section492);
            	        sorting_item(ctx, sqlOrders);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesorting_sectionEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop16;	/* break out of the loop */
            	    break;
                }
            }
            loop16: ; /* Jump out to here if this rule does not match */


        }

    }

    // This is where rules clean up and exit
    //
    goto rulesorting_sectionEx; /* Prevent compiler warnings */
    rulesorting_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlOrders;
}
/* $ANTLR end sorting_section */

/**
 * $ANTLR start sorting_item
 * SQL92.g:213:1: sorting_item[uSQL::SQLOrderBy *sqlOrders] : property ( sorting_specification )? ;
 */
static void
sorting_item(pSQL92Parser ctx, uSQL::SQLOrderBy *sqlOrders)
{
    SQL92Parser_property_return property2;
    #undef	RETURN_TYPE_property2
    #define	RETURN_TYPE_property2 SQL92Parser_property_return

    SQL92Parser_sorting_specification_return sorting_specification3;
    #undef	RETURN_TYPE_sorting_specification3
    #define	RETURN_TYPE_sorting_specification3 SQL92Parser_sorting_specification_return

    /* Initialize rule variables
     */

    {
        // SQL92.g:214:2: ( property ( sorting_specification )? )
        // SQL92.g:214:4: property ( sorting_specification )?
        {
            FOLLOWPUSH(FOLLOW_property_in_sorting_item510);
            property2=property(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulesorting_itemEx;
            }


            // SQL92.g:214:13: ( sorting_specification )?
            {
                int alt17=2;
                switch ( LA(1) )
                {
                    case ASC:
                    case DESC:
                    	{
                    		alt17=1;
                    	}
                        break;
                }

                switch (alt17)
                {
            	case 1:
            	    // SQL92.g:214:14: sorting_specification
            	    {
            	        FOLLOWPUSH(FOLLOW_sorting_specification_in_sorting_item513);
            	        sorting_specification3=sorting_specification(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulesorting_itemEx;
            	        }


            	    }
            	    break;

                }
            }

            {

                		uSQL::SQLOrder *sqlOrder = new uSQL::SQLOrder();
                		sqlOrder->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, property2.start, property2.stop))
                ));
                		if (sorting_specification)
                			sqlOrder->setOrder(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, sorting_specification3.start, sorting_specification3.stop))
                ));
                		sqlOrders->addChildNode(sqlOrder);
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulesorting_itemEx; /* Prevent compiler warnings */
    rulesorting_itemEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end sorting_item */

/**
 * $ANTLR start sorting_specification
 * SQL92.g:223:1: sorting_specification : ( ASC | DESC );
 */
static SQL92Parser_sorting_specification_return
sorting_specification(pSQL92Parser ctx)
{
    SQL92Parser_sorting_specification_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // SQL92.g:224:2: ( ASC | DESC )
        // SQL92.g:
        {
            if ( LA(1) == ASC || LA(1) == DESC )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto rulesorting_specificationEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulesorting_specificationEx; /* Prevent compiler warnings */
    rulesorting_specificationEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end sorting_specification */

/**
 * $ANTLR start limit_section
 * SQL92.g:228:1: limit_section returns [uSQL::SQLLimit *sqlLimit] : LIMIT (offsetExpr= expression_literal COMMA )? countExpr= expression_literal ;
 */
static uSQL::SQLLimit *
limit_section(pSQL92Parser ctx)
{
    uSQL::SQLLimit * sqlLimit;


    uSQL::SQLExpression * offsetExpr;
    #undef	RETURN_TYPE_offsetExpr
    #define	RETURN_TYPE_offsetExpr uSQL::SQLExpression *

    uSQL::SQLExpression * countExpr;
    #undef	RETURN_TYPE_countExpr
    #define	RETURN_TYPE_countExpr uSQL::SQLExpression *

    /* Initialize rule variables
     */


    		sqlLimit = new uSQL::SQLLimit();
    		offsetExpr = NULL;
    	
    {
        // SQL92.g:233:2: ( LIMIT (offsetExpr= expression_literal COMMA )? countExpr= expression_literal )
        // SQL92.g:233:4: LIMIT (offsetExpr= expression_literal COMMA )? countExpr= expression_literal
        {
             MATCHT(LIMIT, &FOLLOW_LIMIT_in_limit_section554);
            if  (HASEXCEPTION())
            {
                goto rulelimit_sectionEx;
            }


            // SQL92.g:233:10: (offsetExpr= expression_literal COMMA )?
            {
                int alt18=2;
                switch ( LA(1) )
                {
                    case ID:
                    	{
                    		switch ( LA(2) )
                    		{
                    		    case COMMA:
                    		    	{
                    		    		alt18=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                    case NUMBER:
                    	{
                    		switch ( LA(2) )
                    		{
                    		    case COMMA:
                    		    	{
                    		    		alt18=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                    case FLOAT:
                    	{
                    		switch ( LA(2) )
                    		{
                    		    case COMMA:
                    		    	{
                    		    		alt18=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                    case STRING:
                    	{
                    		switch ( LA(2) )
                    		{
                    		    case COMMA:
                    		    	{
                    		    		alt18=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                    case NIL:
                    	{
                    		switch ( LA(2) )
                    		{
                    		    case COMMA:
                    		    	{
                    		    		alt18=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                    case CURRENT_TIME:
                    	{
                    		switch ( LA(2) )
                    		{
                    		    case COMMA:
                    		    	{
                    		    		alt18=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                    case CURRENT_DATE:
                    	{
                    		switch ( LA(2) )
                    		{
                    		    case COMMA:
                    		    	{
                    		    		alt18=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                    case CURRENT_TIMESTAMP:
                    	{
                    		switch ( LA(2) )
                    		{
                    		    case COMMA:
                    		    	{
                    		    		alt18=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                }

                switch (alt18)
                {
            	case 1:
            	    // SQL92.g:233:11: offsetExpr= expression_literal COMMA
            	    {
            	        FOLLOWPUSH(FOLLOW_expression_literal_in_limit_section559);
            	        offsetExpr=expression_literal(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelimit_sectionEx;
            	        }


            	         MATCHT(COMMA, &FOLLOW_COMMA_in_limit_section561);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelimit_sectionEx;
            	        }


            	    }
            	    break;

                }
            }

            FOLLOWPUSH(FOLLOW_expression_literal_in_limit_section567);
            countExpr=expression_literal(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulelimit_sectionEx;
            }


            {

                		if (offsetExpr)
                			sqlLimit->addChildNode(offsetExpr);
                		sqlLimit->addChildNode(countExpr);
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulelimit_sectionEx; /* Prevent compiler warnings */
    rulelimit_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlLimit;
}
/* $ANTLR end limit_section */

/**
 * $ANTLR start offset_section
 * SQL92.g:240:1: offset_section returns [uSQL::SQLOffset *sqlOffset] : offsetExpr= expression_literal ;
 */
static uSQL::SQLOffset *
offset_section(pSQL92Parser ctx)
{
    uSQL::SQLOffset * sqlOffset;


    uSQL::SQLExpression * offsetExpr;
    #undef	RETURN_TYPE_offsetExpr
    #define	RETURN_TYPE_offsetExpr uSQL::SQLExpression *

    /* Initialize rule variables
     */


    		sqlOffset = new uSQL::SQLOffset();
    	
    {
        // SQL92.g:244:2: (offsetExpr= expression_literal )
        // SQL92.g:244:4: offsetExpr= expression_literal
        {
            FOLLOWPUSH(FOLLOW_expression_literal_in_offset_section592);
            offsetExpr=expression_literal(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleoffset_sectionEx;
            }


            {

                		sqlOffset->addChildNode(offsetExpr);
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleoffset_sectionEx; /* Prevent compiler warnings */
    ruleoffset_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlOffset;
}
/* $ANTLR end offset_section */

/**
 * $ANTLR start create_collection_stmt
 * SQL92.g:256:1: create_collection_stmt[uSQL::SQLStatement *sqlStmt] : CREATE COLLECTION collectionNode= collection_section ( OPTIONS expression[sqlOpt] )? ;
 */
static void
create_collection_stmt(pSQL92Parser ctx, uSQL::SQLStatement *sqlStmt)
{
    uSQL::SQLCollection * collectionNode;
    #undef	RETURN_TYPE_collectionNode
    #define	RETURN_TYPE_collectionNode uSQL::SQLCollection *

    /* Initialize rule variables
     */

    	
    		uSQL::SQLOption *sqlOpt = new uSQL::SQLOption();
    	
    {
        // SQL92.g:260:2: ( CREATE COLLECTION collectionNode= collection_section ( OPTIONS expression[sqlOpt] )? )
        // SQL92.g:260:4: CREATE COLLECTION collectionNode= collection_section ( OPTIONS expression[sqlOpt] )?
        {
             MATCHT(CREATE, &FOLLOW_CREATE_in_create_collection_stmt618);
            if  (HASEXCEPTION())
            {
                goto rulecreate_collection_stmtEx;
            }


             MATCHT(COLLECTION, &FOLLOW_COLLECTION_in_create_collection_stmt620);
            if  (HASEXCEPTION())
            {
                goto rulecreate_collection_stmtEx;
            }


            FOLLOWPUSH(FOLLOW_collection_section_in_create_collection_stmt624);
            collectionNode=collection_section(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecreate_collection_stmtEx;
            }


            // SQL92.g:260:56: ( OPTIONS expression[sqlOpt] )?
            {
                int alt19=2;
                switch ( LA(1) )
                {
                    case OPTIONS:
                    	{
                    		alt19=1;
                    	}
                        break;
                }

                switch (alt19)
                {
            	case 1:
            	    // SQL92.g:260:57: OPTIONS expression[sqlOpt]
            	    {
            	         MATCHT(OPTIONS, &FOLLOW_OPTIONS_in_create_collection_stmt627);
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecreate_collection_stmtEx;
            	        }


            	        FOLLOWPUSH(FOLLOW_expression_in_create_collection_stmt629);
            	        expression(ctx, sqlOpt);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulecreate_collection_stmtEx;
            	        }


            	    }
            	    break;

                }
            }

            {

                		// CREATE
                		uSQL::SQLCreate *sqlCmd = new uSQL::SQLCreate();
                		sqlStmt->addChildNode(sqlCmd);
                		
                		// Collection
                		sqlCmd->addChildNode(collectionNode);

                		// Option 
                		if (sqlOpt->hasExpressions())
                			sqlCmd->addChildNode(sqlOpt);
                		else 
                			delete sqlOpt;
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulecreate_collection_stmtEx; /* Prevent compiler warnings */
    rulecreate_collection_stmtEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end create_collection_stmt */

/**
 * $ANTLR start drop_collection_stmt
 * SQL92.g:282:1: drop_collection_stmt[uSQL::SQLStatement *sqlStmt] : DROP COLLECTION collectionNode= collection_section ;
 */
static void
drop_collection_stmt(pSQL92Parser ctx, uSQL::SQLStatement *sqlStmt)
{
    uSQL::SQLCollection * collectionNode;
    #undef	RETURN_TYPE_collectionNode
    #define	RETURN_TYPE_collectionNode uSQL::SQLCollection *

    /* Initialize rule variables
     */

    	
    	
    {
        // SQL92.g:285:2: ( DROP COLLECTION collectionNode= collection_section )
        // SQL92.g:285:4: DROP COLLECTION collectionNode= collection_section
        {
             MATCHT(DROP, &FOLLOW_DROP_in_drop_collection_stmt656);
            if  (HASEXCEPTION())
            {
                goto ruledrop_collection_stmtEx;
            }


             MATCHT(COLLECTION, &FOLLOW_COLLECTION_in_drop_collection_stmt658);
            if  (HASEXCEPTION())
            {
                goto ruledrop_collection_stmtEx;
            }


            FOLLOWPUSH(FOLLOW_collection_section_in_drop_collection_stmt662);
            collectionNode=collection_section(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledrop_collection_stmtEx;
            }


            {

                		// DROP
                		uSQL::SQLDrop *sqlCmd = new uSQL::SQLDrop();
                		sqlStmt->addChildNode(sqlCmd);
                		
                		// Collection
                		sqlCmd->addChildNode(collectionNode);
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruledrop_collection_stmtEx; /* Prevent compiler warnings */
    ruledrop_collection_stmtEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end drop_collection_stmt */

/**
 * $ANTLR start create_index_stmt
 * SQL92.g:302:1: create_index_stmt[uSQL::SQLStatement *sqlStmt] : CREATE COLLECTION_INDEX indexNode= index_section ;
 */
static void
create_index_stmt(pSQL92Parser ctx, uSQL::SQLStatement *sqlStmt)
{
    uSQL::SQLIndex * indexNode;
    #undef	RETURN_TYPE_indexNode
    #define	RETURN_TYPE_indexNode uSQL::SQLIndex *

    /* Initialize rule variables
     */

    	
    	
    {
        // SQL92.g:305:2: ( CREATE COLLECTION_INDEX indexNode= index_section )
        // SQL92.g:305:4: CREATE COLLECTION_INDEX indexNode= index_section
        {
             MATCHT(CREATE, &FOLLOW_CREATE_in_create_index_stmt687);
            if  (HASEXCEPTION())
            {
                goto rulecreate_index_stmtEx;
            }


             MATCHT(COLLECTION_INDEX, &FOLLOW_COLLECTION_INDEX_in_create_index_stmt689);
            if  (HASEXCEPTION())
            {
                goto rulecreate_index_stmtEx;
            }


            FOLLOWPUSH(FOLLOW_index_section_in_create_index_stmt693);
            indexNode=index_section(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecreate_index_stmtEx;
            }


            {

                		// DROP
                		uSQL::SQLCreateIndex *sqlCmd = new uSQL::SQLCreateIndex();
                		sqlStmt->addChildNode(sqlCmd);
                		
                		// Collection
                		sqlCmd->addChildNode(indexNode);
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulecreate_index_stmtEx; /* Prevent compiler warnings */
    rulecreate_index_stmtEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end create_index_stmt */

/**
 * $ANTLR start drop_index_stmt
 * SQL92.g:322:1: drop_index_stmt[uSQL::SQLStatement *sqlStmt] : DROP COLLECTION_INDEX indexNode= index_section ;
 */
static void
drop_index_stmt(pSQL92Parser ctx, uSQL::SQLStatement *sqlStmt)
{
    uSQL::SQLIndex * indexNode;
    #undef	RETURN_TYPE_indexNode
    #define	RETURN_TYPE_indexNode uSQL::SQLIndex *

    /* Initialize rule variables
     */

    	
    	
    {
        // SQL92.g:325:2: ( DROP COLLECTION_INDEX indexNode= index_section )
        // SQL92.g:325:4: DROP COLLECTION_INDEX indexNode= index_section
        {
             MATCHT(DROP, &FOLLOW_DROP_in_drop_index_stmt718);
            if  (HASEXCEPTION())
            {
                goto ruledrop_index_stmtEx;
            }


             MATCHT(COLLECTION_INDEX, &FOLLOW_COLLECTION_INDEX_in_drop_index_stmt720);
            if  (HASEXCEPTION())
            {
                goto ruledrop_index_stmtEx;
            }


            FOLLOWPUSH(FOLLOW_index_section_in_drop_index_stmt724);
            indexNode=index_section(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledrop_index_stmtEx;
            }


            {

                		// DROP
                		uSQL::SQLDropIndex *sqlCmd = new uSQL::SQLDropIndex();
                		sqlStmt->addChildNode(sqlCmd);
                		
                		// Collection
                		sqlCmd->addChildNode(indexNode);
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruledrop_index_stmtEx; /* Prevent compiler warnings */
    ruledrop_index_stmtEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end drop_index_stmt */

/**
 * $ANTLR start insert_stmt
 * SQL92.g:342:1: insert_stmt[uSQL::SQLStatement *sqlStmt] : (isAsync= sync_operator )? INSERT INTO collectionNode= collection_section VALUE expression[sqlValue] ;
 */
static void
insert_stmt(pSQL92Parser ctx, uSQL::SQLStatement *sqlStmt)
{
    bool isAsync;
    #undef	RETURN_TYPE_isAsync
    #define	RETURN_TYPE_isAsync bool

    uSQL::SQLCollection * collectionNode;
    #undef	RETURN_TYPE_collectionNode
    #define	RETURN_TYPE_collectionNode uSQL::SQLCollection *

    /* Initialize rule variables
     */


    		uSQL::SQLValue *sqlValue = new uSQL::SQLValue();
    		isAsync = false;
    	
    {
        // SQL92.g:347:2: ( (isAsync= sync_operator )? INSERT INTO collectionNode= collection_section VALUE expression[sqlValue] )
        // SQL92.g:347:4: (isAsync= sync_operator )? INSERT INTO collectionNode= collection_section VALUE expression[sqlValue]
        {
            // SQL92.g:347:4: (isAsync= sync_operator )?
            {
                int alt20=2;
                switch ( LA(1) )
                {
                    case ASYNC:
                    case SYNC:
                    	{
                    		alt20=1;
                    	}
                        break;
                }

                switch (alt20)
                {
            	case 1:
            	    // SQL92.g:347:5: isAsync= sync_operator
            	    {
            	        FOLLOWPUSH(FOLLOW_sync_operator_in_insert_stmt752);
            	        isAsync=sync_operator(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleinsert_stmtEx;
            	        }


            	    }
            	    break;

                }
            }

             MATCHT(INSERT, &FOLLOW_INSERT_in_insert_stmt756);
            if  (HASEXCEPTION())
            {
                goto ruleinsert_stmtEx;
            }


             MATCHT(INTO, &FOLLOW_INTO_in_insert_stmt758);
            if  (HASEXCEPTION())
            {
                goto ruleinsert_stmtEx;
            }


            FOLLOWPUSH(FOLLOW_collection_section_in_insert_stmt762);
            collectionNode=collection_section(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinsert_stmtEx;
            }


             MATCHT(VALUE, &FOLLOW_VALUE_in_insert_stmt764);
            if  (HASEXCEPTION())
            {
                goto ruleinsert_stmtEx;
            }


            FOLLOWPUSH(FOLLOW_expression_in_insert_stmt766);
            expression(ctx, sqlValue);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleinsert_stmtEx;
            }


            {

                		// INSERT
                		uSQL::SQLInsert *sqlCmd = new uSQL::SQLInsert();
                		sqlCmd->setAsyncEnabled(isAsync);
                		sqlStmt->addChildNode(sqlCmd);

                		// Collection
                		sqlCmd->addChildNode(collectionNode);
                		
                		// Value
                		sqlCmd->addChildNode(sqlValue);
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleinsert_stmtEx; /* Prevent compiler warnings */
    ruleinsert_stmtEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end insert_stmt */

/**
 * $ANTLR start update_stmt
 * SQL92.g:368:1: update_stmt[uSQL::SQLStatement *sqlStmt] : (isAsync= sync_operator )? UPDATE INTO collectionNode= collection_section SET property_section[sqlValue] ( property_section[sqlValue] )* (whereSection= where_section )? ;
 */
static void
update_stmt(pSQL92Parser ctx, uSQL::SQLStatement *sqlStmt)
{
    bool isAsync;
    #undef	RETURN_TYPE_isAsync
    #define	RETURN_TYPE_isAsync bool

    uSQL::SQLCollection * collectionNode;
    #undef	RETURN_TYPE_collectionNode
    #define	RETURN_TYPE_collectionNode uSQL::SQLCollection *

    uSQL::SQLWhere * whereSection;
    #undef	RETURN_TYPE_whereSection
    #define	RETURN_TYPE_whereSection uSQL::SQLWhere *

    /* Initialize rule variables
     */


    		uSQL::SQLValue *sqlValue = new uSQL::SQLValue();
    		isAsync = false;
    		whereSection = NULL;
    	
    {
        // SQL92.g:374:2: ( (isAsync= sync_operator )? UPDATE INTO collectionNode= collection_section SET property_section[sqlValue] ( property_section[sqlValue] )* (whereSection= where_section )? )
        // SQL92.g:374:4: (isAsync= sync_operator )? UPDATE INTO collectionNode= collection_section SET property_section[sqlValue] ( property_section[sqlValue] )* (whereSection= where_section )?
        {
            // SQL92.g:374:4: (isAsync= sync_operator )?
            {
                int alt21=2;
                switch ( LA(1) )
                {
                    case ASYNC:
                    case SYNC:
                    	{
                    		alt21=1;
                    	}
                        break;
                }

                switch (alt21)
                {
            	case 1:
            	    // SQL92.g:374:5: isAsync= sync_operator
            	    {
            	        FOLLOWPUSH(FOLLOW_sync_operator_in_update_stmt795);
            	        isAsync=sync_operator(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleupdate_stmtEx;
            	        }


            	    }
            	    break;

                }
            }

             MATCHT(UPDATE, &FOLLOW_UPDATE_in_update_stmt799);
            if  (HASEXCEPTION())
            {
                goto ruleupdate_stmtEx;
            }


             MATCHT(INTO, &FOLLOW_INTO_in_update_stmt801);
            if  (HASEXCEPTION())
            {
                goto ruleupdate_stmtEx;
            }


            FOLLOWPUSH(FOLLOW_collection_section_in_update_stmt805);
            collectionNode=collection_section(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleupdate_stmtEx;
            }


             MATCHT(SET, &FOLLOW_SET_in_update_stmt807);
            if  (HASEXCEPTION())
            {
                goto ruleupdate_stmtEx;
            }


            FOLLOWPUSH(FOLLOW_property_section_in_update_stmt809);
            property_section(ctx, sqlValue);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleupdate_stmtEx;
            }


            // SQL92.g:374:106: ( property_section[sqlValue] )*

            for (;;)
            {
                int alt22=2;
                switch ( LA(1) )
                {
                case ID:
                	{
                		alt22=1;
                	}
                    break;

                }

                switch (alt22)
                {
            	case 1:
            	    // SQL92.g:374:107: property_section[sqlValue]
            	    {
            	        FOLLOWPUSH(FOLLOW_property_section_in_update_stmt813);
            	        property_section(ctx, sqlValue);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleupdate_stmtEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop22;	/* break out of the loop */
            	    break;
                }
            }
            loop22: ; /* Jump out to here if this rule does not match */


            // SQL92.g:374:136: (whereSection= where_section )?
            {
                int alt23=2;
                switch ( LA(1) )
                {
                    case WHERE:
                    	{
                    		alt23=1;
                    	}
                        break;
                }

                switch (alt23)
                {
            	case 1:
            	    // SQL92.g:374:137: whereSection= where_section
            	    {
            	        FOLLOWPUSH(FOLLOW_where_section_in_update_stmt823);
            	        whereSection=where_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleupdate_stmtEx;
            	        }


            	    }
            	    break;

                }
            }

            {

                		// INSERT
                		uSQL::SQLUpdate *sqlCmd = new uSQL::SQLUpdate();
                		sqlCmd->setAsyncEnabled(isAsync);
                		sqlStmt->addChildNode(sqlCmd);

                		// Collection
                		sqlCmd->addChildNode(collectionNode);
                		
                		// Value
                		sqlCmd->addChildNode(sqlValue);

                		// WHERE
                		if (whereSection)		
                			sqlStmt->addChildNode(whereSection);
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleupdate_stmtEx; /* Prevent compiler warnings */
    ruleupdate_stmtEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end update_stmt */

/**
 * $ANTLR start property_section
 * SQL92.g:394:1: property_section[uSQL::SQLValue *sqlValue] : property '=' expr= expression_literal ;
 */
static void
property_section(pSQL92Parser ctx, uSQL::SQLValue *sqlValue)
{
    uSQL::SQLExpression * expr;
    #undef	RETURN_TYPE_expr
    #define	RETURN_TYPE_expr uSQL::SQLExpression *

    SQL92Parser_property_return property4;
    #undef	RETURN_TYPE_property4
    #define	RETURN_TYPE_property4 SQL92Parser_property_return

    /* Initialize rule variables
     */


    		
    	
    {
        // SQL92.g:398:2: ( property '=' expr= expression_literal )
        // SQL92.g:398:4: property '=' expr= expression_literal
        {
            FOLLOWPUSH(FOLLOW_property_in_property_section848);
            property4=property(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleproperty_sectionEx;
            }


             MATCHT(95, &FOLLOW_95_in_property_section850);
            if  (HASEXCEPTION())
            {
                goto ruleproperty_sectionEx;
            }


            FOLLOWPUSH(FOLLOW_expression_literal_in_property_section854);
            expr=expression_literal(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleproperty_sectionEx;
            }


            {

                		expr->setName(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, property4.start, property4.stop))
                ));
                		sqlValue->addChildNode(expr);
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleproperty_sectionEx; /* Prevent compiler warnings */
    ruleproperty_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end property_section */

/**
 * $ANTLR start delete_stmt
 * SQL92.g:412:1: delete_stmt[uSQL::SQLStatement *sqlStmt] : (isAsync= sync_operator )? DELETE FROM collectionNode= collection_section (whereSection= where_section )? ;
 */
static void
delete_stmt(pSQL92Parser ctx, uSQL::SQLStatement *sqlStmt)
{
    bool isAsync;
    #undef	RETURN_TYPE_isAsync
    #define	RETURN_TYPE_isAsync bool

    uSQL::SQLCollection * collectionNode;
    #undef	RETURN_TYPE_collectionNode
    #define	RETURN_TYPE_collectionNode uSQL::SQLCollection *

    uSQL::SQLWhere * whereSection;
    #undef	RETURN_TYPE_whereSection
    #define	RETURN_TYPE_whereSection uSQL::SQLWhere *

    /* Initialize rule variables
     */


    		isAsync = false;
    		whereSection = NULL;
    	
    {
        // SQL92.g:417:2: ( (isAsync= sync_operator )? DELETE FROM collectionNode= collection_section (whereSection= where_section )? )
        // SQL92.g:417:4: (isAsync= sync_operator )? DELETE FROM collectionNode= collection_section (whereSection= where_section )?
        {
            // SQL92.g:417:4: (isAsync= sync_operator )?
            {
                int alt24=2;
                switch ( LA(1) )
                {
                    case ASYNC:
                    case SYNC:
                    	{
                    		alt24=1;
                    	}
                        break;
                }

                switch (alt24)
                {
            	case 1:
            	    // SQL92.g:417:5: isAsync= sync_operator
            	    {
            	        FOLLOWPUSH(FOLLOW_sync_operator_in_delete_stmt883);
            	        isAsync=sync_operator(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledelete_stmtEx;
            	        }


            	    }
            	    break;

                }
            }

             MATCHT(DELETE, &FOLLOW_DELETE_in_delete_stmt887);
            if  (HASEXCEPTION())
            {
                goto ruledelete_stmtEx;
            }


             MATCHT(FROM, &FOLLOW_FROM_in_delete_stmt889);
            if  (HASEXCEPTION())
            {
                goto ruledelete_stmtEx;
            }


            FOLLOWPUSH(FOLLOW_collection_section_in_delete_stmt893);
            collectionNode=collection_section(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruledelete_stmtEx;
            }


            // SQL92.g:417:75: (whereSection= where_section )?
            {
                int alt25=2;
                switch ( LA(1) )
                {
                    case WHERE:
                    	{
                    		alt25=1;
                    	}
                        break;
                }

                switch (alt25)
                {
            	case 1:
            	    // SQL92.g:417:76: whereSection= where_section
            	    {
            	        FOLLOWPUSH(FOLLOW_where_section_in_delete_stmt900);
            	        whereSection=where_section(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruledelete_stmtEx;
            	        }


            	    }
            	    break;

                }
            }

            {

                		// DELETE
                		uSQL::SQLDelete *sqlCmd = new uSQL::SQLDelete();
                		sqlCmd->setAsyncEnabled(isAsync);
                		sqlStmt->addChildNode(sqlCmd);

                		// Collection
                		sqlCmd->addChildNode(collectionNode);
                		
                		// WHERE
                		if (whereSection)		
                			sqlStmt->addChildNode(whereSection);
                	
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruledelete_stmtEx; /* Prevent compiler warnings */
    ruledelete_stmtEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end delete_stmt */

/**
 * $ANTLR start expression
 * SQL92.g:440:1: expression[uSQL::SQLExpression *parentSqlExpr] : (sqlExpr= expression_literal |sqlFunc= function_name '(' ( function_value[sqlFunc] )? ')' |exprLeft= expression_literal binOper= binary_operator exprRight= expression_literal );
 */
static void
expression(pSQL92Parser ctx, uSQL::SQLExpression *parentSqlExpr)
{
    uSQL::SQLExpression * sqlExpr;
    #undef	RETURN_TYPE_sqlExpr
    #define	RETURN_TYPE_sqlExpr uSQL::SQLExpression *

    uSQL::SQLFunction * sqlFunc;
    #undef	RETURN_TYPE_sqlFunc
    #define	RETURN_TYPE_sqlFunc uSQL::SQLFunction *

    uSQL::SQLExpression * exprLeft;
    #undef	RETURN_TYPE_exprLeft
    #define	RETURN_TYPE_exprLeft uSQL::SQLExpression *

    uSQL::SQLOperator * binOper;
    #undef	RETURN_TYPE_binOper
    #define	RETURN_TYPE_binOper uSQL::SQLOperator *

    uSQL::SQLExpression * exprRight;
    #undef	RETURN_TYPE_exprRight
    #define	RETURN_TYPE_exprRight uSQL::SQLExpression *

    /* Initialize rule variables
     */


    	
    {
        {
            //  SQL92.g:443:3: (sqlExpr= expression_literal |sqlFunc= function_name '(' ( function_value[sqlFunc] )? ')' |exprLeft= expression_literal binOper= binary_operator exprRight= expression_literal )

            ANTLR3_UINT32 alt27;

            alt27=3;

            switch ( LA(1) )
            {
            case ID:
            	{
            		switch ( LA(2) )
            		{
            		case EOF:
            		case AS:
            		case COMMA:
            		case CURRENT_DATE:
            		case CURRENT_TIME:
            		case CURRENT_TIMESTAMP:
            		case FLOAT:
            		case FROM:
            		case GROUP:
            		case HAVING:
            		case ID:
            		case LIMIT:
            		case NIL:
            		case NUMBER:
            		case ORDER:
            		case SEMICOLON:
            		case STRING:
            		case WHERE:
            		case 94:
            			{
            				alt27=1;
            			}
            		    break;
            		case 93:
            			{
            				alt27=2;
            			}
            		    break;
            		case AND:
            		case EQ:
            		case GE:
            		case GT:
            		case LE:
            		case NOTEQ:
            		case OP_LT:
            		case OR:
            			{
            				alt27=3;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 27;
            		    EXCEPTION->state        = 1;


            		    goto ruleexpressionEx;

            		}

            	}
                break;
            case NUMBER:
            	{
            		switch ( LA(2) )
            		{
            		case EOF:
            		case AS:
            		case COMMA:
            		case CURRENT_DATE:
            		case CURRENT_TIME:
            		case CURRENT_TIMESTAMP:
            		case FLOAT:
            		case FROM:
            		case GROUP:
            		case HAVING:
            		case ID:
            		case LIMIT:
            		case NIL:
            		case NUMBER:
            		case ORDER:
            		case SEMICOLON:
            		case STRING:
            		case WHERE:
            		case 94:
            			{
            				alt27=1;
            			}
            		    break;
            		case AND:
            		case EQ:
            		case GE:
            		case GT:
            		case LE:
            		case NOTEQ:
            		case OP_LT:
            		case OR:
            			{
            				alt27=3;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 27;
            		    EXCEPTION->state        = 2;


            		    goto ruleexpressionEx;

            		}

            	}
                break;
            case FLOAT:
            	{
            		switch ( LA(2) )
            		{
            		case EOF:
            		case AS:
            		case COMMA:
            		case CURRENT_DATE:
            		case CURRENT_TIME:
            		case CURRENT_TIMESTAMP:
            		case FLOAT:
            		case FROM:
            		case GROUP:
            		case HAVING:
            		case ID:
            		case LIMIT:
            		case NIL:
            		case NUMBER:
            		case ORDER:
            		case SEMICOLON:
            		case STRING:
            		case WHERE:
            		case 94:
            			{
            				alt27=1;
            			}
            		    break;
            		case AND:
            		case EQ:
            		case GE:
            		case GT:
            		case LE:
            		case NOTEQ:
            		case OP_LT:
            		case OR:
            			{
            				alt27=3;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 27;
            		    EXCEPTION->state        = 3;


            		    goto ruleexpressionEx;

            		}

            	}
                break;
            case STRING:
            	{
            		switch ( LA(2) )
            		{
            		case EOF:
            		case AS:
            		case COMMA:
            		case CURRENT_DATE:
            		case CURRENT_TIME:
            		case CURRENT_TIMESTAMP:
            		case FLOAT:
            		case FROM:
            		case GROUP:
            		case HAVING:
            		case ID:
            		case LIMIT:
            		case NIL:
            		case NUMBER:
            		case ORDER:
            		case SEMICOLON:
            		case STRING:
            		case WHERE:
            		case 94:
            			{
            				alt27=1;
            			}
            		    break;
            		case AND:
            		case EQ:
            		case GE:
            		case GT:
            		case LE:
            		case NOTEQ:
            		case OP_LT:
            		case OR:
            			{
            				alt27=3;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 27;
            		    EXCEPTION->state        = 4;


            		    goto ruleexpressionEx;

            		}

            	}
                break;
            case NIL:
            	{
            		switch ( LA(2) )
            		{
            		case EOF:
            		case AS:
            		case COMMA:
            		case CURRENT_DATE:
            		case CURRENT_TIME:
            		case CURRENT_TIMESTAMP:
            		case FLOAT:
            		case FROM:
            		case GROUP:
            		case HAVING:
            		case ID:
            		case LIMIT:
            		case NIL:
            		case NUMBER:
            		case ORDER:
            		case SEMICOLON:
            		case STRING:
            		case WHERE:
            		case 94:
            			{
            				alt27=1;
            			}
            		    break;
            		case AND:
            		case EQ:
            		case GE:
            		case GT:
            		case LE:
            		case NOTEQ:
            		case OP_LT:
            		case OR:
            			{
            				alt27=3;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 27;
            		    EXCEPTION->state        = 5;


            		    goto ruleexpressionEx;

            		}

            	}
                break;
            case CURRENT_TIME:
            	{
            		switch ( LA(2) )
            		{
            		case EOF:
            		case AS:
            		case COMMA:
            		case CURRENT_DATE:
            		case CURRENT_TIME:
            		case CURRENT_TIMESTAMP:
            		case FLOAT:
            		case FROM:
            		case GROUP:
            		case HAVING:
            		case ID:
            		case LIMIT:
            		case NIL:
            		case NUMBER:
            		case ORDER:
            		case SEMICOLON:
            		case STRING:
            		case WHERE:
            		case 94:
            			{
            				alt27=1;
            			}
            		    break;
            		case AND:
            		case EQ:
            		case GE:
            		case GT:
            		case LE:
            		case NOTEQ:
            		case OP_LT:
            		case OR:
            			{
            				alt27=3;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 27;
            		    EXCEPTION->state        = 6;


            		    goto ruleexpressionEx;

            		}

            	}
                break;
            case CURRENT_DATE:
            	{
            		switch ( LA(2) )
            		{
            		case EOF:
            		case AS:
            		case COMMA:
            		case CURRENT_DATE:
            		case CURRENT_TIME:
            		case CURRENT_TIMESTAMP:
            		case FLOAT:
            		case FROM:
            		case GROUP:
            		case HAVING:
            		case ID:
            		case LIMIT:
            		case NIL:
            		case NUMBER:
            		case ORDER:
            		case SEMICOLON:
            		case STRING:
            		case WHERE:
            		case 94:
            			{
            				alt27=1;
            			}
            		    break;
            		case AND:
            		case EQ:
            		case GE:
            		case GT:
            		case LE:
            		case NOTEQ:
            		case OP_LT:
            		case OR:
            			{
            				alt27=3;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 27;
            		    EXCEPTION->state        = 7;


            		    goto ruleexpressionEx;

            		}

            	}
                break;
            case CURRENT_TIMESTAMP:
            	{
            		switch ( LA(2) )
            		{
            		case EOF:
            		case AS:
            		case COMMA:
            		case CURRENT_DATE:
            		case CURRENT_TIME:
            		case CURRENT_TIMESTAMP:
            		case FLOAT:
            		case FROM:
            		case GROUP:
            		case HAVING:
            		case ID:
            		case LIMIT:
            		case NIL:
            		case NUMBER:
            		case ORDER:
            		case SEMICOLON:
            		case STRING:
            		case WHERE:
            		case 94:
            			{
            				alt27=1;
            			}
            		    break;
            		case AND:
            		case EQ:
            		case GE:
            		case GT:
            		case LE:
            		case NOTEQ:
            		case OP_LT:
            		case OR:
            			{
            				alt27=3;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 27;
            		    EXCEPTION->state        = 8;


            		    goto ruleexpressionEx;

            		}

            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 27;
                EXCEPTION->state        = 0;


                goto ruleexpressionEx;

            }

            switch (alt27)
            {
        	case 1:
        	    // SQL92.g:443:5: sqlExpr= expression_literal
        	    {
        	        FOLLOWPUSH(FOLLOW_expression_literal_in_expression931);
        	        sqlExpr=expression_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }


        	        {

        	            		parentSqlExpr->addExpression(sqlExpr);
        	            	  
        	        }


        	    }
        	    break;
        	case 2:
        	    // SQL92.g:446:4: sqlFunc= function_name '(' ( function_value[sqlFunc] )? ')'
        	    {
        	        FOLLOWPUSH(FOLLOW_function_name_in_expression940);
        	        sqlFunc=function_name(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }


        	         MATCHT(93, &FOLLOW_93_in_expression942);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }


        	        // SQL92.g:446:30: ( function_value[sqlFunc] )?
        	        {
        	            int alt26=2;
        	            switch ( LA(1) )
        	            {
        	                case ASTERISK:
        	                case CURRENT_DATE:
        	                case CURRENT_TIME:
        	                case CURRENT_TIMESTAMP:
        	                case FLOAT:
        	                case ID:
        	                case NIL:
        	                case NUMBER:
        	                case STRING:
        	                	{
        	                		alt26=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt26)
        	            {
        	        	case 1:
        	        	    // SQL92.g:446:31: function_value[sqlFunc]
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_function_value_in_expression945);
        	        	        function_value(ctx, sqlFunc);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexpressionEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         MATCHT(94, &FOLLOW_94_in_expression950);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }


        	        {

        	            		parentSqlExpr->addExpression(sqlFunc);
        	            	  
        	        }


        	    }
        	    break;
        	case 3:
        	    // SQL92.g:449:4: exprLeft= expression_literal binOper= binary_operator exprRight= expression_literal
        	    {
        	        FOLLOWPUSH(FOLLOW_expression_literal_in_expression959);
        	        exprLeft=expression_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_binary_operator_in_expression963);
        	        binOper=binary_operator(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }


        	        FOLLOWPUSH(FOLLOW_expression_literal_in_expression967);
        	        exprRight=expression_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionEx;
        	        }


        	        {

        	            		parentSqlExpr->addExpression(binOper);
        	            		binOper->addExpression(exprLeft);
        	            		binOper->addExpression(exprRight);
        	            	  
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end expression */

/**
 * $ANTLR start expression_literal
 * SQL92.g:456:1: expression_literal returns [uSQL::SQLExpression *sqlExpr] : expression_literal_value[sqlExpr] ;
 */
static uSQL::SQLExpression *
expression_literal(pSQL92Parser ctx)
{
    uSQL::SQLExpression * sqlExpr;


    /* Initialize rule variables
     */


    		sqlExpr = new uSQL::SQLExpression();
    	
    {
        // SQL92.g:460:3: ( expression_literal_value[sqlExpr] )
        // SQL92.g:460:5: expression_literal_value[sqlExpr]
        {
            FOLLOWPUSH(FOLLOW_expression_literal_value_in_expression_literal991);
            expression_literal_value(ctx, sqlExpr);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpression_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleexpression_literalEx; /* Prevent compiler warnings */
    ruleexpression_literalEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlExpr;
}
/* $ANTLR end expression_literal */

/**
 * $ANTLR start expression_literal_value
 * SQL92.g:463:1: expression_literal_value[uSQL::SQLExpression *sqlExpr] : ( property_literal | integer_literal | real_literal | string_literal | NIL | CURRENT_TIME | CURRENT_DATE | CURRENT_TIMESTAMP );
 */
static void
expression_literal_value(pSQL92Parser ctx, uSQL::SQLExpression *sqlExpr)
{
    SQL92Parser_property_literal_return property_literal5;
    #undef	RETURN_TYPE_property_literal5
    #define	RETURN_TYPE_property_literal5 SQL92Parser_property_literal_return

    SQL92Parser_integer_literal_return integer_literal6;
    #undef	RETURN_TYPE_integer_literal6
    #define	RETURN_TYPE_integer_literal6 SQL92Parser_integer_literal_return

    SQL92Parser_real_literal_return real_literal7;
    #undef	RETURN_TYPE_real_literal7
    #define	RETURN_TYPE_real_literal7 SQL92Parser_real_literal_return

    SQL92Parser_string_literal_return string_literal8;
    #undef	RETURN_TYPE_string_literal8
    #define	RETURN_TYPE_string_literal8 SQL92Parser_string_literal_return

    /* Initialize rule variables
     */

    {
        {
            //  SQL92.g:464:3: ( property_literal | integer_literal | real_literal | string_literal | NIL | CURRENT_TIME | CURRENT_DATE | CURRENT_TIMESTAMP )

            ANTLR3_UINT32 alt28;

            alt28=8;

            switch ( LA(1) )
            {
            case ID:
            	{
            		alt28=1;
            	}
                break;
            case NUMBER:
            	{
            		alt28=2;
            	}
                break;
            case FLOAT:
            	{
            		alt28=3;
            	}
                break;
            case STRING:
            	{
            		alt28=4;
            	}
                break;
            case NIL:
            	{
            		alt28=5;
            	}
                break;
            case CURRENT_TIME:
            	{
            		alt28=6;
            	}
                break;
            case CURRENT_DATE:
            	{
            		alt28=7;
            	}
                break;
            case CURRENT_TIMESTAMP:
            	{
            		alt28=8;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 28;
                EXCEPTION->state        = 0;


                goto ruleexpression_literal_valueEx;

            }

            switch (alt28)
            {
        	case 1:
        	    // SQL92.g:464:5: property_literal
        	    {
        	        FOLLOWPUSH(FOLLOW_property_literal_in_expression_literal_value1007);
        	        property_literal5=property_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpression_literal_valueEx;
        	        }


        	        {

        	            		sqlExpr->setLiteralType(uSQL::SQLExpression::PROPERTY);
        	            		sqlExpr->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, property_literal5.start, property_literal5.stop))
        	            ));
        	            	  
        	        }


        	    }
        	    break;
        	case 2:
        	    // SQL92.g:468:4: integer_literal
        	    {
        	        FOLLOWPUSH(FOLLOW_integer_literal_in_expression_literal_value1014);
        	        integer_literal6=integer_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpression_literal_valueEx;
        	        }


        	        {

        	            		sqlExpr->setLiteralType(uSQL::SQLExpression::INTEGER);
        	            		sqlExpr->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, integer_literal6.start, integer_literal6.stop))
        	            ));
        	            	  
        	        }


        	    }
        	    break;
        	case 3:
        	    // SQL92.g:472:4: real_literal
        	    {
        	        FOLLOWPUSH(FOLLOW_real_literal_in_expression_literal_value1021);
        	        real_literal7=real_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpression_literal_valueEx;
        	        }


        	        {

        	            		sqlExpr->setLiteralType(uSQL::SQLExpression::REAL);
        	            		sqlExpr->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, real_literal7.start, real_literal7.stop))
        	            ));
        	            	  
        	        }


        	    }
        	    break;
        	case 4:
        	    // SQL92.g:476:4: string_literal
        	    {
        	        FOLLOWPUSH(FOLLOW_string_literal_in_expression_literal_value1028);
        	        string_literal8=string_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpression_literal_valueEx;
        	        }


        	        {

        	            		sqlExpr->setLiteralType(1/*uSQL::SQLExpression::STRING*/);
        	            		sqlExpr->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, string_literal8.start, string_literal8.stop))
        	            ));
        	            	  
        	        }


        	    }
        	    break;
        	case 5:
        	    // SQL92.g:480:4: NIL
        	    {
        	         MATCHT(NIL, &FOLLOW_NIL_in_expression_literal_value1035);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpression_literal_valueEx;
        	        }


        	        {

        	            		sqlExpr->setLiteralType(10/*uSQL::SQLExpression::NIL*/);
        	            	  
        	        }


        	    }
        	    break;
        	case 6:
        	    // SQL92.g:483:4: CURRENT_TIME
        	    {
        	         MATCHT(CURRENT_TIME, &FOLLOW_CURRENT_TIME_in_expression_literal_value1042);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpression_literal_valueEx;
        	        }


        	        {

        	            		sqlExpr->setLiteralType(11/*uSQL::SQLExpression::CURRENT_TIME*/);
        	            	  
        	        }


        	    }
        	    break;
        	case 7:
        	    // SQL92.g:486:4: CURRENT_DATE
        	    {
        	         MATCHT(CURRENT_DATE, &FOLLOW_CURRENT_DATE_in_expression_literal_value1049);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpression_literal_valueEx;
        	        }


        	        {

        	            		sqlExpr->setLiteralType(12/*uSQL::SQLExpression::CURRENT_DATE*/);
        	            	  
        	        }


        	    }
        	    break;
        	case 8:
        	    // SQL92.g:489:4: CURRENT_TIMESTAMP
        	    {
        	         MATCHT(CURRENT_TIMESTAMP, &FOLLOW_CURRENT_TIMESTAMP_in_expression_literal_value1056);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpression_literal_valueEx;
        	        }


        	        {

        	            		sqlExpr->setLiteralType(13/*uSQL::SQLExpression::CURRENT_TIMESTAMP*/);
        	            	  
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleexpression_literal_valueEx; /* Prevent compiler warnings */
    ruleexpression_literal_valueEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end expression_literal_value */

/**
 * $ANTLR start function_name
 * SQL92.g:494:1: function_name returns [uSQL::SQLFunction *sqlFunc] : ID ;
 */
static uSQL::SQLFunction *
function_name(pSQL92Parser ctx)
{
    uSQL::SQLFunction * sqlFunc;


    pANTLR3_COMMON_TOKEN    ID9;

    /* Initialize rule variables
     */


    		sqlFunc = new uSQL::SQLFunction();
    		sqlFunc->setLiteralType(uSQL::SQLExpression::FUNCTION);
    	
    ID9       = NULL;

    {
        // SQL92.g:499:2: ( ID )
        // SQL92.g:499:4: ID
        {
            ID9 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_function_name1079);
            if  (HASEXCEPTION())
            {
                goto rulefunction_nameEx;
            }


            {

                		sqlFunc->setValue(CG_ANTLR3_STRING_2_UTF8((ID9->getText(ID9))));
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulefunction_nameEx; /* Prevent compiler warnings */
    rulefunction_nameEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlFunc;
}
/* $ANTLR end function_name */

/**
 * $ANTLR start function_value
 * SQL92.g:504:1: function_value[uSQL::SQLFunction *sqlFunc] : ( expression[sqlFunc] ( COMMA expression[sqlFunc] )* | ASTERISK );
 */
static void
function_value(pSQL92Parser ctx, uSQL::SQLFunction *sqlFunc)
{
    /* Initialize rule variables
     */

    {
        {
            //  SQL92.g:505:2: ( expression[sqlFunc] ( COMMA expression[sqlFunc] )* | ASTERISK )

            ANTLR3_UINT32 alt30;

            alt30=2;

            switch ( LA(1) )
            {
            case CURRENT_DATE:
            case CURRENT_TIME:
            case CURRENT_TIMESTAMP:
            case FLOAT:
            case ID:
            case NIL:
            case NUMBER:
            case STRING:
            	{
            		alt30=1;
            	}
                break;
            case ASTERISK:
            	{
            		alt30=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 30;
                EXCEPTION->state        = 0;


                goto rulefunction_valueEx;

            }

            switch (alt30)
            {
        	case 1:
        	    // SQL92.g:505:4: expression[sqlFunc] ( COMMA expression[sqlFunc] )*
        	    {
        	        FOLLOWPUSH(FOLLOW_expression_in_function_value1095);
        	        expression(ctx, sqlFunc);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunction_valueEx;
        	        }


        	        // SQL92.g:505:24: ( COMMA expression[sqlFunc] )*

        	        for (;;)
        	        {
        	            int alt29=2;
        	            switch ( LA(1) )
        	            {
        	            case COMMA:
        	            	{
        	            		alt29=1;
        	            	}
        	                break;

        	            }

        	            switch (alt29)
        	            {
        	        	case 1:
        	        	    // SQL92.g:505:25: COMMA expression[sqlFunc]
        	        	    {
        	        	         MATCHT(COMMA, &FOLLOW_COMMA_in_function_value1099);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefunction_valueEx;
        	        	        }


        	        	        FOLLOWPUSH(FOLLOW_expression_in_function_value1101);
        	        	        expression(ctx, sqlFunc);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulefunction_valueEx;
        	        	        }


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop29;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop29: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;
        	case 2:
        	    // SQL92.g:506:4: ASTERISK
        	    {
        	         MATCHT(ASTERISK, &FOLLOW_ASTERISK_in_function_value1109);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefunction_valueEx;
        	        }


        	        {

        	            		uSQL::SQLExpression *sqlExpr = new uSQL::SQLExpression();
        	            		sqlExpr->setLiteralType(1/*uSQL::SQLExpression::STRING*/);
        	            		sqlExpr->setValue("*");
        	            		sqlExpr->addExpression(sqlFunc);
        	            	
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulefunction_valueEx; /* Prevent compiler warnings */
    rulefunction_valueEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end function_value */

/**
 * $ANTLR start binary_operator
 * SQL92.g:514:1: binary_operator returns [uSQL::SQLOperator *sqlOper] : ( EQ | OP_LT | LE | GT | GE | NOTEQ | AND | OR );
 */
static uSQL::SQLOperator *
binary_operator(pSQL92Parser ctx)
{
    uSQL::SQLOperator * sqlOper;


    /* Initialize rule variables
     */


    		sqlOper = new uSQL::SQLOperator();
    		sqlOper->setLiteralType(uSQL::SQLExpression::OPERATOR);
    	
    {
        {
            //  SQL92.g:519:2: ( EQ | OP_LT | LE | GT | GE | NOTEQ | AND | OR )

            ANTLR3_UINT32 alt31;

            alt31=8;

            switch ( LA(1) )
            {
            case EQ:
            	{
            		alt31=1;
            	}
                break;
            case OP_LT:
            	{
            		alt31=2;
            	}
                break;
            case LE:
            	{
            		alt31=3;
            	}
                break;
            case GT:
            	{
            		alt31=4;
            	}
                break;
            case GE:
            	{
            		alt31=5;
            	}
                break;
            case NOTEQ:
            	{
            		alt31=6;
            	}
                break;
            case AND:
            	{
            		alt31=7;
            	}
                break;
            case OR:
            	{
            		alt31=8;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 31;
                EXCEPTION->state        = 0;


                goto rulebinary_operatorEx;

            }

            switch (alt31)
            {
        	case 1:
        	    // SQL92.g:519:4: EQ
        	    {
        	         MATCHT(EQ, &FOLLOW_EQ_in_binary_operator1133);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinary_operatorEx;
        	        }


        	        {

        	            		sqlOper->setValue(1/*uSQL::SQLOperator::EQ*/);
        	            	  
        	        }


        	    }
        	    break;
        	case 2:
        	    // SQL92.g:522:4: OP_LT
        	    {
        	         MATCHT(OP_LT, &FOLLOW_OP_LT_in_binary_operator1140);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinary_operatorEx;
        	        }


        	        {

        	            		sqlOper->setValue(2/*uSQL::SQLOperator::LT*/);
        	            	  
        	        }


        	    }
        	    break;
        	case 3:
        	    // SQL92.g:525:4: LE
        	    {
        	         MATCHT(LE, &FOLLOW_LE_in_binary_operator1147);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinary_operatorEx;
        	        }


        	        {

        	            		sqlOper->setValue(3/*uSQL::SQLOperator::GT*/);
        	            	  
        	        }


        	    }
        	    break;
        	case 4:
        	    // SQL92.g:528:4: GT
        	    {
        	         MATCHT(GT, &FOLLOW_GT_in_binary_operator1154);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinary_operatorEx;
        	        }


        	        {

        	            		sqlOper->setValue(4/*uSQL::SQLOperator::LE*/);
        	            	  
        	        }


        	    }
        	    break;
        	case 5:
        	    // SQL92.g:531:4: GE
        	    {
        	         MATCHT(GE, &FOLLOW_GE_in_binary_operator1161);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinary_operatorEx;
        	        }


        	        {

        	            		sqlOper->setValue(5/*uSQL::SQLOperator::GE*/);
        	            	  
        	        }


        	    }
        	    break;
        	case 6:
        	    // SQL92.g:534:4: NOTEQ
        	    {
        	         MATCHT(NOTEQ, &FOLLOW_NOTEQ_in_binary_operator1168);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinary_operatorEx;
        	        }


        	        {

        	            		sqlOper->setValue(6/*uSQL::SQLOperator::NOTEQ*/);
        	            	  
        	        }


        	    }
        	    break;
        	case 7:
        	    // SQL92.g:537:4: AND
        	    {
        	         MATCHT(AND, &FOLLOW_AND_in_binary_operator1175);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinary_operatorEx;
        	        }


        	        {

        	            		sqlOper->setValue(7/*uSQL::SQLOperator::AND*/);
        	            	  
        	        }


        	    }
        	    break;
        	case 8:
        	    // SQL92.g:540:4: OR
        	    {
        	         MATCHT(OR, &FOLLOW_OR_in_binary_operator1182);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebinary_operatorEx;
        	        }


        	        {

        	            		sqlOper->setValue(8/*uSQL::SQLOperator::OR*/);
        	            	  
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulebinary_operatorEx; /* Prevent compiler warnings */
    rulebinary_operatorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlOper;
}
/* $ANTLR end binary_operator */

/**
 * $ANTLR start property_literal
 * SQL92.g:545:1: property_literal : ID ;
 */
static SQL92Parser_property_literal_return
property_literal(pSQL92Parser ctx)
{
    SQL92Parser_property_literal_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // SQL92.g:546:2: ( ID )
        // SQL92.g:546:4: ID
        {
             MATCHT(ID, &FOLLOW_ID_in_property_literal1195);
            if  (HASEXCEPTION())
            {
                goto ruleproperty_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleproperty_literalEx; /* Prevent compiler warnings */
    ruleproperty_literalEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end property_literal */

/**
 * $ANTLR start integer_literal
 * SQL92.g:549:1: integer_literal : NUMBER ;
 */
static SQL92Parser_integer_literal_return
integer_literal(pSQL92Parser ctx)
{
    SQL92Parser_integer_literal_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // SQL92.g:550:2: ( NUMBER )
        // SQL92.g:550:4: NUMBER
        {
             MATCHT(NUMBER, &FOLLOW_NUMBER_in_integer_literal1207);
            if  (HASEXCEPTION())
            {
                goto ruleinteger_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleinteger_literalEx; /* Prevent compiler warnings */
    ruleinteger_literalEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end integer_literal */

/**
 * $ANTLR start real_literal
 * SQL92.g:553:1: real_literal : FLOAT ;
 */
static SQL92Parser_real_literal_return
real_literal(pSQL92Parser ctx)
{
    SQL92Parser_real_literal_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // SQL92.g:554:2: ( FLOAT )
        // SQL92.g:554:4: FLOAT
        {
             MATCHT(FLOAT, &FOLLOW_FLOAT_in_real_literal1218);
            if  (HASEXCEPTION())
            {
                goto rulereal_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulereal_literalEx; /* Prevent compiler warnings */
    rulereal_literalEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end real_literal */

/**
 * $ANTLR start string_literal
 * SQL92.g:557:1: string_literal : STRING ;
 */
static SQL92Parser_string_literal_return
string_literal(pSQL92Parser ctx)
{
    SQL92Parser_string_literal_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // SQL92.g:558:2: ( STRING )
        // SQL92.g:558:4: STRING
        {
             MATCHT(STRING, &FOLLOW_STRING_in_string_literal1229);
            if  (HASEXCEPTION())
            {
                goto rulestring_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulestring_literalEx; /* Prevent compiler warnings */
    rulestring_literalEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end string_literal */

/**
 * $ANTLR start true_literal
 * SQL92.g:561:1: true_literal : T R U E ;
 */
static void
true_literal(pSQL92Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // SQL92.g:562:2: ( T R U E )
        // SQL92.g:562:4: T R U E
        {
             MATCHT(T, &FOLLOW_T_in_true_literal1240);
            if  (HASEXCEPTION())
            {
                goto ruletrue_literalEx;
            }


             MATCHT(R, &FOLLOW_R_in_true_literal1242);
            if  (HASEXCEPTION())
            {
                goto ruletrue_literalEx;
            }


             MATCHT(U, &FOLLOW_U_in_true_literal1244);
            if  (HASEXCEPTION())
            {
                goto ruletrue_literalEx;
            }


             MATCHT(E, &FOLLOW_E_in_true_literal1246);
            if  (HASEXCEPTION())
            {
                goto ruletrue_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruletrue_literalEx; /* Prevent compiler warnings */
    ruletrue_literalEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end true_literal */

/**
 * $ANTLR start false_literal
 * SQL92.g:565:1: false_literal : F A L S E ;
 */
static void
false_literal(pSQL92Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // SQL92.g:566:2: ( F A L S E )
        // SQL92.g:566:4: F A L S E
        {
             MATCHT(F, &FOLLOW_F_in_false_literal1258);
            if  (HASEXCEPTION())
            {
                goto rulefalse_literalEx;
            }


             MATCHT(A, &FOLLOW_A_in_false_literal1260);
            if  (HASEXCEPTION())
            {
                goto rulefalse_literalEx;
            }


             MATCHT(L, &FOLLOW_L_in_false_literal1262);
            if  (HASEXCEPTION())
            {
                goto rulefalse_literalEx;
            }


             MATCHT(S, &FOLLOW_S_in_false_literal1264);
            if  (HASEXCEPTION())
            {
                goto rulefalse_literalEx;
            }


             MATCHT(E, &FOLLOW_E_in_false_literal1266);
            if  (HASEXCEPTION())
            {
                goto rulefalse_literalEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulefalse_literalEx; /* Prevent compiler warnings */
    rulefalse_literalEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end false_literal */

/**
 * $ANTLR start sync_operator
 * SQL92.g:575:1: sync_operator returns [bool isAync] : ( SYNC | ASYNC );
 */
static bool
sync_operator(pSQL92Parser ctx)
{
    bool isAync;


    /* Initialize rule variables
     */

    {
        {
            //  SQL92.g:576:2: ( SYNC | ASYNC )

            ANTLR3_UINT32 alt32;

            alt32=2;

            switch ( LA(1) )
            {
            case SYNC:
            	{
            		alt32=1;
            	}
                break;
            case ASYNC:
            	{
            		alt32=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 32;
                EXCEPTION->state        = 0;


                goto rulesync_operatorEx;

            }

            switch (alt32)
            {
        	case 1:
        	    // SQL92.g:576:4: SYNC
        	    {
        	         MATCHT(SYNC, &FOLLOW_SYNC_in_sync_operator1284);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesync_operatorEx;
        	        }


        	        {

        	            		isAync = false;
        	            	  
        	        }


        	    }
        	    break;
        	case 2:
        	    // SQL92.g:579:4: ASYNC
        	    {
        	         MATCHT(ASYNC, &FOLLOW_ASYNC_in_sync_operator1291);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulesync_operatorEx;
        	        }


        	        {

        	            		isAync = true;
        	            	  
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulesync_operatorEx; /* Prevent compiler warnings */
    rulesync_operatorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return isAync;
}
/* $ANTLR end sync_operator */

/**
 * $ANTLR start compound_operator
 * SQL92.g:584:1: compound_operator : ( UNION ( ALL )? | INTERSECT | EXCEPT );
 */
static void
compound_operator(pSQL92Parser ctx)
{
    /* Initialize rule variables
     */

    {
        {
            //  SQL92.g:585:2: ( UNION ( ALL )? | INTERSECT | EXCEPT )

            ANTLR3_UINT32 alt34;

            alt34=3;

            switch ( LA(1) )
            {
            case UNION:
            	{
            		alt34=1;
            	}
                break;
            case INTERSECT:
            	{
            		alt34=2;
            	}
                break;
            case EXCEPT:
            	{
            		alt34=3;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 34;
                EXCEPTION->state        = 0;


                goto rulecompound_operatorEx;

            }

            switch (alt34)
            {
        	case 1:
        	    // SQL92.g:585:4: UNION ( ALL )?
        	    {
        	         MATCHT(UNION, &FOLLOW_UNION_in_compound_operator1304);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecompound_operatorEx;
        	        }


        	        // SQL92.g:585:10: ( ALL )?
        	        {
        	            int alt33=2;
        	            switch ( LA(1) )
        	            {
        	                case ALL:
        	                	{
        	                		alt33=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt33)
        	            {
        	        	case 1:
        	        	    // SQL92.g:585:11: ALL
        	        	    {
        	        	         MATCHT(ALL, &FOLLOW_ALL_in_compound_operator1307);
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecompound_operatorEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // SQL92.g:586:4: INTERSECT
        	    {
        	         MATCHT(INTERSECT, &FOLLOW_INTERSECT_in_compound_operator1314);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecompound_operatorEx;
        	        }


        	    }
        	    break;
        	case 3:
        	    // SQL92.g:587:4: EXCEPT
        	    {
        	         MATCHT(EXCEPT, &FOLLOW_EXCEPT_in_compound_operator1319);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecompound_operatorEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulecompound_operatorEx; /* Prevent compiler warnings */
    rulecompound_operatorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end compound_operator */

/**
 * $ANTLR start condition_operator
 * SQL92.g:590:1: condition_operator : ( EQ | OP_LT | LE | GT | GE | NOTEQ );
 */
static void
condition_operator(pSQL92Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // SQL92.g:591:2: ( EQ | OP_LT | LE | GT | GE | NOTEQ )
        // SQL92.g:
        {
            if ( LA(1) == EQ || LA(1) == GE || LA(1) == GT || LA(1) == LE || LA(1) == NOTEQ || LA(1) == OP_LT )
            {
                CONSUME();
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = NULL;

                goto rulecondition_operatorEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulecondition_operatorEx; /* Prevent compiler warnings */
    rulecondition_operatorEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end condition_operator */

/**
 * $ANTLR start property
 * SQL92.g:599:1: property : ID ;
 */
static SQL92Parser_property_return
property(pSQL92Parser ctx)
{
    SQL92Parser_property_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        // SQL92.g:600:2: ( ID )
        // SQL92.g:600:4: ID
        {
             MATCHT(ID, &FOLLOW_ID_in_property1366);
            if  (HASEXCEPTION())
            {
                goto rulepropertyEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulepropertyEx; /* Prevent compiler warnings */
    rulepropertyEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end property */

/**
 * $ANTLR start value
 * SQL92.g:603:1: value : ID ;
 */
static void
value(pSQL92Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // SQL92.g:604:2: ( ID )
        // SQL92.g:604:4: ID
        {
             MATCHT(ID, &FOLLOW_ID_in_value1381);
            if  (HASEXCEPTION())
            {
                goto rulevalueEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulevalueEx; /* Prevent compiler warnings */
    rulevalueEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end value */

/**
 * $ANTLR start name
 * SQL92.g:607:1: name : ID ;
 */
static void
name(pSQL92Parser ctx)
{
    /* Initialize rule variables
     */

    {
        // SQL92.g:608:2: ( ID )
        // SQL92.g:608:4: ID
        {
             MATCHT(ID, &FOLLOW_ID_in_name1393);
            if  (HASEXCEPTION())
            {
                goto rulenameEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulenameEx; /* Prevent compiler warnings */
    rulenameEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return ;
}
/* $ANTLR end name */

/**
 * $ANTLR start collection_section
 * SQL92.g:611:1: collection_section returns [uSQL::SQLCollection *sqlCollection] : collection_name ;
 */
static uSQL::SQLCollection *
collection_section(pSQL92Parser ctx)
{
    uSQL::SQLCollection * sqlCollection;


    SQL92Parser_collection_name_return collection_name10;
    #undef	RETURN_TYPE_collection_name10
    #define	RETURN_TYPE_collection_name10 SQL92Parser_collection_name_return

    /* Initialize rule variables
     */


    		sqlCollection = new uSQL::SQLCollection();
    	
    {
        // SQL92.g:615:2: ( collection_name )
        // SQL92.g:615:4: collection_name
        {
            FOLLOWPUSH(FOLLOW_collection_name_in_collection_section1414);
            collection_name10=collection_name(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecollection_sectionEx;
            }


            {

                		sqlCollection->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, collection_name10.start, collection_name10.stop))
                ));
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulecollection_sectionEx; /* Prevent compiler warnings */
    rulecollection_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlCollection;
}
/* $ANTLR end collection_section */

/**
 * $ANTLR start collection_name
 * SQL92.g:620:1: collection_name : ( ID | string_literal );
 */
static SQL92Parser_collection_name_return
collection_name(pSQL92Parser ctx)
{
    SQL92Parser_collection_name_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        {
            //  SQL92.g:621:2: ( ID | string_literal )

            ANTLR3_UINT32 alt35;

            alt35=2;

            switch ( LA(1) )
            {
            case ID:
            	{
            		alt35=1;
            	}
                break;
            case STRING:
            	{
            		alt35=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 35;
                EXCEPTION->state        = 0;


                goto rulecollection_nameEx;

            }

            switch (alt35)
            {
        	case 1:
        	    // SQL92.g:621:4: ID
        	    {
        	         MATCHT(ID, &FOLLOW_ID_in_collection_name1427);
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecollection_nameEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // SQL92.g:622:4: string_literal
        	    {
        	        FOLLOWPUSH(FOLLOW_string_literal_in_collection_name1432);
        	        string_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecollection_nameEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto rulecollection_nameEx; /* Prevent compiler warnings */
    rulecollection_nameEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end collection_name */

/**
 * $ANTLR start index_section
 * SQL92.g:625:1: index_section returns [uSQL::SQLIndex *sqlIndex] : index_name ;
 */
static uSQL::SQLIndex *
index_section(pSQL92Parser ctx)
{
    uSQL::SQLIndex * sqlIndex;


    SQL92Parser_index_name_return index_name11;
    #undef	RETURN_TYPE_index_name11
    #define	RETURN_TYPE_index_name11 SQL92Parser_index_name_return

    /* Initialize rule variables
     */


    		sqlIndex = new uSQL::SQLIndex();
    	
    {
        // SQL92.g:629:2: ( index_name )
        // SQL92.g:629:4: index_name
        {
            FOLLOWPUSH(FOLLOW_index_name_in_index_section1454);
            index_name11=index_name(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleindex_sectionEx;
            }


            {

                		sqlIndex->setValue(CG_ANTLR3_STRING_2_UTF8((STRSTREAM->toStringTT(STRSTREAM, index_name11.start, index_name11.stop))
                ));
                	  
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto ruleindex_sectionEx; /* Prevent compiler warnings */
    ruleindex_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlIndex;
}
/* $ANTLR end index_section */

/**
 * $ANTLR start index_name
 * SQL92.g:634:1: index_name : ( ID | string_literal );
 */
static SQL92Parser_index_name_return
index_name(pSQL92Parser ctx)
{
    SQL92Parser_index_name_return retval;


    /* Initialize rule variables
     */

    retval.start = LT(1); retval.stop = retval.start;


    {
        {
            //  SQL92.g:635:2: ( ID | string_literal )

            ANTLR3_UINT32 alt36;

            alt36=2;

            switch ( LA(1) )
            {
            case ID:
            	{
            		alt36=1;
            	}
                break;
            case STRING:
            	{
            		alt36=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 36;
                EXCEPTION->state        = 0;


                goto ruleindex_nameEx;

            }

            switch (alt36)
            {
        	case 1:
        	    // SQL92.g:635:4: ID
        	    {
        	         MATCHT(ID, &FOLLOW_ID_in_index_name1467);
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleindex_nameEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // SQL92.g:636:4: string_literal
        	    {
        	        FOLLOWPUSH(FOLLOW_string_literal_in_index_name1472);
        	        string_literal(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleindex_nameEx;
        	        }


        	    }
        	    break;

            }
        }
    }

    // This is where rules clean up and exit
    //
    goto ruleindex_nameEx; /* Prevent compiler warnings */
    ruleindex_nameEx: ;
    retval.stop = LT(-1);


            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return retval;
}
/* $ANTLR end index_name */

/**
 * $ANTLR start where_section
 * SQL92.g:639:1: where_section returns [uSQL::SQLWhere *sqlWhere] : WHERE expression[sqlWhere] ;
 */
static uSQL::SQLWhere *
where_section(pSQL92Parser ctx)
{
    uSQL::SQLWhere * sqlWhere;


    /* Initialize rule variables
     */


    		sqlWhere = new uSQL::SQLWhere();
    	
    {
        // SQL92.g:643:2: ( WHERE expression[sqlWhere] )
        // SQL92.g:643:4: WHERE expression[sqlWhere]
        {
             MATCHT(WHERE, &FOLLOW_WHERE_in_where_section1493);
            if  (HASEXCEPTION())
            {
                goto rulewhere_sectionEx;
            }


            FOLLOWPUSH(FOLLOW_expression_in_where_section1495);
            expression(ctx, sqlWhere);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewhere_sectionEx;
            }


        }

    }

    // This is where rules clean up and exit
    //
    goto rulewhere_sectionEx; /* Prevent compiler warnings */
    rulewhere_sectionEx: ;

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
            }
    return sqlWhere;
}
/* $ANTLR end where_section */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */






/* End of code
 * =============================================================================
 */
