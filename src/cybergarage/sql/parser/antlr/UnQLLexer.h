/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : UnQL.g
 *     -                            On : 2011-11-07 16:50:28
 *     -                 for the lexer : UnQLLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
UnQLLexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pUnQLLexer, which is returned from a call to UnQLLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pUnQLLexer are  as follows:
 *
 *  - 
 void
      pUnQLLexer->T__80(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->T__81(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->T__82(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->T__83(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->T__84(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->T__85(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->T__86(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->ASTERISK(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->EQ(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->OP_LT(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->LE(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->GT(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->GE(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->NOTEQ(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->COMMA(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->A(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->B(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->C(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->D(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->E(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->F(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->G(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->H(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->I(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->J(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->K(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->L(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->M(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->N(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->O(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->P(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->Q(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->R(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->S(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->T(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->U(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->V(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->W(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->X(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->Y(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->Z(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->ALL(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->ANCESTOR(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->AND(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->AS(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->ASC(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->ASYNC(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->BY(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->CREATE(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->COLLECTION(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->DESC(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->DISTINCT(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->DROP(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->EXCEPT(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->FROM(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->GROUP(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->HAVING(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->IN(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->INSERT(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->INTERSECT(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->INTO(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->IS(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->LIMIT(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->OFFSET(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->OPTIONS(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->ORDER(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->SELECT(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->SYNC(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->UNION(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->WHERE(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->VALUE(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->WS(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->ID(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->NUMBER(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->FLOAT(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->STRING(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->EscapeSequence(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->CHAR(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->EXPONENT(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->HEX_DIGIT(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->ESC_SEQ(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->OCTAL_ESC(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->UNICODE_ESC(pUnQLLexer)
 *  - 
 void
      pUnQLLexer->Tokens(pUnQLLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_UnQLLexer_H
#define _UnQLLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

	#include <cybergarage/sql/SQLParser.h>


#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct UnQLLexer_Ctx_struct UnQLLexer, * pUnQLLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
UnQLLexer

 */
struct UnQLLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mT__80)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mT__81)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mT__82)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mT__83)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mT__84)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mT__85)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mT__86)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mASTERISK)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mEQ)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mOP_LT)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mLE)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mGT)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mGE)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mNOTEQ)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mCOMMA)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mA)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mB)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mC)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mD)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mE)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mF)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mG)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mH)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mI)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mJ)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mK)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mL)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mM)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mN)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mO)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mP)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mQ)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mR)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mS)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mT)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mU)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mV)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mW)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mX)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mY)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mZ)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mALL)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mANCESTOR)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mAND)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mAS)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mASC)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mASYNC)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mBY)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mCREATE)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mCOLLECTION)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mDESC)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mDISTINCT)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mDROP)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mEXCEPT)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mFROM)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mGROUP)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mHAVING)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mIN)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mINSERT)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mINTERSECT)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mINTO)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mIS)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mLIMIT)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mOFFSET)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mOPTIONS)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mORDER)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mSELECT)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mSYNC)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mUNION)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mWHERE)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mVALUE)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mWS)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mID)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mNUMBER)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mFLOAT)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mSTRING)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mEscapeSequence)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mCHAR)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mEXPONENT)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mHEX_DIGIT)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mESC_SEQ)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mOCTAL_ESC)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mUNICODE_ESC)	(struct UnQLLexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct UnQLLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct UnQLLexer_Ctx_struct * ctx);
    void	    (*free)   (struct UnQLLexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pUnQLLexer UnQLLexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pUnQLLexer UnQLLexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__80      80
#define T__81      81
#define T__82      82
#define T__83      83
#define T__84      84
#define T__85      85
#define T__86      86
#define A      4
#define ALL      5
#define ANCESTOR      6
#define AND      7
#define AS      8
#define ASC      9
#define ASTERISK      10
#define ASYNC      11
#define B      12
#define BY      13
#define C      14
#define CHAR      15
#define COLLECTION      16
#define COMMA      17
#define CREATE      18
#define D      19
#define DESC      20
#define DISTINCT      21
#define DROP      22
#define E      23
#define EQ      24
#define ESC_SEQ      25
#define EXCEPT      26
#define EXPONENT      27
#define EscapeSequence      28
#define F      29
#define FLOAT      30
#define FROM      31
#define G      32
#define GE      33
#define GROUP      34
#define GT      35
#define H      36
#define HAVING      37
#define HEX_DIGIT      38
#define I      39
#define ID      40
#define IN      41
#define INSERT      42
#define INTERSECT      43
#define INTO      44
#define IS      45
#define J      46
#define K      47
#define L      48
#define LE      49
#define LIMIT      50
#define M      51
#define N      52
#define NOTEQ      53
#define NUMBER      54
#define O      55
#define OCTAL_ESC      56
#define OFFSET      57
#define OPTIONS      58
#define OP_LT      59
#define ORDER      60
#define P      61
#define Q      62
#define R      63
#define S      64
#define SELECT      65
#define STRING      66
#define SYNC      67
#define T      68
#define U      69
#define UNICODE_ESC      70
#define UNION      71
#define V      72
#define VALUE      73
#define W      74
#define WHERE      75
#define WS      76
#define X      77
#define Y      78
#define Z      79
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for UnQLLexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
