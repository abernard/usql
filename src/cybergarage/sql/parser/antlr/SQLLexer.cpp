/** \file
 *  This C source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : SQL.g
 *     -                            On : 2012-01-25 23:13:11
 *     -                 for the lexer : SQLLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "SQLLexer.h"
/* ----------------------------------------- */


/** String literals used by SQLLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR3_UCHAR	lit_1[]  = { 0x3D, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_2[]  = { 0x3C, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_3[]  = { 0x3E, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_4[]  = { 0x21, 0x3D,  ANTLR3_STRING_TERMINATOR};





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */

#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pSQLLexer_##scope##_SCOPE
#define SCOPE_STACK(scope)  pSQLLexer_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pSQLLexer_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pSQLLexer_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))


/* Macros for accessing things in a lexer
 */
#undef	    LEXER
#undef	    RECOGNIZER
#undef	    RULEMEMO
#undef	    GETCHARINDEX
#undef	    GETLINE
#undef	    GETCHARPOSITIONINLINE
#undef	    EMIT
#undef	    EMITNEW
#undef	    MATCHC
#undef	    MATCHS
#undef	    MATCHRANGE
#undef	    LTOKEN
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    INPUT
#undef	    STRSTREAM
#undef	    LA
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    LRECOVER
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    BACKTRACKING
#undef		MATCHANY
#undef		MEMOIZE
#undef		HAVEPARSEDRULE
#undef		GETTEXT
#undef		INDEX
#undef		SEEK
#undef		PUSHSTREAM
#undef		POPSTREAM
#undef		SETTEXT
#undef		SETTEXT8

#define	    LEXER					ctx->pLexer
#define	    RECOGNIZER			    LEXER->rec
#define		LEXSTATE				RECOGNIZER->state
#define		TOKSOURCE				LEXSTATE->tokSource
#define	    GETCHARINDEX()			LEXER->getCharIndex(LEXER)
#define	    GETLINE()				LEXER->getLine(LEXER)
#define	    GETTEXT()				LEXER->getText(LEXER)
#define	    GETCHARPOSITIONINLINE() LEXER->getCharPositionInLine(LEXER)
#define	    EMIT()					LEXSTATE->type = _type; LEXER->emit(LEXER)
#define	    EMITNEW(t)				LEXER->emitNew(LEXER, t)
#define	    MATCHC(c)				LEXER->matchc(LEXER, c)
#define	    MATCHS(s)				LEXER->matchs(LEXER, s)
#define	    MATCHRANGE(c1,c2)	    LEXER->matchRange(LEXER, c1, c2)
#define	    MATCHANY()				LEXER->matchAny(LEXER)
#define	    LTOKEN  				LEXSTATE->token
#define	    HASFAILED()				(LEXSTATE->failed == ANTLR3_TRUE)
#define	    BACKTRACKING			LEXSTATE->backtracking
#define	    FAILEDFLAG				LEXSTATE->failed
#define	    INPUT					LEXER->input
#define	    STRSTREAM				INPUT
#define		ISTREAM					INPUT->istream
#define		INDEX()					ISTREAM->index(ISTREAM)
#define		SEEK(n)					ISTREAM->seek(ISTREAM, n)
#define	    EOF_TOKEN				&(LEXSTATE->tokSource->eofToken)
#define	    HASEXCEPTION()			(LEXSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				LEXSTATE->exception
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    LRECOVER()				LEXER->recover(LEXER)
#define	    MARK()					ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define		MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define		HAVEPARSEDRULE(r)		RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		PUSHSTREAM(str)			LEXER->pushCharStream(LEXER, str)
#define		POPSTREAM()				LEXER->popCharStream(LEXER)
#define		SETTEXT(str)			LEXSTATE->text = str
#define		SKIP()					LEXSTATE->token = &(TOKSOURCE->skipToken)
#define		USER1					LEXSTATE->user1
#define		USER2					LEXSTATE->user2
#define		USER3					LEXSTATE->user3
#define		CUSTOM					LEXSTATE->custom
#define		RULEMEMO				LEXSTATE->ruleMemo
#define		DBG						RECOGNIZER->debugger

/* If we have been told we can rely on the standard 8 bit or UTF16 input
 * stream, then we can define our macros to use the direct pointers
 * in the input object, which is much faster than indirect calls. This
 * is really only significant to lexers with a lot of fragment rules (which
 * do not place LA(1) in a temporary at the moment) and even then
 * only if there is a lot of input (order of say 1M or so).
 */
#if	defined(ANTLR3_INLINE_INPUT_8BIT) || defined(ANTLR3_INLINE_INPUT_UTF16)

# ifdef	ANTLR3_INLINE_INPUT_8BIT

/* 8 bit character set */

#  define	    NEXTCHAR	((pANTLR3_UINT8)(INPUT->nextChar))
#  define	    DATAP	((pANTLR3_UINT8)(INPUT->data))

# else

#  define	    NEXTCHAR	((pANTLR3_UINT16)(INPUT->nextChar))
#  define	    DATAP	((pANTLR3_UINT16)(INPUT->data))

# endif

# define	    LA(n) ((NEXTCHAR + n) > (DATAP + INPUT->sizeBuf) ? ANTLR3_CHARSTREAM_EOF : (ANTLR3_UCHAR)(*(NEXTCHAR + n - 1)))
# define            CONSUME()                                           \
{                                                                       \
    if        (NEXTCHAR < (DATAP + INPUT->sizeBuf))                     \
    {                                                                   \
        INPUT->charPositionInLine++;                                    \
        if  ((ANTLR3_UCHAR)(*NEXTCHAR) == INPUT->newlineChar)           \
        {                                                               \
            INPUT->line++;                                              \
            INPUT->charPositionInLine        = 0;                       \
            INPUT->currentLine                = (void *)(NEXTCHAR + 1); \
        }                                                               \
        INPUT->nextChar = (void *)(NEXTCHAR + 1);                       \
    }                                                                   \
}

#else

// Pick up the input character by calling the input stream implementation.
//
#define	    CONSUME()   INPUT->istream->consume(INPUT->istream)
#define	    LA(n)       INPUT->istream->_LA(INPUT->istream, n)

#endif

#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

/* Forward declare the locally static matching functions we have generated and any predicate functions.
 */
static ANTLR3_INLINE 
 void
	mT__94    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mT__95    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mT__96    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mT__97    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mT__98    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mT__99    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mT__100    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mASTERISK    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mSINGLE_EQ    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mDOUBLE_EQ    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mOP_LT    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mLE    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mGT    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mGE    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mNOTEQ    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mAND    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mOR    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mCOMMA    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mSEMICOLON    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mA    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mB    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mC    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mD    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mE    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mF    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mG    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mH    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mI    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mJ    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mK    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mL    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mM    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mN    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mO    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mP    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mQ    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mR    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mS    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mT    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mU    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mV    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mW    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mX    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mY    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mZ    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mALL    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mANCESTOR    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mAS    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mASC    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mASYNC    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mBY    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mCREATE    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mCOLLECTION    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mCURRENT_DATE    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mCURRENT_TIME    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mCURRENT_TIMESTAMP    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mDESC    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mDELETE    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mDISTINCT    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mDROP    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mEACH    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mEXCEPT    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mFLATTEN    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mFROM    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mGROUP    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mHAVING    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mIN    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mCOLLECTION_INDEX    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mINSERT    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mINTERSECT    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mINTO    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mIS    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mLIMIT    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mNIL    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mOFFSET    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mOPTIONS    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mORDER    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mSELECT    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mSET    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mSYNC    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mUNION    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mUPDATE    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mWHERE    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mVALUE    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mVALUES    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mWS    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mID    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mNUMBER    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mFLOAT    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mSTRING    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mEscapeSequence    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mCHAR    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mEXPONENT    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mHEX_DIGIT    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mESC_SEQ    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mOCTAL_ESC    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mUNICODE_ESC    (pSQLLexer ctx);
static ANTLR3_INLINE 
 void
	mTokens    (pSQLLexer ctx);
static void	SQLLexerFree(pSQLLexer ctx);

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */



static void
SQLLexerFree  (pSQLLexer ctx)
{
    LEXER->free(LEXER);

    ANTLR3_FREE(ctx);
}

static void
SQLLexerReset (pSQLLexer ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "SQL.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called SQLLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return
 *     - Success pSQLLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pSQLLexer SQLLexerNew
(
pANTLR3_INPUT_STREAM
 instream)
{
	// See if we can create a new lexer with the standard constructor
	//
	return SQLLexerNewSSD(instream, NULL);
}

/** \brief Create a new lexer called SQLLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return
 *     - Success pSQLLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pSQLLexer SQLLexerNewSSD
(pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pSQLLexer ctx; // Context structure we will build and return

    ctx = (pSQLLexer) ANTLR3_CALLOC(1, sizeof(SQLLexer));

    if  (ctx == NULL)
    {
        // Failed to allocate memory for lexer context
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in SQLLexer.h here so you can get a sense
     * of what goes where.
     */

    /* Create a base lexer, using the supplied input stream
     */
    ctx->pLexer	= antlr3LexerNewStream(ANTLR3_SIZE_HINT, instream, state);

    /* Check that we allocated the memory correctly
     */
    if	(ctx->pLexer == NULL)
    {
		ANTLR3_FREE(ctx);
		return  NULL;
    }
    /* Install the implementation of our SQLLexer interface
     */
    ctx->mT__94	= mT__94;
    ctx->mT__95	= mT__95;
    ctx->mT__96	= mT__96;
    ctx->mT__97	= mT__97;
    ctx->mT__98	= mT__98;
    ctx->mT__99	= mT__99;
    ctx->mT__100	= mT__100;
    ctx->mASTERISK	= mASTERISK;
    ctx->mSINGLE_EQ	= mSINGLE_EQ;
    ctx->mDOUBLE_EQ	= mDOUBLE_EQ;
    ctx->mOP_LT	= mOP_LT;
    ctx->mLE	= mLE;
    ctx->mGT	= mGT;
    ctx->mGE	= mGE;
    ctx->mNOTEQ	= mNOTEQ;
    ctx->mAND	= mAND;
    ctx->mOR	= mOR;
    ctx->mCOMMA	= mCOMMA;
    ctx->mSEMICOLON	= mSEMICOLON;
    ctx->mA	= mA;
    ctx->mB	= mB;
    ctx->mC	= mC;
    ctx->mD	= mD;
    ctx->mE	= mE;
    ctx->mF	= mF;
    ctx->mG	= mG;
    ctx->mH	= mH;
    ctx->mI	= mI;
    ctx->mJ	= mJ;
    ctx->mK	= mK;
    ctx->mL	= mL;
    ctx->mM	= mM;
    ctx->mN	= mN;
    ctx->mO	= mO;
    ctx->mP	= mP;
    ctx->mQ	= mQ;
    ctx->mR	= mR;
    ctx->mS	= mS;
    ctx->mT	= mT;
    ctx->mU	= mU;
    ctx->mV	= mV;
    ctx->mW	= mW;
    ctx->mX	= mX;
    ctx->mY	= mY;
    ctx->mZ	= mZ;
    ctx->mALL	= mALL;
    ctx->mANCESTOR	= mANCESTOR;
    ctx->mAS	= mAS;
    ctx->mASC	= mASC;
    ctx->mASYNC	= mASYNC;
    ctx->mBY	= mBY;
    ctx->mCREATE	= mCREATE;
    ctx->mCOLLECTION	= mCOLLECTION;
    ctx->mCURRENT_DATE	= mCURRENT_DATE;
    ctx->mCURRENT_TIME	= mCURRENT_TIME;
    ctx->mCURRENT_TIMESTAMP	= mCURRENT_TIMESTAMP;
    ctx->mDESC	= mDESC;
    ctx->mDELETE	= mDELETE;
    ctx->mDISTINCT	= mDISTINCT;
    ctx->mDROP	= mDROP;
    ctx->mEACH	= mEACH;
    ctx->mEXCEPT	= mEXCEPT;
    ctx->mFLATTEN	= mFLATTEN;
    ctx->mFROM	= mFROM;
    ctx->mGROUP	= mGROUP;
    ctx->mHAVING	= mHAVING;
    ctx->mIN	= mIN;
    ctx->mCOLLECTION_INDEX	= mCOLLECTION_INDEX;
    ctx->mINSERT	= mINSERT;
    ctx->mINTERSECT	= mINTERSECT;
    ctx->mINTO	= mINTO;
    ctx->mIS	= mIS;
    ctx->mLIMIT	= mLIMIT;
    ctx->mNIL	= mNIL;
    ctx->mOFFSET	= mOFFSET;
    ctx->mOPTIONS	= mOPTIONS;
    ctx->mORDER	= mORDER;
    ctx->mSELECT	= mSELECT;
    ctx->mSET	= mSET;
    ctx->mSYNC	= mSYNC;
    ctx->mUNION	= mUNION;
    ctx->mUPDATE	= mUPDATE;
    ctx->mWHERE	= mWHERE;
    ctx->mVALUE	= mVALUE;
    ctx->mVALUES	= mVALUES;
    ctx->mWS	= mWS;
    ctx->mID	= mID;
    ctx->mNUMBER	= mNUMBER;
    ctx->mFLOAT	= mFLOAT;
    ctx->mSTRING	= mSTRING;
    ctx->mEscapeSequence	= mEscapeSequence;
    ctx->mCHAR	= mCHAR;
    ctx->mEXPONENT	= mEXPONENT;
    ctx->mHEX_DIGIT	= mHEX_DIGIT;
    ctx->mESC_SEQ	= mESC_SEQ;
    ctx->mOCTAL_ESC	= mOCTAL_ESC;
    ctx->mUNICODE_ESC	= mUNICODE_ESC;
    ctx->mTokens	= mTokens;

    /** When the nextToken() call is made to this lexer's pANTLR3_TOKEN_SOURCE
     *  it will call mTokens() in this generated code, and will pass it the ctx
     * pointer of this lexer, not the context of the base lexer, so store that now.
     */
    ctx->pLexer->ctx	    = ctx;

    /**Install the token matching function
     */
    ctx->pLexer->mTokens = (void (*) (void *))(mTokens);

    ctx->getGrammarFileName	= getGrammarFileName;
    ctx->free		= SQLLexerFree;
    ctx->reset          = SQLLexerReset;


    /* Return the newly built lexer to the caller
     */
    return  ctx;
}

/* =========================================================================
 * DFA tables for the lexer
 */
/** Static dfa state tables for Cyclic dfa:
 *    1107:1: FLOAT : ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT );
 */
static const ANTLR3_INT32 dfa11_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa11_eof[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa11_min[5] =
    {
	46, 46, -1, -1, -1
    };
static const ANTLR3_INT32 dfa11_max[5] =
    {
	57, 101, -1, -1, -1
    };
static const ANTLR3_INT32 dfa11_accept[5] =
    {
	-1, -1, 2, 1, 3
    };
static const ANTLR3_INT32 dfa11_special[5] =
    {
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa11_T_empty	    NULL

static const ANTLR3_INT32 dfa11_T0[] =
    {
	3, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4
    };

static const ANTLR3_INT32 dfa11_T1[] =
    {
	2, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa11_transitions[] =
{
    dfa11_T1, dfa11_T0, NULL, NULL, NULL
};


/* Declare tracking structure for Cyclic DFA 11
 */
static
ANTLR3_CYCLIC_DFA cdfa11
    =	{
	    11,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"1107:1: FLOAT : ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT );",
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/

	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa11_eot,	    /* EOT table			    */
	    dfa11_eof,	    /* EOF table			    */
	    dfa11_min,	    /* Minimum tokens for each state    */
	    dfa11_max,	    /* Maximum tokens for each state    */
	    dfa11_accept,	/* Accept table			    */
	    dfa11_special,	/* Special transition states	    */
	    dfa11_transitions	/* Table of transition tables	    */

	};
/* End of Cyclic DFA 11
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    1:1: Tokens : ( T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | ASTERISK | SINGLE_EQ | DOUBLE_EQ | OP_LT | LE | GT | GE | NOTEQ | AND | OR | COMMA | SEMICOLON | ALL | ANCESTOR | AS | ASC | ASYNC | BY | CREATE | COLLECTION | CURRENT_DATE | CURRENT_TIME | CURRENT_TIMESTAMP | DESC | DELETE | DISTINCT | DROP | EACH | EXCEPT | FLATTEN | FROM | GROUP | HAVING | IN | COLLECTION_INDEX | INSERT | INTERSECT | INTO | IS | LIMIT | NIL | OFFSET | OPTIONS | ORDER | SELECT | SET | SYNC | UNION | UPDATE | WHERE | VALUE | VALUES | WS | ID | NUMBER | FLOAT | STRING | CHAR );
 */
static const ANTLR3_INT32 dfa18_eot[245] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 42, 44, -1, 34, -1, 34, -1, -1, 
	-1, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, -1, -1, 74, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 34, 34, 78, 16, 34, 34, 84, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 98, 102, 34, 34, 34, 34, 34, 34, 
	34, 34, -1, 14, 34, 113, -1, 114, 34, 34, 34, 34, -1, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, -1, 34, 34, 34, -1, 34, 34, 34, 139, 34, 
	34, 34, 34, 34, 34, -1, -1, 34, 34, 34, 34, 34, 34, 34, 153, 34, 34, 156, 
	157, 34, 34, 160, 34, 34, 34, 34, 34, 166, 34, 168, 34, -1, 170, 34, 34, 
	34, 34, 34, 176, 177, 34, 34, 34, 34, 34, -1, 34, 34, -1, -1, 34, 34, -1, 
	187, 34, 189, 34, 34, -1, 192, -1, 34, -1, 194, 34, 196, 197, 34, -1, -1, 
	200, 34, 202, 34, 34, 205, 34, 207, 34, -1, 209, -1, 210, 34, -1, 212, 
	-1, 213, -1, -1, 214, 34, -1, 216, -1, 34, 34, -1, 34, -1, 220, -1, -1, 
	34, -1, -1, -1, 222, -1, 34, 34, 226, -1, 34, -1, 34, 34, 34, -1, 231, 
	232, 34, 34, -1, -1, 34, 34, 237, 238, -1, -1, 34, 34, 34, 34, 244, -1
    };
static const ANTLR3_INT32 dfa18_eof[245] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa18_min[245] =
    {
	9, -1, -1, -1, -1, -1, -1, -1, -1, 61, 61, 61, -1, 76, -1, 70, -1, -1, 
	-1, 89, 79, 69, 65, 76, 82, 65, 78, 73, 85, 69, 78, 72, 65, -1, -1, 46, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 67, 76, 45, 45, 70, 84, 45, 69, 76, 
	82, 76, 83, 79, 67, 67, 65, 79, 79, 86, 45, 45, 77, 76, 76, 78, 73, 68, 
	69, 76, -1, 45, 69, 45, -1, 45, 78, 69, 83, 73, -1, 65, 76, 82, 67, 69, 
	84, 80, 72, 69, 84, 77, 85, 73, -1, 69, 69, 69, -1, 73, 76, 69, 45, 67, 
	79, 65, 82, 85, 83, -1, -1, 67, 82, 69, 79, 84, 69, 69, 45, 84, 73, 45, 
	45, 80, 84, 45, 80, 78, 88, 82, 82, 45, 84, 45, 67, -1, 45, 78, 84, 69, 
	69, 84, 45, 45, 84, 78, 69, 67, 78, -1, 69, 78, -1, -1, 84, 69, -1, 45, 
	71, 45, 84, 83, -1, 45, -1, 84, -1, 45, 69, 45, 45, 79, -1, -1, 45, 83, 
	45, 84, 84, 45, 67, 45, 78, -1, 45, -1, 45, 69, -1, 45, -1, 45, -1, -1, 
	45, 82, -1, 45, -1, 73, 95, -1, 84, -1, 45, -1, -1, 67, -1, -1, -1, 45, 
	-1, 79, 68, 45, -1, 84, -1, 78, 65, 73, -1, 45, 45, 84, 77, -1, -1, 69, 
	69, 45, 45, -1, -1, 84, 65, 77, 80, 45, -1
    };
static const ANTLR3_INT32 dfa18_max[245] =
    {
	125, -1, -1, -1, -1, -1, -1, -1, -1, 61, 61, 61, -1, 115, -1, 114, -1, 
	-1, -1, 121, 117, 114, 120, 114, 114, 97, 115, 105, 117, 121, 112, 104, 
	97, -1, -1, 101, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 108, 122, 122, 
	102, 116, 122, 101, 108, 114, 115, 115, 111, 99, 99, 97, 111, 111, 118, 
	122, 122, 109, 108, 116, 110, 105, 100, 101, 108, -1, 122, 101, 122, -1, 
	122, 110, 101, 115, 105, -1, 97, 108, 114, 99, 101, 116, 112, 104, 101, 
	116, 109, 117, 105, -1, 101, 101, 111, -1, 105, 108, 101, 122, 99, 111, 
	97, 114, 117, 115, -1, -1, 99, 114, 101, 111, 116, 101, 101, 122, 116, 
	105, 122, 122, 112, 116, 122, 112, 110, 120, 114, 114, 122, 116, 122, 99, 
	-1, 122, 110, 116, 101, 101, 116, 122, 122, 116, 110, 101, 99, 110, -1, 
	101, 110, -1, -1, 116, 101, -1, 122, 103, 122, 116, 115, -1, 122, -1, 116, 
	-1, 122, 101, 122, 122, 111, -1, -1, 122, 115, 122, 116, 116, 122, 99, 
	122, 110, -1, 122, -1, 122, 101, -1, 122, -1, 122, -1, -1, 122, 114, -1, 
	122, -1, 105, 95, -1, 116, -1, 122, -1, -1, 99, -1, -1, -1, 122, -1, 111, 
	116, 122, -1, 116, -1, 110, 97, 105, -1, 122, 122, 116, 109, -1, -1, 101, 
	101, 122, 122, -1, -1, 116, 97, 109, 112, 122, -1
    };
static const ANTLR3_INT32 dfa18_accept[245] =
    {
	-1, 1, 2, 3, 4, 5, 6, 7, 8, -1, -1, -1, 15, -1, 16, -1, 17, 18, 19, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 61, -1, 63, 64, 
	65, 10, 9, 12, 11, 14, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	62, -1, -1, -1, 22, -1, -1, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 41, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 20, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 31, -1, -1, 34, 35, -1, -1, 38, -1, -1, -1, 
	-1, -1, 45, -1, 48, -1, 54, -1, -1, -1, -1, -1, 24, 51, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 39, -1, 42, -1, -1, 47, -1, 55, -1, 57, 58, -1, -1, 
	49, -1, 26, -1, -1, 32, -1, 36, -1, 40, 43, -1, 52, 56, 59, -1, 50, -1, 
	-1, -1, 37, -1, 21, -1, -1, -1, 33, -1, -1, -1, -1, 44, 27, -1, -1, -1, 
	-1, 28, 29, -1, -1, -1, -1, -1, 30
    };
static const ANTLR3_INT32 dfa18_special[245] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa18_T_empty	    NULL

static const ANTLR3_INT32 dfa18_T0[] =
    {
	122, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 122
    };

static const ANTLR3_INT32 dfa18_T1[] =
    {
	180, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 180
    };

static const ANTLR3_INT32 dfa18_T2[] =
    {
	58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, 58, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 59
    };

static const ANTLR3_INT32 dfa18_T3[] =
    {
	199, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 199
    };

static const ANTLR3_INT32 dfa18_T4[] =
    {
	215, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 215
    };

static const ANTLR3_INT32 dfa18_T5[] =
    {
	206, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 206
    };

static const ANTLR3_INT32 dfa18_T6[] =
    {
	127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127
    };

static const ANTLR3_INT32 dfa18_T7[] =
    {
	150, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 150
    };

static const ANTLR3_INT32 dfa18_T8[] =
    {
	120, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 120
    };

static const ANTLR3_INT32 dfa18_T9[] =
    {
	107, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 107
    };

static const ANTLR3_INT32 dfa18_T10[] =
    {
	174, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 174
    };

static const ANTLR3_INT32 dfa18_T11[] =
    {
	126, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 126
    };

static const ANTLR3_INT32 dfa18_T12[] =
    {
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, -1, -1, -1, -1, -1, 
	-1, -1, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34, -1, -1, -1, -1, 34, -1, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34
    };

static const ANTLR3_INT32 dfa18_T13[] =
    {
	175, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 175
    };

static const ANTLR3_INT32 dfa18_T14[] =
    {
	183, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 183
    };

static const ANTLR3_INT32 dfa18_T15[] =
    {
	86, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 86
    };

static const ANTLR3_INT32 dfa18_T16[] =
    {
	223, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 223
    };

static const ANTLR3_INT32 dfa18_T17[] =
    {
	243, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 243
    };

static const ANTLR3_INT32 dfa18_T18[] =
    {
	94, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 94
    };

static const ANTLR3_INT32 dfa18_T19[] =
    {
	203, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 203
    };

static const ANTLR3_INT32 dfa18_T20[] =
    {
	217, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 217
    };

static const ANTLR3_INT32 dfa18_T21[] =
    {
	171, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 171
    };

static const ANTLR3_INT32 dfa18_T22[] =
    {
	235, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 235
    };

static const ANTLR3_INT32 dfa18_T23[] =
    {
	172, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 172
    };

static const ANTLR3_INT32 dfa18_T24[] =
    {
	224, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 225, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 224, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 225
    };

static const ANTLR3_INT32 dfa18_T25[] =
    {
	115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115
    };

static const ANTLR3_INT32 dfa18_T26[] =
    {
	229, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 229
    };

static const ANTLR3_INT32 dfa18_T27[] =
    {
	66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 66
    };

static const ANTLR3_INT32 dfa18_T28[] =
    {
	143, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 143
    };

static const ANTLR3_INT32 dfa18_T29[] =
    {
	228, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 228
    };

static const ANTLR3_INT32 dfa18_T30[] =
    {
	145, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 145
    };

static const ANTLR3_INT32 dfa18_T31[] =
    {
	233, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 233
    };

static const ANTLR3_INT32 dfa18_T32[] =
    {
	241, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 241
    };

static const ANTLR3_INT32 dfa18_T33[] =
    {
	83, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 83
    };

static const ANTLR3_INT32 dfa18_T34[] =
    {
	242, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 242
    };

static const ANTLR3_INT32 dfa18_T35[] =
    {
	141, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 141
    };

static const ANTLR3_INT32 dfa18_T36[] =
    {
	92, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 92
    };

static const ANTLR3_INT32 dfa18_T37[] =
    {
	195, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 195
    };

static const ANTLR3_INT32 dfa18_T38[] =
    {
	85, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 85
    };

static const ANTLR3_INT32 dfa18_T39[] =
    {
	151, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 151
    };

static const ANTLR3_INT32 dfa18_T40[] =
    {
	173, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 173
    };

static const ANTLR3_INT32 dfa18_T41[] =
    {
	76, 75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 76, 75
    };

static const ANTLR3_INT32 dfa18_T42[] =
    {
	152, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 152
    };

static const ANTLR3_INT32 dfa18_T43[] =
    {
	123, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 123
    };

static const ANTLR3_INT32 dfa18_T44[] =
    {
	186, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 186
    };

static const ANTLR3_INT32 dfa18_T45[] =
    {
	132, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 132
    };

static const ANTLR3_INT32 dfa18_T46[] =
    {
	208, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208
    };

static const ANTLR3_INT32 dfa18_T47[] =
    {
	111, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 111
    };

static const ANTLR3_INT32 dfa18_T48[] =
    {
	49, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, -1, 48, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 50, -1, 48
    };

static const ANTLR3_INT32 dfa18_T49[] =
    {
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, -1, -1, -1, -1, -1, 
	-1, -1, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 239, 34, 34, 34, 34, 34, 34, 34, -1, -1, -1, -1, 34, -1, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 239, 34, 
	34, 34, 34, 34, 34, 34
    };

static const ANTLR3_INT32 dfa18_T50[] =
    {
	119, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 119
    };

static const ANTLR3_INT32 dfa18_T51[] =
    {
	128, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 128
    };

static const ANTLR3_INT32 dfa18_T52[] =
    {
	204, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 204
    };

static const ANTLR3_INT32 dfa18_T53[] =
    {
	91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 91
    };

static const ANTLR3_INT32 dfa18_T54[] =
    {
	121, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 121
    };

static const ANTLR3_INT32 dfa18_T55[] =
    {
	125, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 125
    };

static const ANTLR3_INT32 dfa18_T56[] =
    {
	64, -1, -1, -1, -1, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, -1, -1, -1, 
	-1, 65
    };

static const ANTLR3_INT32 dfa18_T57[] =
    {
	124, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 124
    };

static const ANTLR3_INT32 dfa18_T58[] =
    {
	188, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 188
    };

static const ANTLR3_INT32 dfa18_T59[] =
    {
	236, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 236
    };

static const ANTLR3_INT32 dfa18_T60[] =
    {
	221, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 221
    };

static const ANTLR3_INT32 dfa18_T61[] =
    {
	55, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, 
	56, -1, -1, -1, -1, -1, -1, -1, -1, 57
    };

static const ANTLR3_INT32 dfa18_T62[] =
    {
	77, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77
    };

static const ANTLR3_INT32 dfa18_T63[] =
    {
	129, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 129
    };

static const ANTLR3_INT32 dfa18_T64[] =
    {
	146, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 146
    };

static const ANTLR3_INT32 dfa18_T65[] =
    {
	36, -1, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 36
    };

static const ANTLR3_INT32 dfa18_T66[] =
    {
	181, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 181
    };

static const ANTLR3_INT32 dfa18_T67[] =
    {
	73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 73
    };

static const ANTLR3_INT32 dfa18_T68[] =
    {
	184, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 184
    };

static const ANTLR3_INT32 dfa18_T69[] =
    {
	155, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 155
    };

static const ANTLR3_INT32 dfa18_T70[] =
    {
	154, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 154
    };

static const ANTLR3_INT32 dfa18_T71[] =
    {
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, -1, -1, -1, -1, -1, 
	-1, -1, 34, 34, 79, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 80, 34, -1, -1, -1, -1, 34, -1, 34, 34, 
	79, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 80, 34
    };

static const ANTLR3_INT32 dfa18_T72[] =
    {
	218
    };

static const ANTLR3_INT32 dfa18_T73[] =
    {
	62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62
    };

static const ANTLR3_INT32 dfa18_T74[] =
    {
	105, -1, -1, -1, -1, -1, -1, -1, 106, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 105, -1, -1, -1, 
	-1, -1, -1, -1, 106
    };

static const ANTLR3_INT32 dfa18_T75[] =
    {
	219, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 219
    };

static const ANTLR3_INT32 dfa18_T76[] =
    {
	112, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 112
    };

static const ANTLR3_INT32 dfa18_T77[] =
    {
	158, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 158
    };

static const ANTLR3_INT32 dfa18_T78[] =
    {
	93, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 93
    };

static const ANTLR3_INT32 dfa18_T79[] =
    {
	90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 90
    };

static const ANTLR3_INT32 dfa18_T80[] =
    {
	234, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 234
    };

static const ANTLR3_INT32 dfa18_T81[] =
    {
	87, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 87
    };

static const ANTLR3_INT32 dfa18_T82[] =
    {
	240, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 240
    };

static const ANTLR3_INT32 dfa18_T83[] =
    {
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, -1, -1, -1, -1, -1, 
	-1, -1, 34, 34, 34, 99, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 100, 101, 34, 34, 34, 34, 34, 34, -1, -1, -1, -1, 34, -1, 34, 34, 
	34, 99, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 100, 101, 
	34, 34, 34, 34, 34, 34
    };

static const ANTLR3_INT32 dfa18_T84[] =
    {
	33, 33, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 33, 12, 37, -1, -1, -1, 14, 38, 1, 2, 8, -1, 17, -1, 
	36, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 3, 18, 10, 9, 11, -1, -1, 
	13, 19, 20, 21, 22, 23, 24, 25, 26, 34, 34, 27, 34, 28, 15, 34, 34, 34, 
	29, 34, 30, 32, 31, 34, 34, 34, 4, -1, 5, -1, 34, -1, 13, 19, 20, 21, 22, 
	23, 24, 25, 26, 34, 34, 27, 34, 28, 15, 34, 34, 34, 29, 34, 30, 32, 31, 
	34, 34, 34, 6, 16, 7
    };

static const ANTLR3_INT32 dfa18_T85[] =
    {
	89, -1, -1, -1, -1, -1, -1, 88, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 89, -1, -1, -1, 
	-1, -1, -1, 88
    };

static const ANTLR3_INT32 dfa18_T86[] =
    {
	165, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 165
    };

static const ANTLR3_INT32 dfa18_T87[] =
    {
	161, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 161
    };

static const ANTLR3_INT32 dfa18_T88[] =
    {
	164, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 164
    };

static const ANTLR3_INT32 dfa18_T89[] =
    {
	82, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 82
    };

static const ANTLR3_INT32 dfa18_T90[] =
    {
	130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 130
    };

static const ANTLR3_INT32 dfa18_T91[] =
    {
	51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51
    };

static const ANTLR3_INT32 dfa18_T92[] =
    {
	46, -1, 45, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, 45, -1, 
	-1, -1, -1, 47
    };

static const ANTLR3_INT32 dfa18_T93[] =
    {
	103, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 103
    };

static const ANTLR3_INT32 dfa18_T94[] =
    {
	43
    };

static const ANTLR3_INT32 dfa18_T95[] =
    {
	227, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 227
    };

static const ANTLR3_INT32 dfa18_T96[] =
    {
	116, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 116
    };

static const ANTLR3_INT32 dfa18_T97[] =
    {
	163, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 163
    };

static const ANTLR3_INT32 dfa18_T98[] =
    {
	169, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 169
    };

static const ANTLR3_INT32 dfa18_T99[] =
    {
	230, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 230
    };

static const ANTLR3_INT32 dfa18_T100[] =
    {
	136, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 136
    };

static const ANTLR3_INT32 dfa18_T101[] =
    {
	185, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 185
    };

static const ANTLR3_INT32 dfa18_T102[] =
    {
	95, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 95
    };

static const ANTLR3_INT32 dfa18_T103[] =
    {
	97, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 97
    };

static const ANTLR3_INT32 dfa18_T104[] =
    {
	162, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 162
    };

static const ANTLR3_INT32 dfa18_T105[] =
    {
	211, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 211
    };

static const ANTLR3_INT32 dfa18_T106[] =
    {
	159, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 159
    };

static const ANTLR3_INT32 dfa18_T107[] =
    {
	131, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 131
    };

static const ANTLR3_INT32 dfa18_T108[] =
    {
	133, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 133
    };

static const ANTLR3_INT32 dfa18_T109[] =
    {
	70, -1, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70, -1, 71
    };

static const ANTLR3_INT32 dfa18_T110[] =
    {
	96, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 96
    };

static const ANTLR3_INT32 dfa18_T111[] =
    {
	182, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 182
    };

static const ANTLR3_INT32 dfa18_T112[] =
    {
	134, -1, -1, -1, -1, -1, -1, -1, -1, -1, 135, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 134, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 135
    };

static const ANTLR3_INT32 dfa18_T113[] =
    {
	110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110
    };

static const ANTLR3_INT32 dfa18_T114[] =
    {
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, -1, -1, -1, -1, -1, 
	-1, -1, 34, 34, 34, 81, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34, -1, -1, -1, -1, 34, -1, 34, 34, 
	34, 81, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 34, 34, 34, 34
    };

static const ANTLR3_INT32 dfa18_T115[] =
    {
	53, -1, -1, 52, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, -1, 52, 
	-1, -1, 54
    };

static const ANTLR3_INT32 dfa18_T116[] =
    {
	179, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 179
    };

static const ANTLR3_INT32 dfa18_T117[] =
    {
	147, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 147
    };

static const ANTLR3_INT32 dfa18_T118[] =
    {
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, -1, -1, -1, -1, -1, 
	-1, -1, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 
	34, 34, 198, 34, 34, 34, 34, 34, 34, 34, -1, -1, -1, -1, 34, -1, 34, 34, 
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 198, 34, 
	34, 34, 34, 34, 34, 34
    };

static const ANTLR3_INT32 dfa18_T119[] =
    {
	60, -1, -1, -1, -1, -1, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, -1, -1, -1, 
	-1, -1, 61
    };

static const ANTLR3_INT32 dfa18_T120[] =
    {
	39
    };

static const ANTLR3_INT32 dfa18_T121[] =
    {
	144, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 144
    };

static const ANTLR3_INT32 dfa18_T122[] =
    {
	72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 72
    };

static const ANTLR3_INT32 dfa18_T123[] =
    {
	201, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 201
    };

static const ANTLR3_INT32 dfa18_T124[] =
    {
	108, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108
    };

static const ANTLR3_INT32 dfa18_T125[] =
    {
	193, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 193
    };

static const ANTLR3_INT32 dfa18_T126[] =
    {
	109, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 109
    };

static const ANTLR3_INT32 dfa18_T127[] =
    {
	190, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 190
    };

static const ANTLR3_INT32 dfa18_T128[] =
    {
	138, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 138
    };

static const ANTLR3_INT32 dfa18_T129[] =
    {
	67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67
    };

static const ANTLR3_INT32 dfa18_T130[] =
    {
	142, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 142
    };

static const ANTLR3_INT32 dfa18_T131[] =
    {
	148, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 148
    };

static const ANTLR3_INT32 dfa18_T132[] =
    {
	137, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 137
    };

static const ANTLR3_INT32 dfa18_T133[] =
    {
	68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 69, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 68, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 69
    };

static const ANTLR3_INT32 dfa18_T134[] =
    {
	149, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 149
    };

static const ANTLR3_INT32 dfa18_T135[] =
    {
	104, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 104
    };

static const ANTLR3_INT32 dfa18_T136[] =
    {
	118, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 118
    };

static const ANTLR3_INT32 dfa18_T137[] =
    {
	178, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 178
    };

static const ANTLR3_INT32 dfa18_T138[] =
    {
	117, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 117
    };

static const ANTLR3_INT32 dfa18_T139[] =
    {
	140, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 140
    };

static const ANTLR3_INT32 dfa18_T140[] =
    {
	63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63
    };

static const ANTLR3_INT32 dfa18_T141[] =
    {
	167, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 167
    };

static const ANTLR3_INT32 dfa18_T142[] =
    {
	191, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 191
    };

static const ANTLR3_INT32 dfa18_T143[] =
    {
	41
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa18_transitions[] =
{
    dfa18_T84, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, dfa18_T120, 
    dfa18_T143, dfa18_T94, NULL, dfa18_T92, NULL, dfa18_T48, NULL, NULL, 
    NULL, dfa18_T91, dfa18_T115, dfa18_T61, dfa18_T2, dfa18_T119, dfa18_T73, 
    dfa18_T140, dfa18_T56, dfa18_T27, dfa18_T129, dfa18_T133, dfa18_T109, 
    dfa18_T122, dfa18_T67, NULL, NULL, dfa18_T65, NULL, NULL, NULL, NULL, 
    NULL, NULL, NULL, NULL, NULL, dfa18_T41, dfa18_T62, dfa18_T71, dfa18_T114, 
    dfa18_T89, dfa18_T33, dfa18_T12, dfa18_T38, dfa18_T15, dfa18_T81, dfa18_T85, 
    dfa18_T79, dfa18_T53, dfa18_T36, dfa18_T78, dfa18_T18, dfa18_T102, dfa18_T110, 
    dfa18_T103, dfa18_T83, dfa18_T12, dfa18_T93, dfa18_T135, dfa18_T74, 
    dfa18_T9, dfa18_T124, dfa18_T126, dfa18_T113, dfa18_T47, NULL, dfa18_T12, 
    dfa18_T76, dfa18_T12, NULL, dfa18_T12, dfa18_T25, dfa18_T96, dfa18_T138, 
    dfa18_T136, NULL, dfa18_T50, dfa18_T8, dfa18_T54, dfa18_T0, dfa18_T43, 
    dfa18_T57, dfa18_T55, dfa18_T11, dfa18_T6, dfa18_T51, dfa18_T63, dfa18_T90, 
    dfa18_T107, NULL, dfa18_T45, dfa18_T108, dfa18_T112, NULL, dfa18_T100, 
    dfa18_T132, dfa18_T128, dfa18_T12, dfa18_T139, dfa18_T35, dfa18_T130, 
    dfa18_T28, dfa18_T121, dfa18_T30, NULL, NULL, dfa18_T64, dfa18_T117, 
    dfa18_T131, dfa18_T134, dfa18_T7, dfa18_T39, dfa18_T42, dfa18_T12, dfa18_T70, 
    dfa18_T69, dfa18_T12, dfa18_T12, dfa18_T77, dfa18_T106, dfa18_T12, dfa18_T87, 
    dfa18_T104, dfa18_T97, dfa18_T88, dfa18_T86, dfa18_T12, dfa18_T141, 
    dfa18_T12, dfa18_T98, NULL, dfa18_T12, dfa18_T21, dfa18_T23, dfa18_T40, 
    dfa18_T10, dfa18_T13, dfa18_T12, dfa18_T12, dfa18_T137, dfa18_T116, 
    dfa18_T1, dfa18_T66, dfa18_T111, NULL, dfa18_T14, dfa18_T68, NULL, NULL, 
    dfa18_T101, dfa18_T44, NULL, dfa18_T12, dfa18_T58, dfa18_T12, dfa18_T127, 
    dfa18_T142, NULL, dfa18_T12, NULL, dfa18_T125, NULL, dfa18_T12, dfa18_T37, 
    dfa18_T12, dfa18_T118, dfa18_T3, NULL, NULL, dfa18_T12, dfa18_T123, 
    dfa18_T12, dfa18_T19, dfa18_T52, dfa18_T12, dfa18_T5, dfa18_T12, dfa18_T46, 
    NULL, dfa18_T12, NULL, dfa18_T12, dfa18_T105, NULL, dfa18_T12, NULL, 
    dfa18_T12, NULL, NULL, dfa18_T12, dfa18_T4, NULL, dfa18_T12, NULL, dfa18_T20, 
    dfa18_T72, NULL, dfa18_T75, NULL, dfa18_T12, NULL, NULL, dfa18_T60, 
    NULL, NULL, NULL, dfa18_T12, NULL, dfa18_T16, dfa18_T24, dfa18_T12, 
    NULL, dfa18_T95, NULL, dfa18_T29, dfa18_T26, dfa18_T99, NULL, dfa18_T12, 
    dfa18_T12, dfa18_T31, dfa18_T80, NULL, NULL, dfa18_T22, dfa18_T59, dfa18_T12, 
    dfa18_T49, NULL, NULL, dfa18_T82, dfa18_T32, dfa18_T34, dfa18_T17, dfa18_T12, 
    NULL
};


/* Declare tracking structure for Cyclic DFA 18
 */
static
ANTLR3_CYCLIC_DFA cdfa18
    =	{
	    18,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"1:1: Tokens : ( T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | ASTERISK | SINGLE_EQ | DOUBLE_EQ | OP_LT | LE | GT | GE | NOTEQ | AND | OR | COMMA | SEMICOLON | ALL | ANCESTOR | AS | ASC | ASYNC | BY | CREATE | COLLECTION | CURRENT_DATE | CURRENT_TIME | CURRENT_TIMESTAMP | DESC | DELETE | DISTINCT | DROP | EACH | EXCEPT | FLATTEN | FROM | GROUP | HAVING | IN | COLLECTION_INDEX | INSERT | INTERSECT | INTO | IS | LIMIT | NIL | OFFSET | OPTIONS | ORDER | SELECT | SET | SYNC | UNION | UPDATE | WHERE | VALUE | VALUES | WS | ID | NUMBER | FLOAT | STRING | CHAR );",
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/

	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa18_eot,	    /* EOT table			    */
	    dfa18_eof,	    /* EOF table			    */
	    dfa18_min,	    /* Minimum tokens for each state    */
	    dfa18_max,	    /* Maximum tokens for each state    */
	    dfa18_accept,	/* Accept table			    */
	    dfa18_special,	/* Special transition states	    */
	    dfa18_transitions	/* Table of transition tables	    */

	};
/* End of Cyclic DFA 18
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the lexer
 */

/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 10:7: ( '(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__94
 *
 * Looks to match the characters the constitute the token T__94
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__94(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__94;


    // SQL.g:10:7: ( '(' )
    // SQL.g:10:9: '('
    {
        MATCHC('(');
        if  (HASEXCEPTION())
        {
            goto ruleT__94Ex;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__94Ex; /* Prevent compiler warnings */
    ruleT__94Ex: ;

}
// $ANTLR end T__94

//   Comes from: 11:7: ( ')' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__95
 *
 * Looks to match the characters the constitute the token T__95
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__95(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__95;


    // SQL.g:11:7: ( ')' )
    // SQL.g:11:9: ')'
    {
        MATCHC(')');
        if  (HASEXCEPTION())
        {
            goto ruleT__95Ex;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__95Ex; /* Prevent compiler warnings */
    ruleT__95Ex: ;

}
// $ANTLR end T__95

//   Comes from: 12:7: ( ':' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__96
 *
 * Looks to match the characters the constitute the token T__96
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__96(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__96;


    // SQL.g:12:7: ( ':' )
    // SQL.g:12:9: ':'
    {
        MATCHC(':');
        if  (HASEXCEPTION())
        {
            goto ruleT__96Ex;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__96Ex; /* Prevent compiler warnings */
    ruleT__96Ex: ;

}
// $ANTLR end T__96

//   Comes from: 13:7: ( '[' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__97
 *
 * Looks to match the characters the constitute the token T__97
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__97(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__97;


    // SQL.g:13:7: ( '[' )
    // SQL.g:13:9: '['
    {
        MATCHC('[');
        if  (HASEXCEPTION())
        {
            goto ruleT__97Ex;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__97Ex; /* Prevent compiler warnings */
    ruleT__97Ex: ;

}
// $ANTLR end T__97

//   Comes from: 14:7: ( ']' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__98
 *
 * Looks to match the characters the constitute the token T__98
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__98(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__98;


    // SQL.g:14:7: ( ']' )
    // SQL.g:14:9: ']'
    {
        MATCHC(']');
        if  (HASEXCEPTION())
        {
            goto ruleT__98Ex;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__98Ex; /* Prevent compiler warnings */
    ruleT__98Ex: ;

}
// $ANTLR end T__98

//   Comes from: 15:7: ( '{' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__99
 *
 * Looks to match the characters the constitute the token T__99
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__99(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__99;


    // SQL.g:15:7: ( '{' )
    // SQL.g:15:9: '{'
    {
        MATCHC('{');
        if  (HASEXCEPTION())
        {
            goto ruleT__99Ex;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__99Ex; /* Prevent compiler warnings */
    ruleT__99Ex: ;

}
// $ANTLR end T__99

//   Comes from: 16:8: ( '}' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T__100
 *
 * Looks to match the characters the constitute the token T__100
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT__100(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = T__100;


    // SQL.g:16:8: ( '}' )
    // SQL.g:16:10: '}'
    {
        MATCHC('}');
        if  (HASEXCEPTION())
        {
            goto ruleT__100Ex;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleT__100Ex; /* Prevent compiler warnings */
    ruleT__100Ex: ;

}
// $ANTLR end T__100

//   Comes from: 746:2: ( '*' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ASTERISK
 *
 * Looks to match the characters the constitute the token ASTERISK
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mASTERISK(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = ASTERISK;


    // SQL.g:746:2: ( '*' )
    // SQL.g:746:4: '*'
    {
        MATCHC('*');
        if  (HASEXCEPTION())
        {
            goto ruleASTERISKEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleASTERISKEx; /* Prevent compiler warnings */
    ruleASTERISKEx: ;

}
// $ANTLR end ASTERISK

//   Comes from: 750:2: ( '=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SINGLE_EQ
 *
 * Looks to match the characters the constitute the token SINGLE_EQ
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSINGLE_EQ(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SINGLE_EQ;


    // SQL.g:750:2: ( '=' )
    // SQL.g:750:4: '='
    {
        MATCHC('=');
        if  (HASEXCEPTION())
        {
            goto ruleSINGLE_EQEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleSINGLE_EQEx; /* Prevent compiler warnings */
    ruleSINGLE_EQEx: ;

}
// $ANTLR end SINGLE_EQ

//   Comes from: 754:2: ( '==' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DOUBLE_EQ
 *
 * Looks to match the characters the constitute the token DOUBLE_EQ
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mDOUBLE_EQ(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = DOUBLE_EQ;


    // SQL.g:754:2: ( '==' )
    // SQL.g:754:4: '=='
    {
        MATCHS(lit_1);
        if  (HASEXCEPTION())
        {
            goto ruleDOUBLE_EQEx;
        }




    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleDOUBLE_EQEx; /* Prevent compiler warnings */
    ruleDOUBLE_EQEx: ;

}
// $ANTLR end DOUBLE_EQ

//   Comes from: 758:2: ( '<' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OP_LT
 *
 * Looks to match the characters the constitute the token OP_LT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOP_LT(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = OP_LT;


    // SQL.g:758:2: ( '<' )
    // SQL.g:758:4: '<'
    {
        MATCHC('<');
        if  (HASEXCEPTION())
        {
            goto ruleOP_LTEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleOP_LTEx; /* Prevent compiler warnings */
    ruleOP_LTEx: ;

}
// $ANTLR end OP_LT

//   Comes from: 762:2: ( '<=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LE
 *
 * Looks to match the characters the constitute the token LE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLE(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LE;


    // SQL.g:762:2: ( '<=' )
    // SQL.g:762:4: '<='
    {
        MATCHS(lit_2);
        if  (HASEXCEPTION())
        {
            goto ruleLEEx;
        }




    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleLEEx; /* Prevent compiler warnings */
    ruleLEEx: ;

}
// $ANTLR end LE

//   Comes from: 766:2: ( '>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start GT
 *
 * Looks to match the characters the constitute the token GT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mGT(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = GT;


    // SQL.g:766:2: ( '>' )
    // SQL.g:766:4: '>'
    {
        MATCHC('>');
        if  (HASEXCEPTION())
        {
            goto ruleGTEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleGTEx; /* Prevent compiler warnings */
    ruleGTEx: ;

}
// $ANTLR end GT

//   Comes from: 770:2: ( '>=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start GE
 *
 * Looks to match the characters the constitute the token GE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mGE(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = GE;


    // SQL.g:770:2: ( '>=' )
    // SQL.g:770:4: '>='
    {
        MATCHS(lit_3);
        if  (HASEXCEPTION())
        {
            goto ruleGEEx;
        }




    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleGEEx; /* Prevent compiler warnings */
    ruleGEEx: ;

}
// $ANTLR end GE

//   Comes from: 774:2: ( '!=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start NOTEQ
 *
 * Looks to match the characters the constitute the token NOTEQ
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mNOTEQ(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = NOTEQ;


    // SQL.g:774:2: ( '!=' )
    // SQL.g:774:4: '!='
    {
        MATCHS(lit_4);
        if  (HASEXCEPTION())
        {
            goto ruleNOTEQEx;
        }




    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleNOTEQEx; /* Prevent compiler warnings */
    ruleNOTEQEx: ;

}
// $ANTLR end NOTEQ

//   Comes from: 778:2: ( A N D | '&' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start AND
 *
 * Looks to match the characters the constitute the token AND
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mAND(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = AND;


    {
        //  SQL.g:778:2: ( A N D | '&' )

        ANTLR3_UINT32 alt1;

        alt1=2;

        switch ( LA(1) )
        {
        case 'A':
        case 'a':
        	{
        		alt1=1;
        	}
            break;
        case '&':
        	{
        		alt1=2;
        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 1;
            EXCEPTION->state        = 0;


            goto ruleANDEx;

        }

        switch (alt1)
        {
    	case 1:
    	    // SQL.g:778:4: A N D
    	    {
    	        /* 778:4: A N D */
    	        mA(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleANDEx;
    	        }



    	        /* 778:4: A N D */
    	        mN(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleANDEx;
    	        }



    	        /* 778:4: A N D */
    	        mD(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleANDEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // SQL.g:779:4: '&'
    	    {
    	        MATCHC('&');
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleANDEx;
    	        }


    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleANDEx; /* Prevent compiler warnings */
    ruleANDEx: ;

}
// $ANTLR end AND

//   Comes from: 783:2: ( O R | '|' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OR
 *
 * Looks to match the characters the constitute the token OR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOR(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = OR;


    {
        //  SQL.g:783:2: ( O R | '|' )

        ANTLR3_UINT32 alt2;

        alt2=2;

        switch ( LA(1) )
        {
        case 'O':
        case 'o':
        	{
        		alt2=1;
        	}
            break;
        case '|':
        	{
        		alt2=2;
        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 2;
            EXCEPTION->state        = 0;


            goto ruleOREx;

        }

        switch (alt2)
        {
    	case 1:
    	    // SQL.g:783:4: O R
    	    {
    	        /* 783:4: O R */
    	        mO(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOREx;
    	        }



    	        /* 783:4: O R */
    	        mR(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOREx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // SQL.g:784:4: '|'
    	    {
    	        MATCHC('|');
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOREx;
    	        }


    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleOREx; /* Prevent compiler warnings */
    ruleOREx: ;

}
// $ANTLR end OR

//   Comes from: 788:2: ( ',' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COMMA
 *
 * Looks to match the characters the constitute the token COMMA
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCOMMA(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = COMMA;


    // SQL.g:788:2: ( ',' )
    // SQL.g:788:4: ','
    {
        MATCHC(',');
        if  (HASEXCEPTION())
        {
            goto ruleCOMMAEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleCOMMAEx; /* Prevent compiler warnings */
    ruleCOMMAEx: ;

}
// $ANTLR end COMMA

//   Comes from: 792:2: ( ';' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SEMICOLON
 *
 * Looks to match the characters the constitute the token SEMICOLON
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSEMICOLON(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SEMICOLON;


    // SQL.g:792:2: ( ';' )
    // SQL.g:792:4: ';'
    {
        MATCHC(';');
        if  (HASEXCEPTION())
        {
            goto ruleSEMICOLONEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleSEMICOLONEx; /* Prevent compiler warnings */
    ruleSEMICOLONEx: ;

}
// $ANTLR end SEMICOLON

//   Comes from: 797:3: ( 'A' | 'a' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start A
 *
 * Looks to match the characters the constitute the token A
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mA(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;


    // SQL.g:797:3: ( 'A' | 'a' )
    // SQL.g:
    {
        if ( LA(1) == 'A' || LA(1) == 'a' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleAEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleAEx; /* Prevent compiler warnings */
    ruleAEx: ;

}
// $ANTLR end A

//   Comes from: 802:3: ( 'B' | 'b' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start B
 *
 * Looks to match the characters the constitute the token B
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mB(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;


    // SQL.g:802:3: ( 'B' | 'b' )
    // SQL.g:
    {
        if ( LA(1) == 'B' || LA(1) == 'b' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleBEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleBEx; /* Prevent compiler warnings */
    ruleBEx: ;

}
// $ANTLR end B

//   Comes from: 807:3: ( 'C' | 'c' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start C
 *
 * Looks to match the characters the constitute the token C
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mC(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;


    // SQL.g:807:3: ( 'C' | 'c' )
    // SQL.g:
    {
        if ( LA(1) == 'C' || LA(1) == 'c' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleCEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleCEx; /* Prevent compiler warnings */
    ruleCEx: ;

}
// $ANTLR end C

//   Comes from: 812:3: ( 'D' | 'd' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start D
 *
 * Looks to match the characters the constitute the token D
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mD(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;


    // SQL.g:812:3: ( 'D' | 'd' )
    // SQL.g:
    {
        if ( LA(1) == 'D' || LA(1) == 'd' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleDEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleDEx; /* Prevent compiler warnings */
    ruleDEx: ;

}
// $ANTLR end D

//   Comes from: 817:3: ( 'E' | 'e' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start E
 *
 * Looks to match the characters the constitute the token E
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mE(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;


    // SQL.g:817:3: ( 'E' | 'e' )
    // SQL.g:
    {
        if ( LA(1) == 'E' || LA(1) == 'e' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleEEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleEEx; /* Prevent compiler warnings */
    ruleEEx: ;

}
// $ANTLR end E

//   Comes from: 822:3: ( 'F' | 'f' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start F
 *
 * Looks to match the characters the constitute the token F
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mF(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;


    // SQL.g:822:3: ( 'F' | 'f' )
    // SQL.g:
    {
        if ( LA(1) == 'F' || LA(1) == 'f' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleFEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleFEx; /* Prevent compiler warnings */
    ruleFEx: ;

}
// $ANTLR end F

//   Comes from: 827:3: ( 'G' | 'g' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start G
 *
 * Looks to match the characters the constitute the token G
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mG(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;


    // SQL.g:827:3: ( 'G' | 'g' )
    // SQL.g:
    {
        if ( LA(1) == 'G' || LA(1) == 'g' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleGEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleGEx; /* Prevent compiler warnings */
    ruleGEx: ;

}
// $ANTLR end G

//   Comes from: 832:3: ( 'H' | 'h' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start H
 *
 * Looks to match the characters the constitute the token H
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mH(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;


    // SQL.g:832:3: ( 'H' | 'h' )
    // SQL.g:
    {
        if ( LA(1) == 'H' || LA(1) == 'h' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleHEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleHEx; /* Prevent compiler warnings */
    ruleHEx: ;

}
// $ANTLR end H

//   Comes from: 837:3: ( 'I' | 'i' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start I
 *
 * Looks to match the characters the constitute the token I
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mI(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;


    // SQL.g:837:3: ( 'I' | 'i' )
    // SQL.g:
    {
        if ( LA(1) == 'I' || LA(1) == 'i' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleIEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleIEx; /* Prevent compiler warnings */
    ruleIEx: ;

}
// $ANTLR end I

//   Comes from: 842:3: ( 'J' | 'j' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start J
 *
 * Looks to match the characters the constitute the token J
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mJ(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;


    // SQL.g:842:3: ( 'J' | 'j' )
    // SQL.g:
    {
        if ( LA(1) == 'J' || LA(1) == 'j' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleJEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleJEx; /* Prevent compiler warnings */
    ruleJEx: ;

}
// $ANTLR end J

//   Comes from: 847:3: ( 'K' | 'k' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start K
 *
 * Looks to match the characters the constitute the token K
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mK(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;


    // SQL.g:847:3: ( 'K' | 'k' )
    // SQL.g:
    {
        if ( LA(1) == 'K' || LA(1) == 'k' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleKEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleKEx; /* Prevent compiler warnings */
    ruleKEx: ;

}
// $ANTLR end K

//   Comes from: 852:3: ( 'L' | 'l' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start L
 *
 * Looks to match the characters the constitute the token L
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mL(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;


    // SQL.g:852:3: ( 'L' | 'l' )
    // SQL.g:
    {
        if ( LA(1) == 'L' || LA(1) == 'l' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleLEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleLEx; /* Prevent compiler warnings */
    ruleLEx: ;

}
// $ANTLR end L

//   Comes from: 857:3: ( 'M' | 'm' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start M
 *
 * Looks to match the characters the constitute the token M
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mM(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;


    // SQL.g:857:3: ( 'M' | 'm' )
    // SQL.g:
    {
        if ( LA(1) == 'M' || LA(1) == 'm' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleMEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleMEx; /* Prevent compiler warnings */
    ruleMEx: ;

}
// $ANTLR end M

//   Comes from: 862:3: ( 'N' | 'n' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start N
 *
 * Looks to match the characters the constitute the token N
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mN(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;


    // SQL.g:862:3: ( 'N' | 'n' )
    // SQL.g:
    {
        if ( LA(1) == 'N' || LA(1) == 'n' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleNEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleNEx; /* Prevent compiler warnings */
    ruleNEx: ;

}
// $ANTLR end N

//   Comes from: 867:3: ( 'O' | 'o' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start O
 *
 * Looks to match the characters the constitute the token O
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mO(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;


    // SQL.g:867:3: ( 'O' | 'o' )
    // SQL.g:
    {
        if ( LA(1) == 'O' || LA(1) == 'o' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleOEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleOEx; /* Prevent compiler warnings */
    ruleOEx: ;

}
// $ANTLR end O

//   Comes from: 872:3: ( 'P' | 'p' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start P
 *
 * Looks to match the characters the constitute the token P
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mP(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;


    // SQL.g:872:3: ( 'P' | 'p' )
    // SQL.g:
    {
        if ( LA(1) == 'P' || LA(1) == 'p' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto rulePEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto rulePEx; /* Prevent compiler warnings */
    rulePEx: ;

}
// $ANTLR end P

//   Comes from: 877:3: ( 'Q' | 'q' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start Q
 *
 * Looks to match the characters the constitute the token Q
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mQ(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;


    // SQL.g:877:3: ( 'Q' | 'q' )
    // SQL.g:
    {
        if ( LA(1) == 'Q' || LA(1) == 'q' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleQEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleQEx; /* Prevent compiler warnings */
    ruleQEx: ;

}
// $ANTLR end Q

//   Comes from: 882:3: ( 'R' | 'r' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start R
 *
 * Looks to match the characters the constitute the token R
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mR(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;


    // SQL.g:882:3: ( 'R' | 'r' )
    // SQL.g:
    {
        if ( LA(1) == 'R' || LA(1) == 'r' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleREx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleREx; /* Prevent compiler warnings */
    ruleREx: ;

}
// $ANTLR end R

//   Comes from: 887:3: ( 'S' | 's' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start S
 *
 * Looks to match the characters the constitute the token S
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mS(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;


    // SQL.g:887:3: ( 'S' | 's' )
    // SQL.g:
    {
        if ( LA(1) == 'S' || LA(1) == 's' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleSEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleSEx; /* Prevent compiler warnings */
    ruleSEx: ;

}
// $ANTLR end S

//   Comes from: 892:3: ( 'T' | 't' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start T
 *
 * Looks to match the characters the constitute the token T
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mT(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;


    // SQL.g:892:3: ( 'T' | 't' )
    // SQL.g:
    {
        if ( LA(1) == 'T' || LA(1) == 't' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleTEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleTEx; /* Prevent compiler warnings */
    ruleTEx: ;

}
// $ANTLR end T

//   Comes from: 897:3: ( 'U' | 'u' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start U
 *
 * Looks to match the characters the constitute the token U
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mU(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;


    // SQL.g:897:3: ( 'U' | 'u' )
    // SQL.g:
    {
        if ( LA(1) == 'U' || LA(1) == 'u' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleUEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleUEx; /* Prevent compiler warnings */
    ruleUEx: ;

}
// $ANTLR end U

//   Comes from: 902:3: ( 'V' | 'v' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start V
 *
 * Looks to match the characters the constitute the token V
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mV(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;


    // SQL.g:902:3: ( 'V' | 'v' )
    // SQL.g:
    {
        if ( LA(1) == 'V' || LA(1) == 'v' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleVEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleVEx; /* Prevent compiler warnings */
    ruleVEx: ;

}
// $ANTLR end V

//   Comes from: 907:3: ( 'W' | 'w' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start W
 *
 * Looks to match the characters the constitute the token W
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mW(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;


    // SQL.g:907:3: ( 'W' | 'w' )
    // SQL.g:
    {
        if ( LA(1) == 'W' || LA(1) == 'w' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleWEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleWEx; /* Prevent compiler warnings */
    ruleWEx: ;

}
// $ANTLR end W

//   Comes from: 912:3: ( 'X' | 'x' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start X
 *
 * Looks to match the characters the constitute the token X
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mX(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;


    // SQL.g:912:3: ( 'X' | 'x' )
    // SQL.g:
    {
        if ( LA(1) == 'X' || LA(1) == 'x' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleXEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleXEx; /* Prevent compiler warnings */
    ruleXEx: ;

}
// $ANTLR end X

//   Comes from: 917:3: ( 'Y' | 'y' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start Y
 *
 * Looks to match the characters the constitute the token Y
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mY(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;


    // SQL.g:917:3: ( 'Y' | 'y' )
    // SQL.g:
    {
        if ( LA(1) == 'Y' || LA(1) == 'y' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleYEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleYEx; /* Prevent compiler warnings */
    ruleYEx: ;

}
// $ANTLR end Y

//   Comes from: 922:3: ( 'Z' | 'z' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start Z
 *
 * Looks to match the characters the constitute the token Z
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mZ(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;


    // SQL.g:922:3: ( 'Z' | 'z' )
    // SQL.g:
    {
        if ( LA(1) == 'Z' || LA(1) == 'z' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleZEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleZEx; /* Prevent compiler warnings */
    ruleZEx: ;

}
// $ANTLR end Z

//   Comes from: 926:2: ( A L L )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ALL
 *
 * Looks to match the characters the constitute the token ALL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mALL(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = ALL;


    // SQL.g:926:2: ( A L L )
    // SQL.g:926:4: A L L
    {
        /* 926:4: A L L */
        mA(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleALLEx;
        }



        /* 926:4: A L L */
        mL(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleALLEx;
        }



        /* 926:4: A L L */
        mL(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleALLEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleALLEx; /* Prevent compiler warnings */
    ruleALLEx: ;

}
// $ANTLR end ALL

//   Comes from: 930:2: ( A N C E S T O R )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ANCESTOR
 *
 * Looks to match the characters the constitute the token ANCESTOR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mANCESTOR(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = ANCESTOR;


    // SQL.g:930:2: ( A N C E S T O R )
    // SQL.g:930:4: A N C E S T O R
    {
        /* 930:4: A N C E S T O R */
        mA(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleANCESTOREx;
        }



        /* 930:4: A N C E S T O R */
        mN(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleANCESTOREx;
        }



        /* 930:4: A N C E S T O R */
        mC(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleANCESTOREx;
        }



        /* 930:4: A N C E S T O R */
        mE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleANCESTOREx;
        }



        /* 930:4: A N C E S T O R */
        mS(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleANCESTOREx;
        }



        /* 930:4: A N C E S T O R */
        mT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleANCESTOREx;
        }



        /* 930:4: A N C E S T O R */
        mO(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleANCESTOREx;
        }



        /* 930:4: A N C E S T O R */
        mR(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleANCESTOREx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleANCESTOREx; /* Prevent compiler warnings */
    ruleANCESTOREx: ;

}
// $ANTLR end ANCESTOR

//   Comes from: 934:2: ( A S )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start AS
 *
 * Looks to match the characters the constitute the token AS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mAS(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = AS;


    // SQL.g:934:2: ( A S )
    // SQL.g:934:4: A S
    {
        /* 934:4: A S */
        mA(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleASEx;
        }



        /* 934:4: A S */
        mS(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleASEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleASEx; /* Prevent compiler warnings */
    ruleASEx: ;

}
// $ANTLR end AS

//   Comes from: 938:2: ( A S C )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ASC
 *
 * Looks to match the characters the constitute the token ASC
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mASC(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = ASC;


    // SQL.g:938:2: ( A S C )
    // SQL.g:938:4: A S C
    {
        /* 938:4: A S C */
        mA(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleASCEx;
        }



        /* 938:4: A S C */
        mS(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleASCEx;
        }



        /* 938:4: A S C */
        mC(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleASCEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleASCEx; /* Prevent compiler warnings */
    ruleASCEx: ;

}
// $ANTLR end ASC

//   Comes from: 942:2: ( A S Y N C )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ASYNC
 *
 * Looks to match the characters the constitute the token ASYNC
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mASYNC(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = ASYNC;


    // SQL.g:942:2: ( A S Y N C )
    // SQL.g:942:4: A S Y N C
    {
        /* 942:4: A S Y N C */
        mA(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleASYNCEx;
        }



        /* 942:4: A S Y N C */
        mS(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleASYNCEx;
        }



        /* 942:4: A S Y N C */
        mY(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleASYNCEx;
        }



        /* 942:4: A S Y N C */
        mN(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleASYNCEx;
        }



        /* 942:4: A S Y N C */
        mC(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleASYNCEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleASYNCEx; /* Prevent compiler warnings */
    ruleASYNCEx: ;

}
// $ANTLR end ASYNC

//   Comes from: 946:2: ( B Y )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start BY
 *
 * Looks to match the characters the constitute the token BY
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mBY(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = BY;


    // SQL.g:946:2: ( B Y )
    // SQL.g:946:4: B Y
    {
        /* 946:4: B Y */
        mB(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleBYEx;
        }



        /* 946:4: B Y */
        mY(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleBYEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleBYEx; /* Prevent compiler warnings */
    ruleBYEx: ;

}
// $ANTLR end BY

//   Comes from: 950:2: ( C R E A T E )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CREATE
 *
 * Looks to match the characters the constitute the token CREATE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCREATE(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = CREATE;


    // SQL.g:950:2: ( C R E A T E )
    // SQL.g:950:4: C R E A T E
    {
        /* 950:4: C R E A T E */
        mC(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCREATEEx;
        }



        /* 950:4: C R E A T E */
        mR(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCREATEEx;
        }



        /* 950:4: C R E A T E */
        mE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCREATEEx;
        }



        /* 950:4: C R E A T E */
        mA(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCREATEEx;
        }



        /* 950:4: C R E A T E */
        mT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCREATEEx;
        }



        /* 950:4: C R E A T E */
        mE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCREATEEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleCREATEEx; /* Prevent compiler warnings */
    ruleCREATEEx: ;

}
// $ANTLR end CREATE

//   Comes from: 954:2: ( C O L L E C T I O N )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COLLECTION
 *
 * Looks to match the characters the constitute the token COLLECTION
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCOLLECTION(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = COLLECTION;


    // SQL.g:954:2: ( C O L L E C T I O N )
    // SQL.g:954:4: C O L L E C T I O N
    {
        /* 954:4: C O L L E C T I O N */
        mC(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCOLLECTIONEx;
        }



        /* 954:4: C O L L E C T I O N */
        mO(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCOLLECTIONEx;
        }



        /* 954:4: C O L L E C T I O N */
        mL(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCOLLECTIONEx;
        }



        /* 954:4: C O L L E C T I O N */
        mL(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCOLLECTIONEx;
        }



        /* 954:4: C O L L E C T I O N */
        mE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCOLLECTIONEx;
        }



        /* 954:4: C O L L E C T I O N */
        mC(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCOLLECTIONEx;
        }



        /* 954:4: C O L L E C T I O N */
        mT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCOLLECTIONEx;
        }



        /* 954:4: C O L L E C T I O N */
        mI(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCOLLECTIONEx;
        }



        /* 954:4: C O L L E C T I O N */
        mO(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCOLLECTIONEx;
        }



        /* 954:4: C O L L E C T I O N */
        mN(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCOLLECTIONEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleCOLLECTIONEx; /* Prevent compiler warnings */
    ruleCOLLECTIONEx: ;

}
// $ANTLR end COLLECTION

//   Comes from: 958:2: ( C U R R E N T '_' D A T E )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CURRENT_DATE
 *
 * Looks to match the characters the constitute the token CURRENT_DATE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCURRENT_DATE(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = CURRENT_DATE;


    // SQL.g:958:2: ( C U R R E N T '_' D A T E )
    // SQL.g:958:4: C U R R E N T '_' D A T E
    {
        /* 958:4: C U R R E N T '_' D A T E */
        mC(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_DATEEx;
        }



        /* 958:4: C U R R E N T '_' D A T E */
        mU(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_DATEEx;
        }



        /* 958:4: C U R R E N T '_' D A T E */
        mR(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_DATEEx;
        }



        /* 958:4: C U R R E N T '_' D A T E */
        mR(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_DATEEx;
        }



        /* 958:4: C U R R E N T '_' D A T E */
        mE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_DATEEx;
        }



        /* 958:4: C U R R E N T '_' D A T E */
        mN(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_DATEEx;
        }



        /* 958:4: C U R R E N T '_' D A T E */
        mT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_DATEEx;
        }



        MATCHC('_');
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_DATEEx;
        }


        /* 958:4: C U R R E N T '_' D A T E */
        mD(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_DATEEx;
        }



        /* 958:4: C U R R E N T '_' D A T E */
        mA(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_DATEEx;
        }



        /* 958:4: C U R R E N T '_' D A T E */
        mT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_DATEEx;
        }



        /* 958:4: C U R R E N T '_' D A T E */
        mE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_DATEEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleCURRENT_DATEEx; /* Prevent compiler warnings */
    ruleCURRENT_DATEEx: ;

}
// $ANTLR end CURRENT_DATE

//   Comes from: 962:2: ( C U R R E N T '_' T I M E )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CURRENT_TIME
 *
 * Looks to match the characters the constitute the token CURRENT_TIME
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCURRENT_TIME(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = CURRENT_TIME;


    // SQL.g:962:2: ( C U R R E N T '_' T I M E )
    // SQL.g:962:4: C U R R E N T '_' T I M E
    {
        /* 962:4: C U R R E N T '_' T I M E */
        mC(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_TIMEEx;
        }



        /* 962:4: C U R R E N T '_' T I M E */
        mU(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_TIMEEx;
        }



        /* 962:4: C U R R E N T '_' T I M E */
        mR(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_TIMEEx;
        }



        /* 962:4: C U R R E N T '_' T I M E */
        mR(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_TIMEEx;
        }



        /* 962:4: C U R R E N T '_' T I M E */
        mE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_TIMEEx;
        }



        /* 962:4: C U R R E N T '_' T I M E */
        mN(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_TIMEEx;
        }



        /* 962:4: C U R R E N T '_' T I M E */
        mT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_TIMEEx;
        }



        MATCHC('_');
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_TIMEEx;
        }


        /* 962:4: C U R R E N T '_' T I M E */
        mT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_TIMEEx;
        }



        /* 962:4: C U R R E N T '_' T I M E */
        mI(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_TIMEEx;
        }



        /* 962:4: C U R R E N T '_' T I M E */
        mM(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_TIMEEx;
        }



        /* 962:4: C U R R E N T '_' T I M E */
        mE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_TIMEEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleCURRENT_TIMEEx; /* Prevent compiler warnings */
    ruleCURRENT_TIMEEx: ;

}
// $ANTLR end CURRENT_TIME

//   Comes from: 966:2: ( C U R R E N T '_' T I M E S T A M P )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CURRENT_TIMESTAMP
 *
 * Looks to match the characters the constitute the token CURRENT_TIMESTAMP
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCURRENT_TIMESTAMP(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = CURRENT_TIMESTAMP;


    // SQL.g:966:2: ( C U R R E N T '_' T I M E S T A M P )
    // SQL.g:966:4: C U R R E N T '_' T I M E S T A M P
    {
        /* 966:4: C U R R E N T '_' T I M E S T A M P */
        mC(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_TIMESTAMPEx;
        }



        /* 966:4: C U R R E N T '_' T I M E S T A M P */
        mU(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_TIMESTAMPEx;
        }



        /* 966:4: C U R R E N T '_' T I M E S T A M P */
        mR(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_TIMESTAMPEx;
        }



        /* 966:4: C U R R E N T '_' T I M E S T A M P */
        mR(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_TIMESTAMPEx;
        }



        /* 966:4: C U R R E N T '_' T I M E S T A M P */
        mE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_TIMESTAMPEx;
        }



        /* 966:4: C U R R E N T '_' T I M E S T A M P */
        mN(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_TIMESTAMPEx;
        }



        /* 966:4: C U R R E N T '_' T I M E S T A M P */
        mT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_TIMESTAMPEx;
        }



        MATCHC('_');
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_TIMESTAMPEx;
        }


        /* 966:4: C U R R E N T '_' T I M E S T A M P */
        mT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_TIMESTAMPEx;
        }



        /* 966:4: C U R R E N T '_' T I M E S T A M P */
        mI(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_TIMESTAMPEx;
        }



        /* 966:4: C U R R E N T '_' T I M E S T A M P */
        mM(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_TIMESTAMPEx;
        }



        /* 966:4: C U R R E N T '_' T I M E S T A M P */
        mE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_TIMESTAMPEx;
        }



        /* 966:4: C U R R E N T '_' T I M E S T A M P */
        mS(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_TIMESTAMPEx;
        }



        /* 966:4: C U R R E N T '_' T I M E S T A M P */
        mT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_TIMESTAMPEx;
        }



        /* 966:4: C U R R E N T '_' T I M E S T A M P */
        mA(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_TIMESTAMPEx;
        }



        /* 966:4: C U R R E N T '_' T I M E S T A M P */
        mM(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_TIMESTAMPEx;
        }



        /* 966:4: C U R R E N T '_' T I M E S T A M P */
        mP(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCURRENT_TIMESTAMPEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleCURRENT_TIMESTAMPEx; /* Prevent compiler warnings */
    ruleCURRENT_TIMESTAMPEx: ;

}
// $ANTLR end CURRENT_TIMESTAMP

//   Comes from: 970:2: ( D E S C )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DESC
 *
 * Looks to match the characters the constitute the token DESC
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mDESC(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = DESC;


    // SQL.g:970:2: ( D E S C )
    // SQL.g:970:4: D E S C
    {
        /* 970:4: D E S C */
        mD(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleDESCEx;
        }



        /* 970:4: D E S C */
        mE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleDESCEx;
        }



        /* 970:4: D E S C */
        mS(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleDESCEx;
        }



        /* 970:4: D E S C */
        mC(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleDESCEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleDESCEx; /* Prevent compiler warnings */
    ruleDESCEx: ;

}
// $ANTLR end DESC

//   Comes from: 974:2: ( D E L E T E )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DELETE
 *
 * Looks to match the characters the constitute the token DELETE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mDELETE(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = DELETE;


    // SQL.g:974:2: ( D E L E T E )
    // SQL.g:974:4: D E L E T E
    {
        /* 974:4: D E L E T E */
        mD(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleDELETEEx;
        }



        /* 974:4: D E L E T E */
        mE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleDELETEEx;
        }



        /* 974:4: D E L E T E */
        mL(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleDELETEEx;
        }



        /* 974:4: D E L E T E */
        mE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleDELETEEx;
        }



        /* 974:4: D E L E T E */
        mT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleDELETEEx;
        }



        /* 974:4: D E L E T E */
        mE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleDELETEEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleDELETEEx; /* Prevent compiler warnings */
    ruleDELETEEx: ;

}
// $ANTLR end DELETE

//   Comes from: 978:2: ( D I S T I N C T )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DISTINCT
 *
 * Looks to match the characters the constitute the token DISTINCT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mDISTINCT(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = DISTINCT;


    // SQL.g:978:2: ( D I S T I N C T )
    // SQL.g:978:4: D I S T I N C T
    {
        /* 978:4: D I S T I N C T */
        mD(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleDISTINCTEx;
        }



        /* 978:4: D I S T I N C T */
        mI(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleDISTINCTEx;
        }



        /* 978:4: D I S T I N C T */
        mS(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleDISTINCTEx;
        }



        /* 978:4: D I S T I N C T */
        mT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleDISTINCTEx;
        }



        /* 978:4: D I S T I N C T */
        mI(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleDISTINCTEx;
        }



        /* 978:4: D I S T I N C T */
        mN(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleDISTINCTEx;
        }



        /* 978:4: D I S T I N C T */
        mC(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleDISTINCTEx;
        }



        /* 978:4: D I S T I N C T */
        mT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleDISTINCTEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleDISTINCTEx; /* Prevent compiler warnings */
    ruleDISTINCTEx: ;

}
// $ANTLR end DISTINCT

//   Comes from: 982:2: ( D R O P )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DROP
 *
 * Looks to match the characters the constitute the token DROP
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mDROP(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = DROP;


    // SQL.g:982:2: ( D R O P )
    // SQL.g:982:4: D R O P
    {
        /* 982:4: D R O P */
        mD(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleDROPEx;
        }



        /* 982:4: D R O P */
        mR(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleDROPEx;
        }



        /* 982:4: D R O P */
        mO(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleDROPEx;
        }



        /* 982:4: D R O P */
        mP(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleDROPEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleDROPEx; /* Prevent compiler warnings */
    ruleDROPEx: ;

}
// $ANTLR end DROP

//   Comes from: 986:2: ( E A C H )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EACH
 *
 * Looks to match the characters the constitute the token EACH
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mEACH(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = EACH;


    // SQL.g:986:2: ( E A C H )
    // SQL.g:986:4: E A C H
    {
        /* 986:4: E A C H */
        mE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleEACHEx;
        }



        /* 986:4: E A C H */
        mA(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleEACHEx;
        }



        /* 986:4: E A C H */
        mC(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleEACHEx;
        }



        /* 986:4: E A C H */
        mH(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleEACHEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleEACHEx; /* Prevent compiler warnings */
    ruleEACHEx: ;

}
// $ANTLR end EACH

//   Comes from: 990:2: ( E X C E P T )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EXCEPT
 *
 * Looks to match the characters the constitute the token EXCEPT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mEXCEPT(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = EXCEPT;


    // SQL.g:990:2: ( E X C E P T )
    // SQL.g:990:4: E X C E P T
    {
        /* 990:4: E X C E P T */
        mE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleEXCEPTEx;
        }



        /* 990:4: E X C E P T */
        mX(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleEXCEPTEx;
        }



        /* 990:4: E X C E P T */
        mC(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleEXCEPTEx;
        }



        /* 990:4: E X C E P T */
        mE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleEXCEPTEx;
        }



        /* 990:4: E X C E P T */
        mP(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleEXCEPTEx;
        }



        /* 990:4: E X C E P T */
        mT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleEXCEPTEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleEXCEPTEx; /* Prevent compiler warnings */
    ruleEXCEPTEx: ;

}
// $ANTLR end EXCEPT

//   Comes from: 994:2: ( F L A T T E N )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start FLATTEN
 *
 * Looks to match the characters the constitute the token FLATTEN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mFLATTEN(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = FLATTEN;


    // SQL.g:994:2: ( F L A T T E N )
    // SQL.g:994:4: F L A T T E N
    {
        /* 994:4: F L A T T E N */
        mF(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleFLATTENEx;
        }



        /* 994:4: F L A T T E N */
        mL(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleFLATTENEx;
        }



        /* 994:4: F L A T T E N */
        mA(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleFLATTENEx;
        }



        /* 994:4: F L A T T E N */
        mT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleFLATTENEx;
        }



        /* 994:4: F L A T T E N */
        mT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleFLATTENEx;
        }



        /* 994:4: F L A T T E N */
        mE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleFLATTENEx;
        }



        /* 994:4: F L A T T E N */
        mN(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleFLATTENEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleFLATTENEx; /* Prevent compiler warnings */
    ruleFLATTENEx: ;

}
// $ANTLR end FLATTEN

//   Comes from: 998:2: ( F R O M )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start FROM
 *
 * Looks to match the characters the constitute the token FROM
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mFROM(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = FROM;


    // SQL.g:998:2: ( F R O M )
    // SQL.g:998:4: F R O M
    {
        /* 998:4: F R O M */
        mF(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleFROMEx;
        }



        /* 998:4: F R O M */
        mR(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleFROMEx;
        }



        /* 998:4: F R O M */
        mO(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleFROMEx;
        }



        /* 998:4: F R O M */
        mM(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleFROMEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleFROMEx; /* Prevent compiler warnings */
    ruleFROMEx: ;

}
// $ANTLR end FROM

//   Comes from: 1002:2: ( G R O U P )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start GROUP
 *
 * Looks to match the characters the constitute the token GROUP
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mGROUP(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = GROUP;


    // SQL.g:1002:2: ( G R O U P )
    // SQL.g:1002:4: G R O U P
    {
        /* 1002:4: G R O U P */
        mG(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleGROUPEx;
        }



        /* 1002:4: G R O U P */
        mR(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleGROUPEx;
        }



        /* 1002:4: G R O U P */
        mO(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleGROUPEx;
        }



        /* 1002:4: G R O U P */
        mU(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleGROUPEx;
        }



        /* 1002:4: G R O U P */
        mP(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleGROUPEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleGROUPEx; /* Prevent compiler warnings */
    ruleGROUPEx: ;

}
// $ANTLR end GROUP

//   Comes from: 1006:2: ( H A V I N G )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start HAVING
 *
 * Looks to match the characters the constitute the token HAVING
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mHAVING(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = HAVING;


    // SQL.g:1006:2: ( H A V I N G )
    // SQL.g:1006:4: H A V I N G
    {
        /* 1006:4: H A V I N G */
        mH(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleHAVINGEx;
        }



        /* 1006:4: H A V I N G */
        mA(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleHAVINGEx;
        }



        /* 1006:4: H A V I N G */
        mV(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleHAVINGEx;
        }



        /* 1006:4: H A V I N G */
        mI(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleHAVINGEx;
        }



        /* 1006:4: H A V I N G */
        mN(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleHAVINGEx;
        }



        /* 1006:4: H A V I N G */
        mG(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleHAVINGEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleHAVINGEx; /* Prevent compiler warnings */
    ruleHAVINGEx: ;

}
// $ANTLR end HAVING

//   Comes from: 1010:2: ( I N )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start IN
 *
 * Looks to match the characters the constitute the token IN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mIN(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = IN;


    // SQL.g:1010:2: ( I N )
    // SQL.g:1010:4: I N
    {
        /* 1010:4: I N */
        mI(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleINEx;
        }



        /* 1010:4: I N */
        mN(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleINEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleINEx; /* Prevent compiler warnings */
    ruleINEx: ;

}
// $ANTLR end IN

//   Comes from: 1014:2: ( I N D E X )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COLLECTION_INDEX
 *
 * Looks to match the characters the constitute the token COLLECTION_INDEX
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCOLLECTION_INDEX(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = COLLECTION_INDEX;


    // SQL.g:1014:2: ( I N D E X )
    // SQL.g:1014:4: I N D E X
    {
        /* 1014:4: I N D E X */
        mI(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCOLLECTION_INDEXEx;
        }



        /* 1014:4: I N D E X */
        mN(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCOLLECTION_INDEXEx;
        }



        /* 1014:4: I N D E X */
        mD(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCOLLECTION_INDEXEx;
        }



        /* 1014:4: I N D E X */
        mE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCOLLECTION_INDEXEx;
        }



        /* 1014:4: I N D E X */
        mX(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleCOLLECTION_INDEXEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleCOLLECTION_INDEXEx; /* Prevent compiler warnings */
    ruleCOLLECTION_INDEXEx: ;

}
// $ANTLR end COLLECTION_INDEX

//   Comes from: 1018:2: ( I N S E R T )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start INSERT
 *
 * Looks to match the characters the constitute the token INSERT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mINSERT(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = INSERT;


    // SQL.g:1018:2: ( I N S E R T )
    // SQL.g:1018:4: I N S E R T
    {
        /* 1018:4: I N S E R T */
        mI(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleINSERTEx;
        }



        /* 1018:4: I N S E R T */
        mN(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleINSERTEx;
        }



        /* 1018:4: I N S E R T */
        mS(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleINSERTEx;
        }



        /* 1018:4: I N S E R T */
        mE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleINSERTEx;
        }



        /* 1018:4: I N S E R T */
        mR(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleINSERTEx;
        }



        /* 1018:4: I N S E R T */
        mT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleINSERTEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleINSERTEx; /* Prevent compiler warnings */
    ruleINSERTEx: ;

}
// $ANTLR end INSERT

//   Comes from: 1022:2: ( I N T E R S E C T )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start INTERSECT
 *
 * Looks to match the characters the constitute the token INTERSECT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mINTERSECT(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = INTERSECT;


    // SQL.g:1022:2: ( I N T E R S E C T )
    // SQL.g:1022:4: I N T E R S E C T
    {
        /* 1022:4: I N T E R S E C T */
        mI(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleINTERSECTEx;
        }



        /* 1022:4: I N T E R S E C T */
        mN(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleINTERSECTEx;
        }



        /* 1022:4: I N T E R S E C T */
        mT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleINTERSECTEx;
        }



        /* 1022:4: I N T E R S E C T */
        mE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleINTERSECTEx;
        }



        /* 1022:4: I N T E R S E C T */
        mR(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleINTERSECTEx;
        }



        /* 1022:4: I N T E R S E C T */
        mS(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleINTERSECTEx;
        }



        /* 1022:4: I N T E R S E C T */
        mE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleINTERSECTEx;
        }



        /* 1022:4: I N T E R S E C T */
        mC(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleINTERSECTEx;
        }



        /* 1022:4: I N T E R S E C T */
        mT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleINTERSECTEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleINTERSECTEx; /* Prevent compiler warnings */
    ruleINTERSECTEx: ;

}
// $ANTLR end INTERSECT

//   Comes from: 1026:2: ( I N T O )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start INTO
 *
 * Looks to match the characters the constitute the token INTO
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mINTO(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = INTO;


    // SQL.g:1026:2: ( I N T O )
    // SQL.g:1026:4: I N T O
    {
        /* 1026:4: I N T O */
        mI(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleINTOEx;
        }



        /* 1026:4: I N T O */
        mN(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleINTOEx;
        }



        /* 1026:4: I N T O */
        mT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleINTOEx;
        }



        /* 1026:4: I N T O */
        mO(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleINTOEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleINTOEx; /* Prevent compiler warnings */
    ruleINTOEx: ;

}
// $ANTLR end INTO

//   Comes from: 1030:2: ( I S )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start IS
 *
 * Looks to match the characters the constitute the token IS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mIS(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = IS;


    // SQL.g:1030:2: ( I S )
    // SQL.g:1030:4: I S
    {
        /* 1030:4: I S */
        mI(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleISEx;
        }



        /* 1030:4: I S */
        mS(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleISEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleISEx; /* Prevent compiler warnings */
    ruleISEx: ;

}
// $ANTLR end IS

//   Comes from: 1034:2: ( L I M I T )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LIMIT
 *
 * Looks to match the characters the constitute the token LIMIT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLIMIT(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LIMIT;


    // SQL.g:1034:2: ( L I M I T )
    // SQL.g:1034:4: L I M I T
    {
        /* 1034:4: L I M I T */
        mL(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleLIMITEx;
        }



        /* 1034:4: L I M I T */
        mI(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleLIMITEx;
        }



        /* 1034:4: L I M I T */
        mM(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleLIMITEx;
        }



        /* 1034:4: L I M I T */
        mI(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleLIMITEx;
        }



        /* 1034:4: L I M I T */
        mT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleLIMITEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleLIMITEx; /* Prevent compiler warnings */
    ruleLIMITEx: ;

}
// $ANTLR end LIMIT

//   Comes from: 1038:2: ( N U L L )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start NIL
 *
 * Looks to match the characters the constitute the token NIL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mNIL(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = NIL;


    // SQL.g:1038:2: ( N U L L )
    // SQL.g:1038:4: N U L L
    {
        /* 1038:4: N U L L */
        mN(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleNILEx;
        }



        /* 1038:4: N U L L */
        mU(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleNILEx;
        }



        /* 1038:4: N U L L */
        mL(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleNILEx;
        }



        /* 1038:4: N U L L */
        mL(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleNILEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleNILEx; /* Prevent compiler warnings */
    ruleNILEx: ;

}
// $ANTLR end NIL

//   Comes from: 1042:2: ( O F F S E T )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OFFSET
 *
 * Looks to match the characters the constitute the token OFFSET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOFFSET(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = OFFSET;


    // SQL.g:1042:2: ( O F F S E T )
    // SQL.g:1042:4: O F F S E T
    {
        /* 1042:4: O F F S E T */
        mO(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleOFFSETEx;
        }



        /* 1042:4: O F F S E T */
        mF(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleOFFSETEx;
        }



        /* 1042:4: O F F S E T */
        mF(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleOFFSETEx;
        }



        /* 1042:4: O F F S E T */
        mS(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleOFFSETEx;
        }



        /* 1042:4: O F F S E T */
        mE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleOFFSETEx;
        }



        /* 1042:4: O F F S E T */
        mT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleOFFSETEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleOFFSETEx; /* Prevent compiler warnings */
    ruleOFFSETEx: ;

}
// $ANTLR end OFFSET

//   Comes from: 1046:2: ( O P T I O N S )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPTIONS
 *
 * Looks to match the characters the constitute the token OPTIONS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOPTIONS(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = OPTIONS;


    // SQL.g:1046:2: ( O P T I O N S )
    // SQL.g:1046:4: O P T I O N S
    {
        /* 1046:4: O P T I O N S */
        mO(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleOPTIONSEx;
        }



        /* 1046:4: O P T I O N S */
        mP(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleOPTIONSEx;
        }



        /* 1046:4: O P T I O N S */
        mT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleOPTIONSEx;
        }



        /* 1046:4: O P T I O N S */
        mI(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleOPTIONSEx;
        }



        /* 1046:4: O P T I O N S */
        mO(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleOPTIONSEx;
        }



        /* 1046:4: O P T I O N S */
        mN(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleOPTIONSEx;
        }



        /* 1046:4: O P T I O N S */
        mS(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleOPTIONSEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleOPTIONSEx; /* Prevent compiler warnings */
    ruleOPTIONSEx: ;

}
// $ANTLR end OPTIONS

//   Comes from: 1050:2: ( O R D E R )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ORDER
 *
 * Looks to match the characters the constitute the token ORDER
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mORDER(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = ORDER;


    // SQL.g:1050:2: ( O R D E R )
    // SQL.g:1050:4: O R D E R
    {
        /* 1050:4: O R D E R */
        mO(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleORDEREx;
        }



        /* 1050:4: O R D E R */
        mR(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleORDEREx;
        }



        /* 1050:4: O R D E R */
        mD(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleORDEREx;
        }



        /* 1050:4: O R D E R */
        mE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleORDEREx;
        }



        /* 1050:4: O R D E R */
        mR(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleORDEREx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleORDEREx; /* Prevent compiler warnings */
    ruleORDEREx: ;

}
// $ANTLR end ORDER

//   Comes from: 1054:2: ( S E L E C T )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SELECT
 *
 * Looks to match the characters the constitute the token SELECT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSELECT(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SELECT;


    // SQL.g:1054:2: ( S E L E C T )
    // SQL.g:1054:4: S E L E C T
    {
        /* 1054:4: S E L E C T */
        mS(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleSELECTEx;
        }



        /* 1054:4: S E L E C T */
        mE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleSELECTEx;
        }



        /* 1054:4: S E L E C T */
        mL(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleSELECTEx;
        }



        /* 1054:4: S E L E C T */
        mE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleSELECTEx;
        }



        /* 1054:4: S E L E C T */
        mC(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleSELECTEx;
        }



        /* 1054:4: S E L E C T */
        mT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleSELECTEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleSELECTEx; /* Prevent compiler warnings */
    ruleSELECTEx: ;

}
// $ANTLR end SELECT

//   Comes from: 1058:2: ( S E T )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SET
 *
 * Looks to match the characters the constitute the token SET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSET(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SET;


    // SQL.g:1058:2: ( S E T )
    // SQL.g:1058:4: S E T
    {
        /* 1058:4: S E T */
        mS(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleSETEx;
        }



        /* 1058:4: S E T */
        mE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleSETEx;
        }



        /* 1058:4: S E T */
        mT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleSETEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleSETEx; /* Prevent compiler warnings */
    ruleSETEx: ;

}
// $ANTLR end SET

//   Comes from: 1062:2: ( S Y N C )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SYNC
 *
 * Looks to match the characters the constitute the token SYNC
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSYNC(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SYNC;


    // SQL.g:1062:2: ( S Y N C )
    // SQL.g:1062:4: S Y N C
    {
        /* 1062:4: S Y N C */
        mS(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleSYNCEx;
        }



        /* 1062:4: S Y N C */
        mY(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleSYNCEx;
        }



        /* 1062:4: S Y N C */
        mN(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleSYNCEx;
        }



        /* 1062:4: S Y N C */
        mC(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleSYNCEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleSYNCEx; /* Prevent compiler warnings */
    ruleSYNCEx: ;

}
// $ANTLR end SYNC

//   Comes from: 1066:2: ( U N I O N )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start UNION
 *
 * Looks to match the characters the constitute the token UNION
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mUNION(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = UNION;


    // SQL.g:1066:2: ( U N I O N )
    // SQL.g:1066:4: U N I O N
    {
        /* 1066:4: U N I O N */
        mU(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleUNIONEx;
        }



        /* 1066:4: U N I O N */
        mN(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleUNIONEx;
        }



        /* 1066:4: U N I O N */
        mI(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleUNIONEx;
        }



        /* 1066:4: U N I O N */
        mO(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleUNIONEx;
        }



        /* 1066:4: U N I O N */
        mN(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleUNIONEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleUNIONEx; /* Prevent compiler warnings */
    ruleUNIONEx: ;

}
// $ANTLR end UNION

//   Comes from: 1070:2: ( U P D A T E )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start UPDATE
 *
 * Looks to match the characters the constitute the token UPDATE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mUPDATE(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = UPDATE;


    // SQL.g:1070:2: ( U P D A T E )
    // SQL.g:1070:4: U P D A T E
    {
        /* 1070:4: U P D A T E */
        mU(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleUPDATEEx;
        }



        /* 1070:4: U P D A T E */
        mP(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleUPDATEEx;
        }



        /* 1070:4: U P D A T E */
        mD(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleUPDATEEx;
        }



        /* 1070:4: U P D A T E */
        mA(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleUPDATEEx;
        }



        /* 1070:4: U P D A T E */
        mT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleUPDATEEx;
        }



        /* 1070:4: U P D A T E */
        mE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleUPDATEEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleUPDATEEx; /* Prevent compiler warnings */
    ruleUPDATEEx: ;

}
// $ANTLR end UPDATE

//   Comes from: 1074:2: ( W H E R E )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WHERE
 *
 * Looks to match the characters the constitute the token WHERE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mWHERE(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = WHERE;


    // SQL.g:1074:2: ( W H E R E )
    // SQL.g:1074:4: W H E R E
    {
        /* 1074:4: W H E R E */
        mW(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleWHEREEx;
        }



        /* 1074:4: W H E R E */
        mH(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleWHEREEx;
        }



        /* 1074:4: W H E R E */
        mE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleWHEREEx;
        }



        /* 1074:4: W H E R E */
        mR(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleWHEREEx;
        }



        /* 1074:4: W H E R E */
        mE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleWHEREEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleWHEREEx; /* Prevent compiler warnings */
    ruleWHEREEx: ;

}
// $ANTLR end WHERE

//   Comes from: 1078:2: ( V A L U E )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start VALUE
 *
 * Looks to match the characters the constitute the token VALUE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mVALUE(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = VALUE;


    // SQL.g:1078:2: ( V A L U E )
    // SQL.g:1078:4: V A L U E
    {
        /* 1078:4: V A L U E */
        mV(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleVALUEEx;
        }



        /* 1078:4: V A L U E */
        mA(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleVALUEEx;
        }



        /* 1078:4: V A L U E */
        mL(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleVALUEEx;
        }



        /* 1078:4: V A L U E */
        mU(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleVALUEEx;
        }



        /* 1078:4: V A L U E */
        mE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleVALUEEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleVALUEEx; /* Prevent compiler warnings */
    ruleVALUEEx: ;

}
// $ANTLR end VALUE

//   Comes from: 1082:2: ( V A L U E S )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start VALUES
 *
 * Looks to match the characters the constitute the token VALUES
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mVALUES(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = VALUES;


    // SQL.g:1082:2: ( V A L U E S )
    // SQL.g:1082:4: V A L U E S
    {
        /* 1082:4: V A L U E S */
        mV(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleVALUESEx;
        }



        /* 1082:4: V A L U E S */
        mA(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleVALUESEx;
        }



        /* 1082:4: V A L U E S */
        mL(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleVALUESEx;
        }



        /* 1082:4: V A L U E S */
        mU(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleVALUESEx;
        }



        /* 1082:4: V A L U E S */
        mE(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleVALUESEx;
        }



        /* 1082:4: V A L U E S */
        mS(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleVALUESEx;
        }



    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleVALUESEx; /* Prevent compiler warnings */
    ruleVALUESEx: ;

}
// $ANTLR end VALUES

//   Comes from: 1097:5: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WS
 *
 * Looks to match the characters the constitute the token WS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mWS(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = WS;


    // SQL.g:1097:5: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
    // SQL.g:1097:9: ( ' ' | '\\t' | '\\r' | '\\n' )
    {
        if ( ((LA(1) >= '\t') && (LA(1) <= '\n')) || LA(1) == '\r' || LA(1) == ' ' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleWSEx;
        }


        {
            LEXSTATE->channel=HIDDEN;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleWSEx; /* Prevent compiler warnings */
    ruleWSEx: ;

}
// $ANTLR end WS

//   Comes from: 1100:2: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '/' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '-' | '/' | '.' | '0' .. '9' )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ID
 *
 * Looks to match the characters the constitute the token ID
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mID(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = ID;


    // SQL.g:1100:2: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '/' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '-' | '/' | '.' | '0' .. '9' )* )
    // SQL.g:1100:4: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '/' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '-' | '/' | '.' | '0' .. '9' )*
    {
        if ( LA(1) == '/' || ((LA(1) >= 'A') && (LA(1) <= 'Z')) || LA(1) == '_' || ((LA(1) >= 'a') && (LA(1) <= 'z')) )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleIDEx;
        }


        // SQL.g:1100:31: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '-' | '/' | '.' | '0' .. '9' )*

        for (;;)
        {
            int alt3=2;
            switch ( LA(1) )
            {
            case '-':
            case '.':
            case '/':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            	{
            		alt3=1;
            	}
                break;

            }

            switch (alt3)
            {
        	case 1:
        	    // SQL.g:
        	    {
        	        if ( ((LA(1) >= '-') && (LA(1) <= '9')) || ((LA(1) >= 'A') && (LA(1) <= 'Z')) || LA(1) == '_' || ((LA(1) >= 'a') && (LA(1) <= 'z')) )
        	        {
        	            CONSUME();
        	        }
        	        else
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();
        	            goto ruleIDEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop3;	/* break out of the loop */
        	    break;
            }
        }
        loop3: ; /* Jump out to here if this rule does not match */


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleIDEx; /* Prevent compiler warnings */
    ruleIDEx: ;

}
// $ANTLR end ID

//   Comes from: 1104:2: ( ( '0' .. '9' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start NUMBER
 *
 * Looks to match the characters the constitute the token NUMBER
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mNUMBER(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = NUMBER;


    // SQL.g:1104:2: ( ( '0' .. '9' )+ )
    // SQL.g:1104:4: ( '0' .. '9' )+
    {
        // SQL.g:1104:4: ( '0' .. '9' )+
        {
            int cnt4=0;

            for (;;)
            {
                int alt4=2;
        	switch ( LA(1) )
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        		{
        			alt4=1;
        		}
        	    break;

        	}

        	switch (alt4)
        	{
        	    case 1:
        	        // SQL.g:
        	        {
        	            if ( ((LA(1) >= '0') && (LA(1) <= '9')) )
        	            {
        	                CONSUME();
        	            }
        	            else
        	            {
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	                LRECOVER();
        	                goto ruleNUMBEREx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt4 >= 1 )
        		{
        		    goto loop4;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleNUMBEREx;
        	}
        	cnt4++;
            }
            loop4: ;	/* Jump to here if this rule does not match */
        }

    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleNUMBEREx; /* Prevent compiler warnings */
    ruleNUMBEREx: ;

}
// $ANTLR end NUMBER

//   Comes from: 1108:2: ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start FLOAT
 *
 * Looks to match the characters the constitute the token FLOAT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mFLOAT(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = FLOAT;


    {
        //  SQL.g:1108:2: ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT )

        ANTLR3_UINT32 alt11;

        alt11=3;

        alt11 = cdfa11.predict(ctx, RECOGNIZER, ISTREAM, &cdfa11);
        if  (HASEXCEPTION())
        {
            goto ruleFLOATEx;
        }

        switch (alt11)
        {
    	case 1:
    	    // SQL.g:1108:6: ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )?
    	    {
    	        // SQL.g:1108:6: ( '0' .. '9' )+
    	        {
    	            int cnt5=0;

    	            for (;;)
    	            {
    	                int alt5=2;
    	        	switch ( LA(1) )
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt5=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt5)
    	        	{
    	        	    case 1:
    	        	        // SQL.g:
    	        	        {
    	        	            if ( ((LA(1) >= '0') && (LA(1) <= '9')) )
    	        	            {
    	        	                CONSUME();
    	        	            }
    	        	            else
    	        	            {
    	        	                CONSTRUCTEX();
    	        	                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	        	                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	        	                LRECOVER();
    	        	                goto ruleFLOATEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:

    	        		if ( cnt5 >= 1 )
    	        		{
    	        		    goto loop5;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		CONSTRUCTEX();
    	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
    	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


    	        		goto ruleFLOATEx;
    	        	}
    	        	cnt5++;
    	            }
    	            loop5: ;	/* Jump to here if this rule does not match */
    	        }

    	        MATCHC('.');
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFLOATEx;
    	        }


    	        // SQL.g:1108:22: ( '0' .. '9' )*

    	        for (;;)
    	        {
    	            int alt6=2;
    	            switch ( LA(1) )
    	            {
    	            case '0':
    	            case '1':
    	            case '2':
    	            case '3':
    	            case '4':
    	            case '5':
    	            case '6':
    	            case '7':
    	            case '8':
    	            case '9':
    	            	{
    	            		alt6=1;
    	            	}
    	                break;

    	            }

    	            switch (alt6)
    	            {
    	        	case 1:
    	        	    // SQL.g:
    	        	    {
    	        	        if ( ((LA(1) >= '0') && (LA(1) <= '9')) )
    	        	        {
    	        	            CONSUME();
    	        	        }
    	        	        else
    	        	        {
    	        	            CONSTRUCTEX();
    	        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	        	            LRECOVER();
    	        	            goto ruleFLOATEx;
    	        	        }


    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop6;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop6: ; /* Jump out to here if this rule does not match */


    	        // SQL.g:1108:34: ( EXPONENT )?
    	        {
    	            int alt7=2;
    	            switch ( LA(1) )
    	            {
    	                case 'E':
    	                case 'e':
    	                	{
    	                		alt7=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt7)
    	            {
    	        	case 1:
    	        	    // SQL.g:1108:34: EXPONENT
    	        	    {
    	        	        /* 1108:34: EXPONENT */
    	        	        mEXPONENT(ctx );
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleFLOATEx;
    	        	        }



    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;
    	case 2:
    	    // SQL.g:1109:6: '.' ( '0' .. '9' )+ ( EXPONENT )?
    	    {
    	        MATCHC('.');
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFLOATEx;
    	        }


    	        // SQL.g:1109:10: ( '0' .. '9' )+
    	        {
    	            int cnt8=0;

    	            for (;;)
    	            {
    	                int alt8=2;
    	        	switch ( LA(1) )
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt8=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt8)
    	        	{
    	        	    case 1:
    	        	        // SQL.g:
    	        	        {
    	        	            if ( ((LA(1) >= '0') && (LA(1) <= '9')) )
    	        	            {
    	        	                CONSUME();
    	        	            }
    	        	            else
    	        	            {
    	        	                CONSTRUCTEX();
    	        	                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	        	                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	        	                LRECOVER();
    	        	                goto ruleFLOATEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:

    	        		if ( cnt8 >= 1 )
    	        		{
    	        		    goto loop8;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		CONSTRUCTEX();
    	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
    	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


    	        		goto ruleFLOATEx;
    	        	}
    	        	cnt8++;
    	            }
    	            loop8: ;	/* Jump to here if this rule does not match */
    	        }

    	        // SQL.g:1109:22: ( EXPONENT )?
    	        {
    	            int alt9=2;
    	            switch ( LA(1) )
    	            {
    	                case 'E':
    	                case 'e':
    	                	{
    	                		alt9=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt9)
    	            {
    	        	case 1:
    	        	    // SQL.g:1109:22: EXPONENT
    	        	    {
    	        	        /* 1109:22: EXPONENT */
    	        	        mEXPONENT(ctx );
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleFLOATEx;
    	        	        }



    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;
    	case 3:
    	    // SQL.g:1110:6: ( '0' .. '9' )+ EXPONENT
    	    {
    	        // SQL.g:1110:6: ( '0' .. '9' )+
    	        {
    	            int cnt10=0;

    	            for (;;)
    	            {
    	                int alt10=2;
    	        	switch ( LA(1) )
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt10=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt10)
    	        	{
    	        	    case 1:
    	        	        // SQL.g:
    	        	        {
    	        	            if ( ((LA(1) >= '0') && (LA(1) <= '9')) )
    	        	            {
    	        	                CONSUME();
    	        	            }
    	        	            else
    	        	            {
    	        	                CONSTRUCTEX();
    	        	                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	        	                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	        	                LRECOVER();
    	        	                goto ruleFLOATEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:

    	        		if ( cnt10 >= 1 )
    	        		{
    	        		    goto loop10;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		CONSTRUCTEX();
    	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
    	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


    	        		goto ruleFLOATEx;
    	        	}
    	        	cnt10++;
    	            }
    	            loop10: ;	/* Jump to here if this rule does not match */
    	        }

    	        /* 1110:6: ( '0' .. '9' )+ EXPONENT */
    	        mEXPONENT(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFLOATEx;
    	        }



    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleFLOATEx; /* Prevent compiler warnings */
    ruleFLOATEx: ;

}
// $ANTLR end FLOAT

//   Comes from: 1114:2: ( '\"' ( EscapeSequence |~ ( '\\\\' | '\"' ) )* '\"' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start STRING
 *
 * Looks to match the characters the constitute the token STRING
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSTRING(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = STRING;


    // SQL.g:1114:2: ( '\"' ( EscapeSequence |~ ( '\\\\' | '\"' ) )* '\"' )
    // SQL.g:1114:5: '\"' ( EscapeSequence |~ ( '\\\\' | '\"' ) )* '\"'
    {
        MATCHC('"');
        if  (HASEXCEPTION())
        {
            goto ruleSTRINGEx;
        }


        // SQL.g:1114:9: ( EscapeSequence |~ ( '\\\\' | '\"' ) )*

        for (;;)
        {
            int alt12=3;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA12_0 = LA(1);
                if ( (LA12_0 == '\\'))
                {
                    alt12=1;
                }
                else if ( (((LA12_0 >= 0x0000) && (LA12_0 <= '!')) || ((LA12_0 >= '#') && (LA12_0 <= '[')) || ((LA12_0 >= ']') && (LA12_0 <= 0xFFFF))))
                {
                    alt12=2;
                }

            }
            switch (alt12)
            {
        	case 1:
        	    // SQL.g:1114:11: EscapeSequence
        	    {
        	        /* 1114:11: EscapeSequence */
        	        mEscapeSequence(ctx );
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleSTRINGEx;
        	        }



        	    }
        	    break;
        	case 2:
        	    // SQL.g:1114:28: ~ ( '\\\\' | '\"' )
        	    {
        	        if ( ((LA(1) >= 0x0000) && (LA(1) <= '!')) || ((LA(1) >= '#') && (LA(1) <= '[')) || ((LA(1) >= ']') && (LA(1) <= 0xFFFF)) )
        	        {
        	            CONSUME();
        	        }
        	        else
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();
        	            goto ruleSTRINGEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop12;	/* break out of the loop */
        	    break;
            }
        }
        loop12: ; /* Jump out to here if this rule does not match */


        MATCHC('"');
        if  (HASEXCEPTION())
        {
            goto ruleSTRINGEx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleSTRINGEx; /* Prevent compiler warnings */
    ruleSTRINGEx: ;

}
// $ANTLR end STRING

//   Comes from: 1120:2: ( '\\\\' ( '\\\"' | '\\'' | '\\\\' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EscapeSequence
 *
 * Looks to match the characters the constitute the token EscapeSequence
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mEscapeSequence(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;


    // SQL.g:1120:2: ( '\\\\' ( '\\\"' | '\\'' | '\\\\' ) )
    // SQL.g:1120:6: '\\\\' ( '\\\"' | '\\'' | '\\\\' )
    {
        MATCHC('\\');
        if  (HASEXCEPTION())
        {
            goto ruleEscapeSequenceEx;
        }


        if ( LA(1) == '"' || LA(1) == '\'' || LA(1) == '\\' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleEscapeSequenceEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleEscapeSequenceEx; /* Prevent compiler warnings */
    ruleEscapeSequenceEx: ;

}
// $ANTLR end EscapeSequence

//   Comes from: 1128:5: ( '\\'' ( ESC_SEQ |~ ( '\\'' | '\\\\' ) ) '\\'' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CHAR
 *
 * Looks to match the characters the constitute the token CHAR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCHAR(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = CHAR;


    // SQL.g:1128:5: ( '\\'' ( ESC_SEQ |~ ( '\\'' | '\\\\' ) ) '\\'' )
    // SQL.g:1128:8: '\\'' ( ESC_SEQ |~ ( '\\'' | '\\\\' ) ) '\\''
    {
        MATCHC('\'');
        if  (HASEXCEPTION())
        {
            goto ruleCHAREx;
        }


        // SQL.g:1128:13: ( ESC_SEQ |~ ( '\\'' | '\\\\' ) )
        {
            int alt13=2;
            {
                int LA13_0 = LA(1);
                if ( (LA13_0 == '\\'))
                {
                    alt13=1;
                }
                else if ( (((LA13_0 >= 0x0000) && (LA13_0 <= '&')) || ((LA13_0 >= '(') && (LA13_0 <= '[')) || ((LA13_0 >= ']') && (LA13_0 <= 0xFFFF))))
                {
                    alt13=2;
                }
                else
                {

                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 13;
                    EXCEPTION->state        = 0;


                    goto ruleCHAREx;

                }
            }
            switch (alt13)
            {
        	case 1:
        	    // SQL.g:1128:15: ESC_SEQ
        	    {
        	        /* 1128:15: ESC_SEQ */
        	        mESC_SEQ(ctx );
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleCHAREx;
        	        }



        	    }
        	    break;
        	case 2:
        	    // SQL.g:1128:25: ~ ( '\\'' | '\\\\' )
        	    {
        	        if ( ((LA(1) >= 0x0000) && (LA(1) <= '&')) || ((LA(1) >= '(') && (LA(1) <= '[')) || ((LA(1) >= ']') && (LA(1) <= 0xFFFF)) )
        	        {
        	            CONSUME();
        	        }
        	        else
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();
        	            goto ruleCHAREx;
        	        }


        	    }
        	    break;

            }
        }

        MATCHC('\'');
        if  (HASEXCEPTION())
        {
            goto ruleCHAREx;
        }


    }

	LEXSTATE->type = _type;
    // This is where rules clean up and exit
    //
    goto ruleCHAREx; /* Prevent compiler warnings */
    ruleCHAREx: ;

}
// $ANTLR end CHAR

//   Comes from: 1133:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EXPONENT
 *
 * Looks to match the characters the constitute the token EXPONENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mEXPONENT(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;


    // SQL.g:1133:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
    // SQL.g:1133:12: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
    {
        if ( LA(1) == 'E' || LA(1) == 'e' )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleEXPONENTEx;
        }


        // SQL.g:1133:22: ( '+' | '-' )?
        {
            int alt14=2;
            switch ( LA(1) )
            {
                case '+':
                case '-':
                	{
                		alt14=1;
                	}
                    break;
            }

            switch (alt14)
            {
        	case 1:
        	    // SQL.g:
        	    {
        	        if ( LA(1) == '+' || LA(1) == '-' )
        	        {
        	            CONSUME();
        	        }
        	        else
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();
        	            goto ruleEXPONENTEx;
        	        }


        	    }
        	    break;

            }
        }

        // SQL.g:1133:33: ( '0' .. '9' )+
        {
            int cnt15=0;

            for (;;)
            {
                int alt15=2;
        	switch ( LA(1) )
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        		{
        			alt15=1;
        		}
        	    break;

        	}

        	switch (alt15)
        	{
        	    case 1:
        	        // SQL.g:
        	        {
        	            if ( ((LA(1) >= '0') && (LA(1) <= '9')) )
        	            {
        	                CONSUME();
        	            }
        	            else
        	            {
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	                LRECOVER();
        	                goto ruleEXPONENTEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt15 >= 1 )
        		{
        		    goto loop15;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleEXPONENTEx;
        	}
        	cnt15++;
            }
            loop15: ;	/* Jump to here if this rule does not match */
        }

    }


    // This is where rules clean up and exit
    //
    goto ruleEXPONENTEx; /* Prevent compiler warnings */
    ruleEXPONENTEx: ;

}
// $ANTLR end EXPONENT

//   Comes from: 1136:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start HEX_DIGIT
 *
 * Looks to match the characters the constitute the token HEX_DIGIT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mHEX_DIGIT(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;


    // SQL.g:1136:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
    // SQL.g:
    {
        if ( ((LA(1) >= '0') && (LA(1) <= '9')) || ((LA(1) >= 'A') && (LA(1) <= 'F')) || ((LA(1) >= 'a') && (LA(1) <= 'f')) )
        {
            CONSUME();
        }
        else
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();
            goto ruleHEX_DIGITEx;
        }


    }


    // This is where rules clean up and exit
    //
    goto ruleHEX_DIGITEx; /* Prevent compiler warnings */
    ruleHEX_DIGITEx: ;

}
// $ANTLR end HEX_DIGIT

//   Comes from: 1140:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_ESC | OCTAL_ESC )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ESC_SEQ
 *
 * Looks to match the characters the constitute the token ESC_SEQ
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mESC_SEQ(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;


    {
        //  SQL.g:1140:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_ESC | OCTAL_ESC )

        ANTLR3_UINT32 alt16;

        alt16=3;

        switch ( LA(1) )
        {
        case '\\':
        	{
        		switch ( LA(2) )
        		{
        		case '"':
        		case '\'':
        		case '\\':
        		case 'b':
        		case 'f':
        		case 'n':
        		case 'r':
        		case 't':
        			{
        				alt16=1;
        			}
        		    break;
        		case 'u':
        			{
        				alt16=2;
        			}
        		    break;
        		case '0':
        		case '1':
        		case '2':
        		case '3':
        		case '4':
        		case '5':
        		case '6':
        		case '7':
        			{
        				alt16=3;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 16;
        		    EXCEPTION->state        = 1;


        		    goto ruleESC_SEQEx;

        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 16;
            EXCEPTION->state        = 0;


            goto ruleESC_SEQEx;

        }

        switch (alt16)
        {
    	case 1:
    	    // SQL.g:1140:9: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
    	    {
    	        MATCHC('\\');
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleESC_SEQEx;
    	        }


    	        if ( LA(1) == '"' || LA(1) == '\'' || LA(1) == '\\' || LA(1) == 'b' || LA(1) == 'f' || LA(1) == 'n' || LA(1) == 'r' || LA(1) == 't' )
    	        {
    	            CONSUME();
    	        }
    	        else
    	        {
    	            CONSTRUCTEX();
    	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	            LRECOVER();
    	            goto ruleESC_SEQEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // SQL.g:1141:9: UNICODE_ESC
    	    {
    	        /* 1141:9: UNICODE_ESC */
    	        mUNICODE_ESC(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleESC_SEQEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // SQL.g:1142:9: OCTAL_ESC
    	    {
    	        /* 1142:9: OCTAL_ESC */
    	        mOCTAL_ESC(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleESC_SEQEx;
    	        }



    	    }
    	    break;

        }
    }

    // This is where rules clean up and exit
    //
    goto ruleESC_SEQEx; /* Prevent compiler warnings */
    ruleESC_SEQEx: ;

}
// $ANTLR end ESC_SEQ

//   Comes from: 1147:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OCTAL_ESC
 *
 * Looks to match the characters the constitute the token OCTAL_ESC
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOCTAL_ESC(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;


    {
        //  SQL.g:1147:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )

        ANTLR3_UINT32 alt17;

        alt17=3;

        switch ( LA(1) )
        {
        case '\\':
        	{
        		switch ( LA(2) )
        		{
        		case '0':
        		case '1':
        		case '2':
        		case '3':
        			{
        				switch ( LA(3) )
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        					{
        						switch ( LA(4) )
        						{
        						case '0':
        						case '1':
        						case '2':
        						case '3':
        						case '4':
        						case '5':
        						case '6':
        						case '7':
        							{
        								alt17=1;
        							}
        						    break;

        						default:
        						    alt17=2;
        						}

        					}
        				    break;

        				default:
        				    alt17=3;
        				}

        			}
        		    break;
        		case '4':
        		case '5':
        		case '6':
        		case '7':
        			{
        				switch ( LA(3) )
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        					{
        						alt17=2;
        					}
        				    break;

        				default:
        				    alt17=3;
        				}

        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 17;
        		    EXCEPTION->state        = 1;


        		    goto ruleOCTAL_ESCEx;

        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 17;
            EXCEPTION->state        = 0;


            goto ruleOCTAL_ESCEx;

        }

        switch (alt17)
        {
    	case 1:
    	    // SQL.g:1147:9: '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' )
    	    {
    	        MATCHC('\\');
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOCTAL_ESCEx;
    	        }


    	        if ( ((LA(1) >= '0') && (LA(1) <= '3')) )
    	        {
    	            CONSUME();
    	        }
    	        else
    	        {
    	            CONSTRUCTEX();
    	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	            LRECOVER();
    	            goto ruleOCTAL_ESCEx;
    	        }


    	        if ( ((LA(1) >= '0') && (LA(1) <= '7')) )
    	        {
    	            CONSUME();
    	        }
    	        else
    	        {
    	            CONSTRUCTEX();
    	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	            LRECOVER();
    	            goto ruleOCTAL_ESCEx;
    	        }


    	        if ( ((LA(1) >= '0') && (LA(1) <= '7')) )
    	        {
    	            CONSUME();
    	        }
    	        else
    	        {
    	            CONSTRUCTEX();
    	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	            LRECOVER();
    	            goto ruleOCTAL_ESCEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // SQL.g:1148:9: '\\\\' ( '0' .. '7' ) ( '0' .. '7' )
    	    {
    	        MATCHC('\\');
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOCTAL_ESCEx;
    	        }


    	        if ( ((LA(1) >= '0') && (LA(1) <= '7')) )
    	        {
    	            CONSUME();
    	        }
    	        else
    	        {
    	            CONSTRUCTEX();
    	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	            LRECOVER();
    	            goto ruleOCTAL_ESCEx;
    	        }


    	        if ( ((LA(1) >= '0') && (LA(1) <= '7')) )
    	        {
    	            CONSUME();
    	        }
    	        else
    	        {
    	            CONSTRUCTEX();
    	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	            LRECOVER();
    	            goto ruleOCTAL_ESCEx;
    	        }


    	    }
    	    break;
    	case 3:
    	    // SQL.g:1149:9: '\\\\' ( '0' .. '7' )
    	    {
    	        MATCHC('\\');
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOCTAL_ESCEx;
    	        }


    	        if ( ((LA(1) >= '0') && (LA(1) <= '7')) )
    	        {
    	            CONSUME();
    	        }
    	        else
    	        {
    	            CONSTRUCTEX();
    	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	            LRECOVER();
    	            goto ruleOCTAL_ESCEx;
    	        }


    	    }
    	    break;

        }
    }

    // This is where rules clean up and exit
    //
    goto ruleOCTAL_ESCEx; /* Prevent compiler warnings */
    ruleOCTAL_ESCEx: ;

}
// $ANTLR end OCTAL_ESC

//   Comes from: 1154:5: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start UNICODE_ESC
 *
 * Looks to match the characters the constitute the token UNICODE_ESC
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mUNICODE_ESC(pSQLLexer ctx)
{
	ANTLR3_UINT32	_type;


    // SQL.g:1154:5: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
    // SQL.g:1154:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
    {
        MATCHC('\\');
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }


        MATCHC('u');
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }


        /* 1154:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT */
        mHEX_DIGIT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }



        /* 1154:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT */
        mHEX_DIGIT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }



        /* 1154:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT */
        mHEX_DIGIT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }



        /* 1154:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT */
        mHEX_DIGIT(ctx );
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }



    }


    // This is where rules clean up and exit
    //
    goto ruleUNICODE_ESCEx; /* Prevent compiler warnings */
    ruleUNICODE_ESCEx: ;

}
// $ANTLR end UNICODE_ESC

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
static void
mTokens(pSQLLexer ctx)
{
    {
        //  SQL.g:1:8: ( T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | ASTERISK | SINGLE_EQ | DOUBLE_EQ | OP_LT | LE | GT | GE | NOTEQ | AND | OR | COMMA | SEMICOLON | ALL | ANCESTOR | AS | ASC | ASYNC | BY | CREATE | COLLECTION | CURRENT_DATE | CURRENT_TIME | CURRENT_TIMESTAMP | DESC | DELETE | DISTINCT | DROP | EACH | EXCEPT | FLATTEN | FROM | GROUP | HAVING | IN | COLLECTION_INDEX | INSERT | INTERSECT | INTO | IS | LIMIT | NIL | OFFSET | OPTIONS | ORDER | SELECT | SET | SYNC | UNION | UPDATE | WHERE | VALUE | VALUES | WS | ID | NUMBER | FLOAT | STRING | CHAR )

        ANTLR3_UINT32 alt18;

        alt18=65;

        alt18 = cdfa18.predict(ctx, RECOGNIZER, ISTREAM, &cdfa18);
        if  (HASEXCEPTION())
        {
            goto ruleTokensEx;
        }

        switch (alt18)
        {
    	case 1:
    	    // SQL.g:1:10: T__94
    	    {
    	        /* 1:10: T__94 */
    	        mT__94(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // SQL.g:1:16: T__95
    	    {
    	        /* 1:16: T__95 */
    	        mT__95(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // SQL.g:1:22: T__96
    	    {
    	        /* 1:22: T__96 */
    	        mT__96(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 4:
    	    // SQL.g:1:28: T__97
    	    {
    	        /* 1:28: T__97 */
    	        mT__97(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 5:
    	    // SQL.g:1:34: T__98
    	    {
    	        /* 1:34: T__98 */
    	        mT__98(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 6:
    	    // SQL.g:1:40: T__99
    	    {
    	        /* 1:40: T__99 */
    	        mT__99(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 7:
    	    // SQL.g:1:46: T__100
    	    {
    	        /* 1:46: T__100 */
    	        mT__100(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 8:
    	    // SQL.g:1:53: ASTERISK
    	    {
    	        /* 1:53: ASTERISK */
    	        mASTERISK(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 9:
    	    // SQL.g:1:62: SINGLE_EQ
    	    {
    	        /* 1:62: SINGLE_EQ */
    	        mSINGLE_EQ(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 10:
    	    // SQL.g:1:72: DOUBLE_EQ
    	    {
    	        /* 1:72: DOUBLE_EQ */
    	        mDOUBLE_EQ(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 11:
    	    // SQL.g:1:82: OP_LT
    	    {
    	        /* 1:82: OP_LT */
    	        mOP_LT(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 12:
    	    // SQL.g:1:88: LE
    	    {
    	        /* 1:88: LE */
    	        mLE(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 13:
    	    // SQL.g:1:91: GT
    	    {
    	        /* 1:91: GT */
    	        mGT(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 14:
    	    // SQL.g:1:94: GE
    	    {
    	        /* 1:94: GE */
    	        mGE(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 15:
    	    // SQL.g:1:97: NOTEQ
    	    {
    	        /* 1:97: NOTEQ */
    	        mNOTEQ(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 16:
    	    // SQL.g:1:103: AND
    	    {
    	        /* 1:103: AND */
    	        mAND(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 17:
    	    // SQL.g:1:107: OR
    	    {
    	        /* 1:107: OR */
    	        mOR(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 18:
    	    // SQL.g:1:110: COMMA
    	    {
    	        /* 1:110: COMMA */
    	        mCOMMA(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 19:
    	    // SQL.g:1:116: SEMICOLON
    	    {
    	        /* 1:116: SEMICOLON */
    	        mSEMICOLON(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 20:
    	    // SQL.g:1:126: ALL
    	    {
    	        /* 1:126: ALL */
    	        mALL(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 21:
    	    // SQL.g:1:130: ANCESTOR
    	    {
    	        /* 1:130: ANCESTOR */
    	        mANCESTOR(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 22:
    	    // SQL.g:1:139: AS
    	    {
    	        /* 1:139: AS */
    	        mAS(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 23:
    	    // SQL.g:1:142: ASC
    	    {
    	        /* 1:142: ASC */
    	        mASC(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 24:
    	    // SQL.g:1:146: ASYNC
    	    {
    	        /* 1:146: ASYNC */
    	        mASYNC(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 25:
    	    // SQL.g:1:152: BY
    	    {
    	        /* 1:152: BY */
    	        mBY(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 26:
    	    // SQL.g:1:155: CREATE
    	    {
    	        /* 1:155: CREATE */
    	        mCREATE(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 27:
    	    // SQL.g:1:162: COLLECTION
    	    {
    	        /* 1:162: COLLECTION */
    	        mCOLLECTION(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 28:
    	    // SQL.g:1:173: CURRENT_DATE
    	    {
    	        /* 1:173: CURRENT_DATE */
    	        mCURRENT_DATE(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 29:
    	    // SQL.g:1:186: CURRENT_TIME
    	    {
    	        /* 1:186: CURRENT_TIME */
    	        mCURRENT_TIME(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 30:
    	    // SQL.g:1:199: CURRENT_TIMESTAMP
    	    {
    	        /* 1:199: CURRENT_TIMESTAMP */
    	        mCURRENT_TIMESTAMP(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 31:
    	    // SQL.g:1:217: DESC
    	    {
    	        /* 1:217: DESC */
    	        mDESC(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 32:
    	    // SQL.g:1:222: DELETE
    	    {
    	        /* 1:222: DELETE */
    	        mDELETE(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 33:
    	    // SQL.g:1:229: DISTINCT
    	    {
    	        /* 1:229: DISTINCT */
    	        mDISTINCT(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 34:
    	    // SQL.g:1:238: DROP
    	    {
    	        /* 1:238: DROP */
    	        mDROP(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 35:
    	    // SQL.g:1:243: EACH
    	    {
    	        /* 1:243: EACH */
    	        mEACH(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 36:
    	    // SQL.g:1:248: EXCEPT
    	    {
    	        /* 1:248: EXCEPT */
    	        mEXCEPT(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 37:
    	    // SQL.g:1:255: FLATTEN
    	    {
    	        /* 1:255: FLATTEN */
    	        mFLATTEN(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 38:
    	    // SQL.g:1:263: FROM
    	    {
    	        /* 1:263: FROM */
    	        mFROM(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 39:
    	    // SQL.g:1:268: GROUP
    	    {
    	        /* 1:268: GROUP */
    	        mGROUP(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 40:
    	    // SQL.g:1:274: HAVING
    	    {
    	        /* 1:274: HAVING */
    	        mHAVING(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 41:
    	    // SQL.g:1:281: IN
    	    {
    	        /* 1:281: IN */
    	        mIN(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 42:
    	    // SQL.g:1:284: COLLECTION_INDEX
    	    {
    	        /* 1:284: COLLECTION_INDEX */
    	        mCOLLECTION_INDEX(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 43:
    	    // SQL.g:1:301: INSERT
    	    {
    	        /* 1:301: INSERT */
    	        mINSERT(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 44:
    	    // SQL.g:1:308: INTERSECT
    	    {
    	        /* 1:308: INTERSECT */
    	        mINTERSECT(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 45:
    	    // SQL.g:1:318: INTO
    	    {
    	        /* 1:318: INTO */
    	        mINTO(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 46:
    	    // SQL.g:1:323: IS
    	    {
    	        /* 1:323: IS */
    	        mIS(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 47:
    	    // SQL.g:1:326: LIMIT
    	    {
    	        /* 1:326: LIMIT */
    	        mLIMIT(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 48:
    	    // SQL.g:1:332: NIL
    	    {
    	        /* 1:332: NIL */
    	        mNIL(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 49:
    	    // SQL.g:1:336: OFFSET
    	    {
    	        /* 1:336: OFFSET */
    	        mOFFSET(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 50:
    	    // SQL.g:1:343: OPTIONS
    	    {
    	        /* 1:343: OPTIONS */
    	        mOPTIONS(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 51:
    	    // SQL.g:1:351: ORDER
    	    {
    	        /* 1:351: ORDER */
    	        mORDER(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 52:
    	    // SQL.g:1:357: SELECT
    	    {
    	        /* 1:357: SELECT */
    	        mSELECT(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 53:
    	    // SQL.g:1:364: SET
    	    {
    	        /* 1:364: SET */
    	        mSET(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 54:
    	    // SQL.g:1:368: SYNC
    	    {
    	        /* 1:368: SYNC */
    	        mSYNC(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 55:
    	    // SQL.g:1:373: UNION
    	    {
    	        /* 1:373: UNION */
    	        mUNION(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 56:
    	    // SQL.g:1:379: UPDATE
    	    {
    	        /* 1:379: UPDATE */
    	        mUPDATE(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 57:
    	    // SQL.g:1:386: WHERE
    	    {
    	        /* 1:386: WHERE */
    	        mWHERE(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 58:
    	    // SQL.g:1:392: VALUE
    	    {
    	        /* 1:392: VALUE */
    	        mVALUE(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 59:
    	    // SQL.g:1:398: VALUES
    	    {
    	        /* 1:398: VALUES */
    	        mVALUES(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 60:
    	    // SQL.g:1:405: WS
    	    {
    	        /* 1:405: WS */
    	        mWS(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 61:
    	    // SQL.g:1:408: ID
    	    {
    	        /* 1:408: ID */
    	        mID(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 62:
    	    // SQL.g:1:411: NUMBER
    	    {
    	        /* 1:411: NUMBER */
    	        mNUMBER(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 63:
    	    // SQL.g:1:418: FLOAT
    	    {
    	        /* 1:418: FLOAT */
    	        mFLOAT(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 64:
    	    // SQL.g:1:424: STRING
    	    {
    	        /* 1:424: STRING */
    	        mSTRING(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 65:
    	    // SQL.g:1:431: CHAR
    	    {
    	        /* 1:431: CHAR */
    	        mCHAR(ctx );
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;

        }
    }


    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */


/* End of code
 * =============================================================================
 */
